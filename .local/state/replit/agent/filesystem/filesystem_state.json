{"file_contents":{"download_repo.js":{"content":"import { Octokit } from '@octokit/rest'\nimport fs from 'fs/promises'\nimport path from 'path'\n\nlet connectionSettings;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('GitHub not connected');\n  }\n  return accessToken;\n}\n\nasync function getUncachableGitHubClient() {\n  const accessToken = await getAccessToken();\n  return new Octokit({ auth: accessToken });\n}\n\nasync function downloadRepository() {\n  try {\n    const octokit = await getUncachableGitHubClient();\n    \n    // CONFIGURATION: Update these values for your repository\n    const REPO_OWNER = process.env.GITHUB_REPO_OWNER || 'YOUR_GITHUB_USERNAME';\n    const REPO_NAME = process.env.GITHUB_REPO_NAME || 'erp-system';\n    \n    if (REPO_OWNER === 'YOUR_GITHUB_USERNAME') {\n      throw new Error('Please set GITHUB_REPO_OWNER environment variable or update REPO_OWNER in this script');\n    }\n    \n    // Get repository tree\n    const { data: tree } = await octokit.rest.git.getTree({\n      owner: REPO_OWNER,\n      repo: REPO_NAME,\n      tree_sha: 'HEAD',\n      recursive: true\n    });\n\n    console.log(`Found ${tree.tree.length} items in repository`);\n    \n    // Create directories and download files\n    for (const item of tree.tree) {\n      if (item.type === 'blob' && item.path) {\n        // Create directory if needed\n        const dir = path.dirname(item.path);\n        if (dir !== '.') {\n          await fs.mkdir(dir, { recursive: true });\n        }\n        \n        // Download file content\n        const { data: blob } = await octokit.rest.git.getBlob({\n          owner: REPO_OWNER,\n          repo: REPO_NAME,\n          file_sha: item.sha\n        });\n        \n        // Write file\n        const content = Buffer.from(blob.content, 'base64');\n        await fs.writeFile(item.path, content);\n        console.log(`Downloaded: ${item.path}`);\n      } else if (item.type === 'tree' && item.path) {\n        // Create directory\n        await fs.mkdir(item.path, { recursive: true });\n        console.log(`Created directory: ${item.path}`);\n      }\n    }\n    \n    console.log('Repository download completed!');\n    \n  } catch (error) {\n    console.error('Error downloading repository:', error.message);\n  }\n}\n\ndownloadRepository();","size_bytes":3219},"download_repo_filtered.js":{"content":"import { Octokit } from '@octokit/rest'\nimport fs from 'fs/promises'\nimport path from 'path'\n\nlet connectionSettings;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('GitHub not connected');\n  }\n  return accessToken;\n}\n\nasync function getUncachableGitHubClient() {\n  const accessToken = await getAccessToken();\n  return new Octokit({ auth: accessToken });\n}\n\nasync function downloadRepository() {\n  try {\n    const octokit = await getUncachableGitHubClient();\n    \n    // CONFIGURATION: Update these values for your repository\n    const REPO_OWNER = process.env.GITHUB_REPO_OWNER || 'YOUR_GITHUB_USERNAME';\n    const REPO_NAME = process.env.GITHUB_REPO_NAME || 'erp-system';\n    \n    if (REPO_OWNER === 'YOUR_GITHUB_USERNAME') {\n      throw new Error('Please set GITHUB_REPO_OWNER environment variable or update REPO_OWNER in this script');\n    }\n    \n    // Get repository tree\n    const { data: tree } = await octokit.rest.git.getTree({\n      owner: REPO_OWNER,\n      repo: REPO_NAME,\n      tree_sha: 'HEAD',\n      recursive: true\n    });\n\n    console.log(`Found ${tree.tree.length} items in repository`);\n    \n    // Skip problematic directories\n    const skipPaths = ['.local', '.replit', 'replit.md'];\n    \n    // Create directories and download files\n    for (const item of tree.tree) {\n      // Skip problematic paths\n      if (skipPaths.some(skip => item.path.startsWith(skip))) {\n        console.log(`Skipped: ${item.path}`);\n        continue;\n      }\n      \n      if (item.type === 'blob' && item.path) {\n        // Create directory if needed\n        const dir = path.dirname(item.path);\n        if (dir !== '.') {\n          await fs.mkdir(dir, { recursive: true });\n        }\n        \n        // Download file content\n        const { data: blob } = await octokit.rest.git.getBlob({\n          owner: REPO_OWNER,\n          repo: REPO_NAME,\n          file_sha: item.sha\n        });\n        \n        // Write file\n        const content = Buffer.from(blob.content, 'base64');\n        await fs.writeFile(item.path, content);\n        console.log(`Downloaded: ${item.path}`);\n      } else if (item.type === 'tree' && item.path) {\n        // Create directory\n        await fs.mkdir(item.path, { recursive: true });\n        console.log(`Created directory: ${item.path}`);\n      }\n    }\n    \n    console.log('Repository download completed!');\n    \n  } catch (error) {\n    console.error('Error downloading repository:', error.message);\n  }\n}\n\ndownloadRepository();","size_bytes":3493},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"migrate-json-to-db.ts":{"content":"// Database migration script to transfer existing JSON data to PostgreSQL\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { products, stockMovements, customers, customerTransactions } from \"./shared/schema.ts\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Initialize database connection\nconst sql = neon(process.env.DATABASE_URL);\nconst db = drizzle(sql);\n\nasync function migrateProductsData() {\n  try {\n    console.log('üîÑ Migrating products data...');\n    \n    // Read JSON data\n    const productsPath = path.join(__dirname, 'data/products.json');\n    const productsData = JSON.parse(fs.readFileSync(productsPath, 'utf8'));\n    \n    // Clear existing data\n    await db.delete(products);\n    console.log('‚úÖ Cleared existing products data');\n    \n    // Insert products\n    for (const product of productsData) {\n      try {\n        await db.insert(products).values({\n          id: product.id,\n          name: product.name,\n          buyPrice: product.buyPrice?.toString() || \"0\",\n          sellPrice: product.sellPrice?.toString() || \"0\",\n          currency: product.currency || \"USD\",\n          buyCurrency: product.buyCurrency || \"USD\", \n          sellCurrency: product.sellCurrency || \"USD\",\n          stock: product.stock || 0,\n          unit: product.unit || \"adet\",\n          status: product.status || \"Aktif\",\n          description: product.description || null,\n          coverImage: product.coverImage || null,\n          images: product.images || [],\n          attributes: product.attributes || []\n        });\n      } catch (error) {\n        console.error(`Error inserting product ${product.id}:`, error);\n      }\n    }\n    \n    console.log(`‚úÖ Migrated ${productsData.length} products to database`);\n  } catch (error) {\n    console.error('‚ùå Error migrating products:', error);\n  }\n}\n\nasync function migrateStockMovementsData() {\n  try {\n    console.log('üîÑ Migrating stock movements data...');\n    \n    // Read JSON data\n    const stockMovementsPath = path.join(__dirname, 'data/stockMovements.json');\n    const stockMovementsData = JSON.parse(fs.readFileSync(stockMovementsPath, 'utf8'));\n    \n    // Clear existing data\n    await db.delete(stockMovements);\n    console.log('‚úÖ Cleared existing stock movements data');\n    \n    // Insert stock movements\n    for (const movement of stockMovementsData) {\n      try {\n        await db.insert(stockMovements).values({\n          id: movement.id,\n          productId: movement.productId,\n          warehouseId: movement.warehouseId,\n          shelfId: movement.shelfId || null,\n          type: movement.type || \"Giri≈ü\",\n          quantity: movement.quantity.toString(),\n          unit: movement.unit || \"adet\",\n          date: new Date(movement.date),\n          note: movement.note || null,\n          barcodes: movement.barcodes || []\n        });\n      } catch (error) {\n        console.error(`Error inserting stock movement ${movement.id}:`, error);\n      }\n    }\n    \n    console.log(`‚úÖ Migrated ${stockMovementsData.length} stock movements to database`);\n  } catch (error) {\n    console.error('‚ùå Error migrating stock movements:', error);\n  }\n}\n\nasync function migrateCustomersData() {\n  try {\n    console.log('üîÑ Migrating customers data...');\n    \n    // Read JSON data\n    const customersPath = path.join(__dirname, 'data/customers.json');\n    const customersData = JSON.parse(fs.readFileSync(customersPath, 'utf8'));\n    \n    // Clear existing data\n    await db.delete(customers);\n    console.log('‚úÖ Cleared existing customers data');\n    \n    // Insert customers\n    for (const customer of customersData) {\n      try {\n        await db.insert(customers).values({\n          id: customer.id,\n          code: customer.code,\n          name: customer.name,\n          phone: customer.phone || null,\n          address: customer.address || null,\n          currency: customer.currency || \"USD\",\n          openingBalance: customer.openingBalance?.toString() || \"0\",\n          createdAt: new Date(customer.createdAt),\n          updatedAt: new Date(customer.updatedAt)\n        });\n      } catch (error) {\n        console.error(`Error inserting customer ${customer.id}:`, error);\n      }\n    }\n    \n    console.log(`‚úÖ Migrated ${customersData.length} customers to database`);\n  } catch (error) {\n    console.error('‚ùå Error migrating customers:', error);\n  }\n}\n\nasync function migrateCustomerTransactionsData() {\n  try {\n    console.log('üîÑ Migrating customer transactions data...');\n    \n    // Read JSON data\n    const transactionsPath = path.join(__dirname, 'data/customer-transactions.json');\n    \n    // Check if file exists\n    if (!fs.existsSync(transactionsPath)) {\n      console.log('‚ÑπÔ∏è No customer transactions file found, skipping...');\n      return;\n    }\n    \n    const transactionsData = JSON.parse(fs.readFileSync(transactionsPath, 'utf8'));\n    \n    // Clear existing data\n    await db.delete(customerTransactions);\n    console.log('‚úÖ Cleared existing customer transactions data');\n    \n    // Insert customer transactions\n    for (const transaction of transactionsData) {\n      try {\n        await db.insert(customerTransactions).values({\n          id: transaction.id,\n          customerId: transaction.customerId,\n          type: transaction.type,\n          amount: transaction.amount.toString(),\n          currency: transaction.currency || \"USD\",\n          description: transaction.description || null,\n          date: new Date(transaction.date),\n          reference: transaction.reference || null,\n          createdAt: new Date(transaction.createdAt),\n          updatedAt: new Date(transaction.updatedAt)\n        });\n      } catch (error) {\n        console.error(`Error inserting customer transaction ${transaction.id}:`, error);\n      }\n    }\n    \n    console.log(`‚úÖ Migrated ${transactionsData.length} customer transactions to database`);\n  } catch (error) {\n    console.error('‚ùå Error migrating customer transactions:', error);\n  }\n}\n\nasync function runMigration() {\n  console.log('üöÄ Starting database migration...');\n  console.log('üìÇ Transferring data from JSON files to PostgreSQL database\\n');\n  \n  try {\n    await migrateProductsData();\n    await migrateStockMovementsData();\n    await migrateCustomersData();\n    await migrateCustomerTransactionsData();\n    \n    console.log('\\nüéâ Migration completed successfully!');\n    console.log('üíæ All data has been transferred to the PostgreSQL database');\n    \n  } catch (error) {\n    console.error('\\n‚ùå Migration failed:', error);\n    process.exit(1);\n  }\n}\n\n// Run migration if this script is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runMigration();\n}","size_bytes":6847},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a product catalog management system (ERP) built with Node.js, Express, and EJS template engine. The application allows users to manage product information including pricing, stock levels, and images. It features a comprehensive filtering system with URL persistence and supports internationalization in Turkish, Polish, and Ukrainian languages. The system is designed for curtain/textile product management with features like product cards, statistics overview, and image viewing capabilities.\n\n**Architecture**: Single-server EJS application with traditional server-side rendering\n**Production Ready**: Includes security middleware (Helmet), compression, and health monitoring\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe application uses server-side rendering with EJS templates:\n\n- **Template Engine**: EJS for dynamic HTML generation\n- **Styling**: Bootstrap CSS with custom styling for consistent design\n- **Interactivity**: Vanilla JavaScript for filtering, modals, and form handling\n- **Responsive Design**: Mobile-first approach with collapsible filters and touch-friendly interfaces\n- **Client-Side Features**: Advanced filtering with URL query persistence, image lightbox, and statistics modals\n\nThe frontend follows a traditional MVC pattern with EJS views, server-side routing, and progressive enhancement through JavaScript.\n\n## Backend Architecture\n\nThe server-side uses Node.js with Express in a consolidated single-server architecture:\n\n- **Web Framework**: Express.js with TypeScript\n- **Template Rendering**: EJS server-side rendering for all pages\n- **Storage Layer**: JSON file-based storage for products and attributes data\n- **API Design**: RESTful API endpoints for statistics and data operations\n- **Security**: Helmet middleware, compression, and CSRF protection ready\n- **Validation**: Zod schemas for runtime type checking and validation\n- **Development**: Hot reload with tsx for rapid development cycles\n\nThe backend implements a traditional MVC pattern with centralized routing, file-based storage, and comprehensive error handling. All routes serve EJS templates with no client-side applications.\n\n## Data Storage Solutions\n\n- **Development**: JSON file-based storage in `/data` directory for rapid prototyping\n- **Products**: Comprehensive product data with pricing, inventory, descriptions, and image arrays\n- **Attributes**: Configurable product attributes with OPTIONS and TEXT types\n- **Type Safety**: Zod schemas for runtime validation and TypeScript type safety\n\nThe storage system is designed for product management with support for multi-currency pricing, image management, and flexible attribute systems. Ready for database migration with existing Drizzle ORM schemas.\n\n## Authentication and Authorization\n\nCurrently implements a basic session-based authentication structure with user management interfaces defined in the storage layer. The system is prepared for session management with connect-pg-simple for PostgreSQL session storage.\n\n## External Dependencies\n\n- **Production Security**: Helmet for security headers, compression for performance\n- **File Uploads**: Multer for image handling with type validation and size limits\n- **Icons**: FontAwesome 6.4.0 for consistent iconography\n- **Image Handling**: Server-side upload processing with lightbox viewing\n- **Health Monitoring**: `/healthz` endpoint for deployment health checks\n- **Development Tools**: \n  - ESBuild for production bundling\n  - tsx for TypeScript development\n  - Drizzle Kit for future database migrations\n\nThe system is optimized for production deployment with security middleware, error handling, and monitoring capabilities. Architecture is consolidated to a single Node.js + Express + EJS stack.","size_bytes":3824},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"update_products.js":{"content":"import fs from 'fs';\n\n// Read the products file\nconst productsData = fs.readFileSync('data/products.json', 'utf8');\nconst products = JSON.parse(productsData);\n\n// Add unit field to products that don't have it\nconst updatedProducts = products.map(product => {\n  if (!product.unit) {\n    product.unit = \"adet\";\n  }\n  return product;\n});\n\n// Write back to file\nfs.writeFileSync('data/products.json', JSON.stringify(updatedProducts, null, 2));\n\nconsole.log(`Updated ${updatedProducts.length} products with unit field`);","size_bytes":515},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/barcodeUtils.ts":{"content":"import bwipjs from 'bwip-js';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport type { BarcodeJson } from '../shared/schema.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Helper function to load existing barcodes\nfunction loadBarcodes(): BarcodeJson[] {\n  try {\n    const barcodesData = fs.readFileSync(path.join(__dirname, '../data/barcodes.json'), 'utf8');\n    return JSON.parse(barcodesData);\n  } catch (error) {\n    console.error('Error loading barcodes:', error);\n    return [];\n  }\n}\n\n// Helper function to save barcodes\nfunction saveBarcodes(barcodes: BarcodeJson[]): boolean {\n  try {\n    fs.writeFileSync(path.join(__dirname, '../data/barcodes.json'), JSON.stringify(barcodes, null, 2));\n    return true;\n  } catch (error) {\n    console.error('Error saving barcodes:', error);\n    return false;\n  }\n}\n\n// Concurrency-safe unique barcode generation with retry mechanism\nexport function generateUniqueBarcode(): string {\n  const maxAttempts = 1000;\n  const maxRetries = 3;\n  \n  for (let retry = 0; retry < maxRetries; retry++) {\n    try {\n      // Reload barcodes each retry to get latest state\n      const existingBarcodes = loadBarcodes();\n      const existingCodes = new Set(existingBarcodes.map(b => b.code));\n      \n      let code: string;\n      let attempts = 0;\n      \n      do {\n        // Generate 6-digit random code with high entropy\n        const randomNum = Math.floor(100000 + Math.random() * 900000);\n        // Add timestamp component for uniqueness\n        const timeComponent = Date.now() % 1000;\n        code = (randomNum + timeComponent).toString().slice(-6).padStart(6, '0');\n        attempts++;\n        \n        if (attempts > maxAttempts) {\n          throw new Error(`Unable to generate unique barcode after ${maxAttempts} attempts on retry ${retry + 1}`);\n        }\n      } while (existingCodes.has(code));\n      \n      return code;\n    } catch (error) {\n      if (retry === maxRetries - 1) {\n        // Final retry failed, throw error\n        throw error;\n      }\n      // Wait a small random time before retrying to reduce collision probability\n      const waitTime = Math.random() * 100 + 50; // 50-150ms\n      setTimeout(() => {}, waitTime);\n    }\n  }\n  \n  throw new Error('Failed to generate unique barcode after all retries');\n}\n\n// Generate Code128 barcode image as base64\nexport async function generateBarcodeImage(code: string): Promise<string> {\n  try {\n    const buffer = await bwipjs.toBuffer({\n      bcid: 'code128',       // Barcode type\n      text: code,            // Text to encode\n      scale: 3,              // 3x scaling factor\n      height: 10,            // Bar height, in millimeters\n      includetext: true,     // Show human-readable text\n      textxalign: 'center',  // Always good to set this\n    });\n    \n    return `data:image/png;base64,${buffer.toString('base64')}`;\n  } catch (error) {\n    console.error('Error generating barcode image:', error);\n    throw new Error('Failed to generate barcode image');\n  }\n}\n\n// Create and save barcode record\nexport function createBarcodeRecord(\n  code: string,\n  productId: string,\n  stockMovementId: string,\n  warehouseId: string,\n  shelfId: string | null,\n  quantity: number = 1,\n  unit: 'adet' | 'metre' = 'adet'\n): BarcodeJson {\n  const barcodes = loadBarcodes();\n  \n  const newBarcode: BarcodeJson = {\n    id: `barcode_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    code,\n    productId,\n    stockMovementId,\n    warehouseId,\n    shelfId,\n    quantity,\n    unit,\n    isUsed: false,\n    createdAt: new Date().toISOString()\n  };\n  \n  barcodes.push(newBarcode);\n  saveBarcodes(barcodes);\n  \n  return newBarcode;\n}\n\n// Generate multiple barcodes for a stock movement\nexport function generateBarcodesForStockMovement(\n  productId: string,\n  stockMovementId: string,\n  warehouseId: string,\n  shelfId: string | null,\n  unit: 'adet' | 'metre',\n  quantities: number[]\n): BarcodeJson[] {\n  const createdBarcodes: BarcodeJson[] = [];\n  \n  for (const quantity of quantities) {\n    try {\n      const code = generateUniqueBarcode();\n      const barcode = createBarcodeRecord(\n        code,\n        productId,\n        stockMovementId,\n        warehouseId,\n        shelfId,\n        quantity,\n        unit\n      );\n      createdBarcodes.push(barcode);\n    } catch (error) {\n      console.error('Error creating barcode:', error);\n      throw error;\n    }\n  }\n  \n  return createdBarcodes;\n}\n\n// Check if barcode exists\nexport function barcodeExists(code: string): boolean {\n  const barcodes = loadBarcodes();\n  return barcodes.some(b => b.code === code);\n}\n\n// Find barcode by code\nexport function findBarcodeByCode(code: string): BarcodeJson | null {\n  const barcodes = loadBarcodes();\n  return barcodes.find(b => b.code === code) || null;\n}\n\n// Mark barcode as used\nexport function markBarcodeAsUsed(code: string): boolean {\n  const barcodes = loadBarcodes();\n  const barcodeIndex = barcodes.findIndex(b => b.code === code);\n  \n  if (barcodeIndex !== -1) {\n    barcodes[barcodeIndex].isUsed = true;\n    return saveBarcodes(barcodes);\n  }\n  \n  return false;\n}\n\n// Get barcodes for a product\nexport function getBarcodesByProduct(productId: string): BarcodeJson[] {\n  const barcodes = loadBarcodes();\n  return barcodes.filter(b => b.productId === productId);\n}\n\n// Get barcodes for a stock movement\nexport function getBarcodesByStockMovement(stockMovementId: string): BarcodeJson[] {\n  const barcodes = loadBarcodes();\n  return barcodes.filter(b => b.stockMovementId === stockMovementId);\n}","size_bytes":5589},"server/github-client.js":{"content":"import { Octokit } from '@octokit/rest'\n\nlet connectionSettings;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('GitHub not connected');\n  }\n  return accessToken;\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableGitHubClient() {\n  const accessToken = await getAccessToken();\n  return new Octokit({ auth: accessToken });\n}","size_bytes":1504},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { fileURLToPath } from 'url';\nimport i18n from 'i18n';\nimport multer from 'multer';\nimport crypto from 'crypto';\nimport helmet from 'helmet';\nimport compression from 'compression';\nimport methodOverride from 'method-override';\nimport { registerRoutes } from './routes.js';\nimport { storage } from './storage.js';\n\n// Extend Request type to include i18n methods\ndeclare global {\n  namespace Express {\n    interface Request {\n      __: (phrase: string, ...args: any[]) => string;\n      getLocale: () => string;\n    }\n  }\n}\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\n\n// CSS version for cache busting (regenerates on server restart)\nconst CSS_VERSION = Date.now();\n\n// Make CSS version available to all templates\napp.locals.cssVersion = CSS_VERSION;\n\n// Configure i18n\ni18n.configure({\n  locales: ['tr', 'pl', 'ua'],\n  defaultLocale: 'tr',\n  directory: path.join(__dirname, '../locales'),\n  queryParameter: 'lang',\n  autoReload: true,\n  updateFiles: false,\n  api: {\n    '__': '__',\n    '__n': '__n'\n  }\n});\n\n// Production security middleware\nif (process.env.NODE_ENV === 'production') {\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://cdnjs.cloudflare.com\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"https://cdnjs.cloudflare.com\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\"],\n        fontSrc: [\"'self'\", \"https://cdnjs.cloudflare.com\"]\n      }\n    }\n  }));\n  app.use(compression());\n}\n\n// Middleware setup\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(methodOverride('_method'));\napp.use(i18n.init);\n\n// Set view engine\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, '../views'));\n\n// Static files with cache control\napp.use('/css', express.static(path.join(__dirname, '../public/css'), {\n  setHeaders: (res: Response, path: string) => {\n    if (path.endsWith('.css')) {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n    }\n  }\n}));\n\n// Other static files (images, js, etc.) with normal caching\napp.use(express.static(path.join(__dirname, '../public')));\n\n// Redirect SPA routes to EJS products page\napp.get('/app', (req: Request, res: Response) => {\n  res.redirect(301, '/products');\n});\n\napp.get('/app/*', (req: Request, res: Response) => {\n  res.redirect(301, '/products');\n});\n\n// Multer configuration for image uploads\nconst multerStorage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    const uploadPath = path.join(__dirname, '../public/uploads');\n    // Ensure upload directory exists\n    if (!fs.existsSync(uploadPath)) {\n      fs.mkdirSync(uploadPath, { recursive: true });\n    }\n    cb(null, uploadPath);\n  },\n  filename: function (req, file, cb) {\n    const uniqueSuffix = crypto.randomBytes(8).toString('hex');\n    const extension = path.extname(file.originalname);\n    cb(null, `img_${Date.now()}_${uniqueSuffix}${extension}`);\n  }\n});\n\nconst upload = multer({ \n  storage: multerStorage,\n  limits: {\n    fileSize: 5 * 1024 * 1024 // 5MB limit\n  },\n  fileFilter: function (req, file, cb) {\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Sadece JPEG, PNG ve WEBP formatlarƒ± desteklenir.'));\n    }\n  }\n});\n\n// Helper function to load products\nfunction loadProducts() {\n  try {\n    const productsData = fs.readFileSync(path.join(__dirname, '../data/products.json'), 'utf8');\n    return JSON.parse(productsData);\n  } catch (error) {\n    console.error('Error loading products:', error);\n    return [];\n  }\n}\n\n// Helper function to save products\nfunction saveProducts(products: any[]) {\n  try {\n    fs.writeFileSync(path.join(__dirname, '../data/products.json'), JSON.stringify(products, null, 2));\n    return true;\n  } catch (error) {\n    console.error('Error saving products:', error);\n    return false;\n  }\n}\n\n// Helper function to load attributes\nfunction loadAttributes() {\n  try {\n    const attributesData = fs.readFileSync(path.join(__dirname, '../data/attributes.json'), 'utf8');\n    return JSON.parse(attributesData);\n  } catch (error) {\n    console.error('Error loading attributes:', error);\n    return [];\n  }\n}\n\n// Helper function to save attributes\nfunction saveAttributes(attributes: any[]) {\n  try {\n    fs.writeFileSync(path.join(__dirname, '../data/attributes.json'), JSON.stringify(attributes, null, 2));\n    return true;\n  } catch (error) {\n    console.error('Error saving attributes:', error);\n    return false;\n  }\n}\n\n// Helper function to load label templates\nfunction loadLabelTemplates() {\n  try {\n    const templatesData = fs.readFileSync(path.join(__dirname, '../data/labels.json'), 'utf8');\n    return JSON.parse(templatesData);\n  } catch (error) {\n    console.error('Error loading label templates:', error);\n    return [];\n  }\n}\n\n// Helper function to save label templates\nfunction saveLabelTemplates(templates: any[]) {\n  try {\n    fs.writeFileSync(path.join(__dirname, '../data/labels.json'), JSON.stringify(templates, null, 2));\n    return true;\n  } catch (error) {\n    console.error('Error saving label templates:', error);\n    return false;\n  }\n}\n\n// Helper function to load warehouses\nfunction loadWarehouses() {\n  try {\n    const warehousesData = fs.readFileSync(path.join(__dirname, '../data/warehouses.json'), 'utf8');\n    return JSON.parse(warehousesData);\n  } catch (error) {\n    console.error('Error loading warehouses:', error);\n    return [];\n  }\n}\n\n// Helper function to save warehouses\nfunction saveWarehouses(warehouses: any[]) {\n  try {\n    fs.writeFileSync(path.join(__dirname, '../data/warehouses.json'), JSON.stringify(warehouses, null, 2));\n    return true;\n  } catch (error) {\n    console.error('Error saving warehouses:', error);\n    return false;\n  }\n}\n\n// Helper function to generate next warehouse ID\nfunction getNextWarehouseId(warehouses: any[]) {\n  if (warehouses.length === 0) return 1;\n  return Math.max(...warehouses.map(w => w.id)) + 1;\n}\n\n// Helper function to load barcodes\nfunction loadBarcodes() {\n  try {\n    const barcodesData = fs.readFileSync(path.join(__dirname, '../data/barcodes.json'), 'utf8');\n    return JSON.parse(barcodesData);\n  } catch (error) {\n    console.error('Error loading barcodes:', error);\n    return [];\n  }\n}\n\n// Helper function to load customer transactions\nfunction loadCustomerTransactions() {\n  try {\n    const transactionsData = fs.readFileSync(path.join(__dirname, '../data/customer-transactions.json'), 'utf8');\n    return JSON.parse(transactionsData);\n  } catch (error) {\n    console.error('Error loading customer transactions:', error);\n    return [];\n  }\n}\n\n// Enhanced helper function to calculate comprehensive statistics\nfunction calculateStats(products: any[]) {\n  const totalProducts = products.length;\n  const activeProducts = products.filter(p => p.status === 'Aktif').length;\n  const lowStock = products.filter(p => p.stock < 5).length;\n  const outOfStock = products.filter(p => p.stock === 0).length;\n  const totalValue = products.reduce((sum, p) => sum + (p.sellPrice * p.stock), 0).toFixed(2);\n  \n  // Calculate total stock by unit types\n  const pieceProducts = products.filter(p => p.unit === 'adet');\n  const meterProducts = products.filter(p => p.unit === 'metre');\n  const totalPieces = pieceProducts.reduce((sum, p) => sum + p.stock, 0);\n  const totalMeters = meterProducts.reduce((sum, p) => sum + p.stock, 0);\n  \n  return {\n    totalProducts,\n    activeProducts,\n    lowStock,\n    outOfStock,\n    totalValue,\n    totalPieces,\n    totalMeters,\n    pieceProducts: pieceProducts.length,\n    meterProducts: meterProducts.length\n  };\n}\n\n// Helper function to get warehouse statistics\nfunction getWarehouseStats(warehouses: any[]) {\n  const totalWarehouses = warehouses.length;\n  const activeWarehouses = warehouses.filter(w => w.status === 'Aktif').length;\n  const warehousesWithShelves = warehouses.filter(w => w.hasShelfSystem && w.shelves?.length > 0).length;\n  const totalShelves = warehouses.reduce((sum, w) => sum + (w.shelves?.length || 0), 0);\n  \n  return {\n    totalWarehouses,\n    activeWarehouses,\n    warehousesWithShelves,\n    totalShelves\n  };\n}\n\n// Helper function to get today's stock movements\nfunction getTodayMovements(stockMovements: any[]) {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const tomorrow = new Date(today);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  \n  const todayMovements = stockMovements.filter(m => {\n    const movementDate = new Date(m.date);\n    return movementDate >= today && movementDate < tomorrow;\n  });\n  \n  const todayEntries = todayMovements.filter(m => m.type === 'Giri≈ü');\n  const todayExits = todayMovements.filter(m => m.type === '√áƒ±kƒ±≈ü');\n  \n  return {\n    total: todayMovements.length,\n    entries: todayEntries.length,\n    exits: todayExits.length,\n    totalQuantity: todayMovements.reduce((sum, m) => sum + m.quantity, 0)\n  };\n}\n\n// Helper function to get monthly movement data for charts\nfunction getMonthlyMovements(stockMovements: any[]) {\n  const now = new Date();\n  const monthsData = [];\n  \n  for (let i = 5; i >= 0; i--) {\n    const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n    const nextMonth = new Date(now.getFullYear(), now.getMonth() - i + 1, 1);\n    \n    const monthMovements = stockMovements.filter(m => {\n      const movementDate = new Date(m.date);\n      return movementDate >= date && movementDate < nextMonth;\n    });\n    \n    const entries = monthMovements.filter(m => m.type === 'Giri≈ü');\n    const exits = monthMovements.filter(m => m.type === '√áƒ±kƒ±≈ü');\n    \n    monthsData.push({\n      month: date.toLocaleDateString('tr-TR', { month: 'short' }),\n      entries: entries.length,\n      exits: exits.length,\n      total: monthMovements.length\n    });\n  }\n  \n  return monthsData;\n}\n\n// Helper function to get category statistics\nfunction getCategoryStats(products: any[]) {\n  const categoryCount: { [key: string]: number } = {};\n  products.forEach(product => {\n    const category = product.category || 'Diƒüer';\n    categoryCount[category] = (categoryCount[category] || 0) + 1;\n  });\n  \n  return Object.entries(categoryCount).map(([category, count]) => ({\n    category,\n    count\n  }));\n}\n\n// Enhanced dashboard route with comprehensive data\napp.get('/', async (req: Request, res: Response) => {\n  try {\n    const products = loadProducts();\n    const warehouses = loadWarehouses();\n    const stockMovements = await storage.getStockMovements();\n    \n    const stats = calculateStats(products);\n    const warehouseStats = getWarehouseStats(warehouses);\n    const todayStats = getTodayMovements(stockMovements);\n    const monthlyMovements = getMonthlyMovements(stockMovements);\n    const categoryStats = getCategoryStats(products);\n    \n    // Render dashboard template to string first\n    res.render('dashboard', {\n      stats,\n      warehouseStats,\n      todayStats,\n      monthlyMovements,\n      categoryStats,\n      locale: req.getLocale(),\n      __: req.__\n    }, (err, html) => {\n      if (err) {\n        console.error('Error rendering dashboard template:', err);\n        return res.status(500).send('Internal Server Error');\n      }\n      \n      // Then render layout with the dashboard HTML as body\n      res.render('layout', {\n        title: req.__('dashboard.title'),\n        currentPage: 'dashboard',\n        locale: req.getLocale(),\n        body: html,\n        scripts: '', // Add script tag for Chart.js in layout\n        __: req.__\n      });\n    });\n  } catch (error) {\n    console.error('Dashboard error:', error);\n    res.status(500).send('Internal Server Error');\n  }\n});\n\n// Dashboard route (same as home)\napp.get('/dashboard', (req: Request, res: Response) => {\n  res.redirect('/');\n});\n\n// Helper function to calculate stock statistics\nfunction calculateStockStatistics(barcodes: any[], warehouses: any[]) {\n  // Calculate totals by unit type\n  const totalPieces = barcodes.filter(b => b.unit === 'adet').reduce((sum, b) => sum + (b.quantity || 0), 0);\n  const totalMeters = barcodes.filter(b => b.unit === 'metre').reduce((sum, b) => sum + (b.quantity || 0), 0);\n  const totalBarcodes = barcodes.length;\n  \n  // Calculate by warehouse\n  const warehouseStats = warehouses.map(warehouse => {\n    const warehouseBarcodes = barcodes.filter(b => b.warehouseId.toString() === warehouse.id.toString());\n    const pieces = warehouseBarcodes.filter(b => b.unit === 'adet').reduce((sum, b) => sum + (b.quantity || 0), 0);\n    const meters = warehouseBarcodes.filter(b => b.unit === 'metre').reduce((sum, b) => sum + (b.quantity || 0), 0);\n    \n    // Shelf statistics for warehouses with shelf system\n    const shelfStats = warehouse.hasShelfSystem && warehouse.shelves ? \n      warehouse.shelves.map((shelf: string) => {\n        const shelfBarcodes = warehouseBarcodes.filter(b => b.shelfId === shelf);\n        const shelfPieces = shelfBarcodes.filter(b => b.unit === 'adet').reduce((sum, b) => sum + (b.quantity || 0), 0);\n        const shelfMeters = shelfBarcodes.filter(b => b.unit === 'metre').reduce((sum, b) => sum + (b.quantity || 0), 0);\n        \n        return {\n          shelfId: shelf,\n          totalBarcodes: shelfBarcodes.length,\n          pieces: shelfPieces,\n          meters: shelfMeters,\n          totalStock: shelfPieces + shelfMeters\n        };\n      }).filter((shelf: any) => shelf.totalBarcodes > 0) : [];\n    \n    return {\n      warehouseId: warehouse.id,\n      warehouseName: warehouse.name,\n      status: warehouse.status,\n      totalBarcodes: warehouseBarcodes.length,\n      pieces: pieces,\n      meters: meters,\n      totalStock: pieces + meters,\n      hasShelfSystem: warehouse.hasShelfSystem,\n      shelfStats: shelfStats\n    };\n  }).filter(ws => ws.totalBarcodes > 0);\n  \n  // Get most used warehouses and shelves for quick filters\n  const quickFilters = {\n    warehouses: warehouseStats\n      .sort((a, b) => b.totalBarcodes - a.totalBarcodes)\n      .slice(0, 5),\n    shelves: warehouseStats\n      .flatMap(ws => ws.shelfStats)\n      .sort((a, b) => b.totalBarcodes - a.totalBarcodes)\n      .slice(0, 8)\n  };\n  \n  return {\n    totalStats: {\n      totalBarcodes,\n      totalPieces,\n      totalMeters,\n      uniqueProducts: new Set(barcodes.map(b => b.productId)).size,\n      activeWarehouses: warehouseStats.length\n    },\n    warehouseStats,\n    quickFilters\n  };\n}\n\n// Stock by warehouse route\napp.get('/stock/by-warehouse', async (req: Request, res: Response) => {\n  try {\n    // Load data from storage\n    const products = loadProducts();\n    const warehouses = loadWarehouses();\n    const barcodes = loadBarcodes();\n    \n    // Prepare data for template\n    const enrichedBarcodes = barcodes.map((barcode: any) => {\n      const product = products.find((p: any) => p.id === barcode.productId);\n      const warehouse = warehouses.find((w: any) => w.id.toString() === barcode.warehouseId);\n      \n      return {\n        ...barcode,\n        productName: product?.name || `Product ${barcode.productId}`,\n        productAttributes: product?.attributes || [],\n        warehouseName: warehouse?.name || `Warehouse ${barcode.warehouseId}`,\n        warehouseShelves: warehouse?.shelves || [],\n        hasShelfSystem: warehouse?.hasShelfSystem || false\n      };\n    });\n    \n    // Calculate comprehensive statistics\n    const stockStats = calculateStockStatistics(enrichedBarcodes, warehouses);\n    \n    // Render stock by warehouse template\n    res.render('stock_by_warehouse', {\n      title: req.__('stockByWarehouse.title'),\n      currentPage: 'stock_by_warehouse',\n      locale: req.getLocale(),\n      barcodes: enrichedBarcodes,\n      warehouses,\n      products,\n      stockStats,\n      __: req.__\n    }, (err, html) => {\n      if (err) {\n        console.error('Error rendering stock by warehouse template:', err);\n        return res.status(500).send('Internal Server Error');\n      }\n      \n      // Render layout with the stock by warehouse HTML as body\n      res.render('layout', {\n        title: req.__('stockByWarehouse.title'),\n        currentPage: 'stock_by_warehouse',\n        locale: req.getLocale(),\n        body: html,\n        __: req.__\n      });\n    });\n  } catch (error) {\n    console.error('Stock by warehouse error:', error);\n    res.status(500).send('Internal Server Error');\n  }\n});\n\n// Products route\napp.get('/products', (req: Request, res: Response) => {\n  const products = loadProducts();\n  const attributes = loadAttributes();\n  const stats = calculateStats(products);\n  \n  // Render products template to string first\n  res.render('products', { \n    products, \n    attributes,\n    stats, \n    locale: req.getLocale(), \n    __: req.__ \n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering products template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    // Then render layout with the products HTML as body\n    res.render('layout', {\n      title: req.__('products.title'),\n      currentPage: 'products',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// Toggle product status\napp.post('/products/toggle/:id', (req: Request, res: Response) => {\n  const productId = req.params.id;\n  const products = loadProducts();\n  \n  const productIndex = products.findIndex((p: any) => p.id === productId);\n  if (productIndex !== -1) {\n    products[productIndex].status = products[productIndex].status === 'Aktif' ? 'Pasif' : 'Aktif';\n    saveProducts(products);\n  }\n  \n  res.redirect(`/products?lang=${req.getLocale()}`);\n});\n\n// Product form routes\napp.get('/products/new', (req: Request, res: Response) => {\n  const attributes = loadAttributes();\n  \n  res.render('product_form', {\n    title: 'Yeni √úr√ºn Ekle',\n    currentPage: 'products',\n    locale: req.getLocale(),\n    product: null,\n    attributes,\n    __: req.__\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering product form template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    res.render('layout', {\n      title: 'Yeni √úr√ºn Ekle',\n      currentPage: 'products',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\napp.post('/products/new', upload.array('images[]', 10), (req: Request, res: Response) => {\n  const { name, description, buyPrice, sellPrice, buyCurrency, sellCurrency, stock, status, images, coverImage, unit } = req.body;\n  \n  // Handle uploaded files\n  const uploadedImages: string[] = [];\n  if (req.files && Array.isArray(req.files)) {\n    req.files.forEach((file: Express.Multer.File) => {\n      uploadedImages.push(`/uploads/${file.filename}`);\n    });\n  }\n  \n  // Basic validation\n  if (!name || !name.trim()) {\n    return res.redirect(`/products/new?lang=${req.getLocale()}&error=nameRequired`);\n  }\n  \n  // Validate required fields\n  if (!sellPrice || parseFloat(sellPrice) < 0) {\n    return res.redirect(`/products/new?lang=${req.getLocale()}&error=sellPriceRequired`);\n  }\n  \n  if (!sellCurrency || !['USD', 'PLN', 'UAH'].includes(sellCurrency)) {\n    return res.redirect(`/products/new?lang=${req.getLocale()}&error=sellCurrencyRequired`);\n  }\n  \n  if (!buyCurrency || !['USD', 'PLN', 'UAH'].includes(buyCurrency)) {\n    return res.redirect(`/products/new?lang=${req.getLocale()}&error=buyCurrencyRequired`);\n  }\n\n  // Validate unit field\n  if (!unit || !['metre', 'adet'].includes(unit)) {\n    return res.redirect(`/products/new?lang=${req.getLocale()}&error=unitRequired`);\n  }\n  \n  const products = loadProducts();\n  const attributes = loadAttributes();\n  const newId = (Math.max(...products.map((p: any) => parseInt(p.id)), 0) + 1).toString();\n  \n  // Process attributes from form\n  const productAttributes: any[] = [];\n  attributes.forEach((attr: any) => {\n    const value = req.body[`attribute_${attr.id}`];\n    if (value && value.trim()) {\n      productAttributes.push({\n        attributeId: attr.id,\n        name: attr.name,\n        value: value.trim()\n      });\n    }\n  });\n\n  // Validate attributes (at least 1 required)\n  if (productAttributes.length === 0) {\n    return res.redirect(`/products/new?lang=${req.getLocale()}&error=attributesRequired`);\n  }\n\n  // Duplicate check: same name + same attribute set\n  const normalizedName = name.trim().toLowerCase();\n  const sortedAttributes = productAttributes\n    .map(attr => `${attr.name}:${attr.value}`)\n    .sort()\n    .join('|');\n  \n  const existingProduct = products.find((p: any) => {\n    const existingNormalizedName = p.name.toLowerCase();\n    const existingAttributes = (p.attributes || [])\n      .map((attr: any) => `${attr.name}:${attr.value}`)\n      .sort()\n      .join('|');\n    \n    return existingNormalizedName === normalizedName && existingAttributes === sortedAttributes;\n  });\n\n  if (existingProduct) {\n    return res.redirect(`/products/new?lang=${req.getLocale()}&error=duplicateProduct&conflictId=${existingProduct.id}`);\n  }\n  \n  // Process images - combine uploaded files with existing images\n  let productImages: string[] = [];\n  let productCoverImage = '';\n  \n  // Add uploaded images first\n  productImages = [...uploadedImages];\n  \n  // Add existing images from hidden input (if any)\n  if (images) {\n    try {\n      const existingImages = typeof images === 'string' ? JSON.parse(images) : images;\n      if (Array.isArray(existingImages)) {\n        productImages = [...productImages, ...existingImages];\n      }\n    } catch (e) {\n      // Ignore invalid JSON\n    }\n  }\n  \n  // Limit to 10 images max\n  if (productImages.length > 10) {\n    productImages = productImages.slice(0, 10);\n  }\n  \n  // Set cover image\n  if (coverImage) {\n    productCoverImage = coverImage;\n  } else if (productImages.length > 0) {\n    productCoverImage = productImages[0];\n  }\n  \n  const newProduct = {\n    id: newId,\n    name: name.trim(),\n    description: description ? description.trim() : '',\n    buyPrice: parseFloat(buyPrice) || 0,\n    sellPrice: parseFloat(sellPrice) || 0,\n    buyCurrency: buyCurrency || 'USD',\n    sellCurrency: sellCurrency || 'USD',\n    stock: parseInt(stock) || 0,\n    unit: unit || 'adet',\n    status: status || 'Aktif',\n    coverImage: productCoverImage,\n    images: productImages,\n    attributes: productAttributes\n  };\n  \n  products.push(newProduct);\n  saveProducts(products);\n  \n  res.redirect(`/products?lang=${req.getLocale()}&success=added`);\n});\n\napp.get('/products/:id/edit', (req: Request, res: Response) => {\n  const productId = req.params.id;\n  const products = loadProducts();\n  const attributes = loadAttributes();\n  const product = products.find((p: any) => p.id === productId);\n  \n  if (!product) {\n    return res.redirect(`/products?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  res.render('product_form', {\n    title: '√úr√ºn D√ºzenle',\n    currentPage: 'products',\n    locale: req.getLocale(),\n    product,\n    attributes,\n    __: req.__\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering product form template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    res.render('layout', {\n      title: '√úr√ºn D√ºzenle',\n      currentPage: 'products',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\napp.post('/products/:id/update', upload.array('images[]', 10), (req: Request, res: Response) => {\n  const productId = req.params.id;\n  const { name, description, buyPrice, sellPrice, buyCurrency, sellCurrency, stock, status, images, coverImage, unit } = req.body;\n  \n  // Handle uploaded files\n  const uploadedImages: string[] = [];\n  if (req.files && Array.isArray(req.files)) {\n    req.files.forEach((file: Express.Multer.File) => {\n      uploadedImages.push(`/uploads/${file.filename}`);\n    });\n  }\n  \n  const products = loadProducts();\n  const attributes = loadAttributes();\n  const productIndex = products.findIndex((p: any) => p.id === productId);\n  \n  if (productIndex === -1) {\n    return res.redirect(`/products?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  // Basic validation\n  if (!name || !name.trim()) {\n    return res.redirect(`/products/${productId}/edit?lang=${req.getLocale()}&error=nameRequired`);\n  }\n  \n  // Validate required fields\n  if (!sellPrice || parseFloat(sellPrice) < 0) {\n    return res.redirect(`/products/${productId}/edit?lang=${req.getLocale()}&error=sellPriceRequired`);\n  }\n  \n  if (!sellCurrency || !['USD', 'PLN', 'UAH'].includes(sellCurrency)) {\n    return res.redirect(`/products/${productId}/edit?lang=${req.getLocale()}&error=sellCurrencyRequired`);\n  }\n  \n  if (!buyCurrency || !['USD', 'PLN', 'UAH'].includes(buyCurrency)) {\n    return res.redirect(`/products/${productId}/edit?lang=${req.getLocale()}&error=buyCurrencyRequired`);\n  }\n\n  // Validate unit field\n  if (!unit || !['metre', 'adet'].includes(unit)) {\n    return res.redirect(`/products/${productId}/edit?lang=${req.getLocale()}&error=unitRequired`);\n  }\n  \n  // Process attributes from form\n  const productAttributes: any[] = [];\n  attributes.forEach((attr: any) => {\n    const value = req.body[`attribute_${attr.id}`];\n    if (value && value.trim()) {\n      productAttributes.push({\n        attributeId: attr.id,\n        name: attr.name,\n        value: value.trim()\n      });\n    }\n  });\n\n  // Validate attributes (at least 1 required)\n  if (productAttributes.length === 0) {\n    return res.redirect(`/products/${productId}/edit?lang=${req.getLocale()}&error=attributesRequired`);\n  }\n\n  // Duplicate check: same name + same attribute set (excluding current product)\n  const normalizedName = name.trim().toLowerCase();\n  const sortedAttributes = productAttributes\n    .map(attr => `${attr.name}:${attr.value}`)\n    .sort()\n    .join('|');\n  \n  const existingProduct = products.find((p: any) => {\n    if (p.id === productId) return false; // Skip current product\n    \n    const existingNormalizedName = p.name.toLowerCase();\n    const existingAttributes = (p.attributes || [])\n      .map((attr: any) => `${attr.name}:${attr.value}`)\n      .sort()\n      .join('|');\n    \n    return existingNormalizedName === normalizedName && existingAttributes === sortedAttributes;\n  });\n\n  if (existingProduct) {\n    return res.redirect(`/products/${productId}/edit?lang=${req.getLocale()}&error=duplicateProduct&conflictId=${existingProduct.id}`);\n  }\n  \n  // Process images - append uploaded files to existing images\n  let productImages: string[] = [];\n  let productCoverImage = '';\n  \n  // Start with existing images from hidden input\n  if (images) {\n    try {\n      const existingImages = typeof images === 'string' ? JSON.parse(images) : images;\n      if (Array.isArray(existingImages)) {\n        productImages = [...existingImages];\n      }\n    } catch (e) {\n      // Ignore invalid JSON\n    }\n  }\n  \n  // Append new uploaded images\n  productImages = [...productImages, ...uploadedImages];\n  \n  // Limit to 10 images max\n  if (productImages.length > 10) {\n    productImages = productImages.slice(0, 10);\n  }\n  \n  // Set cover image\n  if (coverImage) {\n    productCoverImage = coverImage;\n  } else if (productImages.length > 0) {\n    productCoverImage = productImages[0];\n  }\n  \n  // Update the product\n  products[productIndex] = {\n    ...products[productIndex],\n    name: name.trim(),\n    description: description ? description.trim() : '',\n    buyPrice: parseFloat(buyPrice) || 0,\n    sellPrice: parseFloat(sellPrice) || 0,\n    buyCurrency: buyCurrency || products[productIndex].buyCurrency || 'USD',\n    sellCurrency: sellCurrency || products[productIndex].sellCurrency || 'USD',\n    stock: parseInt(stock) || 0,\n    unit: unit || 'adet',\n    status: status || 'Aktif',\n    coverImage: productCoverImage,\n    images: productImages,\n    attributes: productAttributes\n  };\n  \n  saveProducts(products);\n  \n  res.redirect(`/products?lang=${req.getLocale()}&success=updated`);\n});\n\n// Attributes management routes\napp.get('/settings/attributes', (req: Request, res: Response) => {\n  const attributes = loadAttributes();\n  \n  res.render('attributes', {\n    title: req.__('attributes.title'),\n    currentPage: 'settings',\n    locale: req.getLocale(),\n    attributes,\n    __: req.__\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering attributes template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    // Render layout with the attributes HTML as body\n    res.render('layout', {\n      title: req.__('attributes.title'),\n      currentPage: 'settings',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// Label Designer routes\napp.get('/settings/labels', (req: Request, res: Response) => {\n  try {\n    // Load templates from JSON file directly to match other patterns\n    const templates = loadLabelTemplates();\n    const warehouses = loadWarehouses();\n    \n    res.render('labelDesigner', {\n      title: req.__('labelDesigner.title'),\n      currentPage: 'labelDesigner',\n      locale: req.getLocale(),\n      templates,\n      warehouses,\n      query: req.query,\n      __: req.__\n    }, (err, html) => {\n      if (err) {\n        console.error('Error rendering labelDesigner template:', err);\n        return res.status(500).send('Internal Server Error');\n      }\n      \n      // Render layout with the labelDesigner HTML as body\n      res.render('layout', {\n        title: req.__('labelDesigner.title'),\n        currentPage: 'labelDesigner',\n        locale: req.getLocale(),\n        body: html,\n        __: req.__\n      });\n    });\n  } catch (error) {\n    console.error('Error loading label designer:', error);\n    res.status(500).send('Internal Server Error');\n  }\n});\n\napp.post('/settings/attributes/new', (req: Request, res: Response) => {\n  const { name, type, options } = req.body;\n  \n  // Validation\n  if (!name || name.trim() === '' || name.trim().length < 2) {\n    return res.redirect(`/settings/attributes?lang=${req.getLocale()}&error=nameRequired`);\n  }\n  \n  if (!type || !['TEXT', 'OPTIONS'].includes(type)) {\n    return res.redirect(`/settings/attributes?lang=${req.getLocale()}&error=typeRequired`);\n  }\n  \n  let processedOptions: string[] = [];\n  if (type === 'OPTIONS') {\n    if (!options || options.trim() === '') {\n      return res.redirect(`/settings/attributes?lang=${req.getLocale()}&error=optionsRequired`);\n    }\n    \n    // Process options - split by comma, trim, remove duplicates and empty values\n    processedOptions = options\n      .split(',')\n      .map((opt: string) => opt.trim())\n      .filter((opt: string) => opt.length > 0)\n      .filter((opt: string, index: number, arr: string[]) => \n        arr.findIndex(o => o.toLowerCase() === opt.toLowerCase()) === index\n      );\n      \n    if (processedOptions.length === 0) {\n      return res.redirect(`/settings/attributes?lang=${req.getLocale()}&error=optionsRequired`);\n    }\n  }\n  \n  const attributes = loadAttributes();\n  const newId = (Math.max(...attributes.map((a: any) => parseInt(a.id)), 0) + 1).toString();\n  \n  const newAttribute = {\n    id: newId,\n    name: name.trim(),\n    type,\n    options: processedOptions\n  };\n  \n  attributes.push(newAttribute);\n  saveAttributes(attributes);\n  \n  res.redirect(`/settings/attributes?lang=${req.getLocale()}&success=added`);\n});\n\n// Edit attribute page\napp.get('/settings/attributes/:id', (req: Request, res: Response) => {\n  const attributeId = req.params.id;\n  const attributes = loadAttributes();\n  const attribute = attributes.find((attr: any) => attr.id === attributeId);\n  \n  if (!attribute) {\n    return res.redirect(`/settings/attributes?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  res.render('attribute_edit', {\n    title: req.__('attributes.edit'),\n    currentPage: 'settings',\n    locale: req.getLocale(),\n    attribute,\n    __: req.__\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering attribute edit template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    res.render('layout', {\n      title: req.__('attributes.edit'),\n      currentPage: 'settings',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// Update attribute\napp.post('/settings/attributes/:id/update', (req: Request, res: Response) => {\n  const attributeId = req.params.id;\n  const { name, type, options } = req.body;\n  \n  // Validation\n  if (!name || name.trim() === '' || name.trim().length < 2) {\n    return res.redirect(`/settings/attributes/${attributeId}?lang=${req.getLocale()}&error=nameRequired`);\n  }\n  \n  if (!type || !['TEXT', 'OPTIONS'].includes(type)) {\n    return res.redirect(`/settings/attributes/${attributeId}?lang=${req.getLocale()}&error=typeRequired`);\n  }\n  \n  let processedOptions: string[] = [];\n  if (type === 'OPTIONS') {\n    if (!options || options.trim() === '') {\n      return res.redirect(`/settings/attributes/${attributeId}?lang=${req.getLocale()}&error=optionsRequired`);\n    }\n    \n    processedOptions = options\n      .split(',')\n      .map((opt: string) => opt.trim())\n      .filter((opt: string) => opt.length > 0)\n      .filter((opt: string, index: number, arr: string[]) => \n        arr.findIndex(o => o.toLowerCase() === opt.toLowerCase()) === index\n      );\n      \n    if (processedOptions.length === 0) {\n      return res.redirect(`/settings/attributes/${attributeId}?lang=${req.getLocale()}&error=optionsRequired`);\n    }\n  }\n  \n  const attributes = loadAttributes();\n  const attributeIndex = attributes.findIndex((attr: any) => attr.id === attributeId);\n  \n  if (attributeIndex === -1) {\n    return res.redirect(`/settings/attributes?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  // Update the attribute\n  attributes[attributeIndex] = {\n    id: attributeId,\n    name: name.trim(),\n    type,\n    options: processedOptions\n  };\n  \n  saveAttributes(attributes);\n  \n  res.redirect(`/settings/attributes?lang=${req.getLocale()}&success=updated`);\n});\n\n// Delete attribute\napp.post('/settings/attributes/delete/:id', (req: Request, res: Response) => {\n  const attributeId = req.params.id;\n  let attributes = loadAttributes();\n  \n  // Check if attribute is used in any products\n  const products = loadProducts();\n  const usedInProducts = products.some((product: any) => \n    product.attributes && product.attributes.some((attr: any) => attr.attributeId === attributeId)\n  );\n  \n  if (usedInProducts) {\n    // Remove attribute from all products that use it\n    products.forEach((product: any) => {\n      if (product.attributes) {\n        product.attributes = product.attributes.filter((attr: any) => attr.attributeId !== attributeId);\n      }\n    });\n    saveProducts(products);\n  }\n  \n  // Remove the attribute\n  attributes = attributes.filter((attr: any) => attr.id !== attributeId);\n  saveAttributes(attributes);\n  \n  const message = usedInProducts ? 'deletedWithProducts' : 'deleted';\n  res.redirect(`/settings/attributes?lang=${req.getLocale()}&success=${message}`);\n});\n\n// Image upload endpoint\napp.post('/api/upload-image', upload.single('image'), (req: Request, res: Response) => {\n  if (!req.file) {\n    return res.status(400).json({ error: 'Resim y√ºklenmedi.' });\n  }\n  \n  const imagePath = `uploads/${req.file.filename}`;\n  res.json({ \n    success: true, \n    imagePath: imagePath,\n    message: 'Resim ba≈üarƒ±yla y√ºklendi.'\n  });\n});\n\n// Multiple image upload endpoint\napp.post('/api/upload-images', upload.array('images', 10), (req: Request, res: Response) => {\n  if (!req.files || (req.files as Express.Multer.File[]).length === 0) {\n    return res.status(400).json({ error: 'Resim y√ºklenmedi.' });\n  }\n  \n  const files = req.files as Express.Multer.File[];\n  const imagePaths = files.map(file => `uploads/${file.filename}`);\n  \n  res.json({ \n    success: true, \n    imagePaths: imagePaths,\n    message: `${files.length} resim ba≈üarƒ±yla y√ºklendi.`\n  });\n});\n\n// Image delete endpoint - new specification route\napp.post('/products/:id/images/delete', (req: Request, res: Response) => {\n  const productId = req.params.id;\n  const { path: imagePath } = req.body;\n  \n  if (!imagePath) {\n    return res.status(400).json({ error: 'Resim yolu belirtilmedi.' });\n  }\n  \n  try {\n    const products = loadProducts();\n    const productIndex = products.findIndex((p: any) => p.id === productId);\n    \n    if (productIndex === -1) {\n      return res.status(404).json({ error: '√úr√ºn bulunamadƒ±.' });\n    }\n    \n    const product = products[productIndex];\n    \n    // Remove from product's images array\n    if (product.images) {\n      product.images = product.images.filter((img: string) => img !== imagePath);\n    }\n    \n    // If deleted image was cover, set new cover\n    if (product.coverImage === imagePath) {\n      product.coverImage = product.images && product.images.length > 0 ? product.images[0] : null;\n    }\n    \n    // Update the product\n    products[productIndex] = product;\n    saveProducts(products);\n    \n    // Delete physical file (ignore if file doesn't exist)\n    try {\n      const fullPath = path.join(__dirname, '../public', imagePath);\n      if (fs.existsSync(fullPath)) {\n        fs.unlinkSync(fullPath);\n      }\n    } catch (fileError) {\n      console.log('File delete warning (ignored):', fileError);\n    }\n    \n    res.json({ \n      success: true, \n      message: req.__('images.deleted')\n    });\n  } catch (error) {\n    console.error('Delete image error:', error);\n    res.status(500).json({ error: 'Resim silinemedi.' });\n  }\n});\n\n// Set cover image endpoint - new specification route\napp.post('/products/:id/images/cover', (req: Request, res: Response) => {\n  const productId = req.params.id;\n  const { path } = req.body;\n  \n  if (!path) {\n    return res.status(400).json({ error: req.__('images.typeError') });\n  }\n  \n  try {\n    const products = loadProducts();\n    const productIndex = products.findIndex((p: any) => p.id === productId);\n    \n    if (productIndex === -1) {\n      return res.status(404).json({ error: '√úr√ºn bulunamadƒ±.' });\n    }\n    \n    // Verify the path exists in the product's images\n    const product = products[productIndex];\n    if (!product.images || !product.images.includes(path)) {\n      return res.status(400).json({ error: 'Bu g√∂rsel √ºr√ºne ait deƒüil.' });\n    }\n    \n    products[productIndex].coverImage = path;\n    saveProducts(products);\n    \n    res.json({ \n      success: true, \n      message: req.__('images.coverUpdated')\n    });\n  } catch (error) {\n    console.error('Set cover error:', error);\n    res.status(500).json({ error: 'Kapak resmi ayarlanamadƒ±.' });\n  }\n});\n\n// Warehouse Management Routes\n\n// Warehouses listing page\napp.get('/warehouses', (req: Request, res: Response) => {\n  const warehouses = loadWarehouses();\n  \n  res.render('warehouses', { \n    warehouses, \n    locale: req.getLocale(), \n    __: req.__,\n    success: req.query.success,\n    error: req.query.error\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering warehouses template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    res.render('layout', {\n      title: req.__('warehouses.title'),\n      currentPage: 'warehouses',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// New warehouse form\napp.get('/warehouses/new', (req: Request, res: Response) => {\n  res.render('warehouse_form', {\n    warehouse: null,\n    isEdit: false,\n    locale: req.getLocale(),\n    __: req.__,\n    error: req.query.error\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering warehouse form template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    res.render('layout', {\n      title: req.__('warehouseForm.title.create'),\n      currentPage: 'warehouses',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// Create new warehouse\napp.post('/warehouses/new', (req: Request, res: Response) => {\n  const { name, status, hasShelfSystem } = req.body;\n  \n  // Basic validation\n  if (!name || !name.trim()) {\n    return res.redirect(`/warehouses/new?lang=${req.getLocale()}&error=nameRequired`);\n  }\n  \n  if (name.trim().length < 2) {\n    return res.redirect(`/warehouses/new?lang=${req.getLocale()}&error=nameMinLength`);\n  }\n  \n  if (name.trim().length > 50) {\n    return res.redirect(`/warehouses/new?lang=${req.getLocale()}&error=nameMaxLength`);\n  }\n  \n  const warehouses = loadWarehouses();\n  \n  // Check for duplicate names (case-insensitive)\n  const normalizedName = name.trim().toLowerCase();\n  const existingWarehouse = warehouses.find((w: any) => \n    w.name.toLowerCase() === normalizedName\n  );\n  \n  if (existingWarehouse) {\n    return res.redirect(`/warehouses/new?lang=${req.getLocale()}&error=nameExists`);\n  }\n  \n  // Create new warehouse\n  const newWarehouse = {\n    id: getNextWarehouseId(warehouses),\n    name: name.trim(),\n    status: status === 'Pasif' ? 'Pasif' : 'Aktif',\n    hasShelfSystem: hasShelfSystem === 'true',\n    shelves: [],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  \n  warehouses.push(newWarehouse);\n  saveWarehouses(warehouses);\n  \n  res.redirect(`/warehouses?lang=${req.getLocale()}&success=created`);\n});\n\n// Warehouse detail page\napp.get('/warehouses/:id', (req: Request, res: Response) => {\n  const warehouseId = parseInt(req.params.id);\n  const warehouses = loadWarehouses();\n  const warehouse = warehouses.find((w: any) => w.id === warehouseId);\n  \n  if (!warehouse) {\n    return res.redirect(`/warehouses?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  res.render('warehouse_detail', {\n    warehouse,\n    locale: req.getLocale(),\n    __: req.__,\n    success: req.query.success,\n    error: req.query.error\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering warehouse detail template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    res.render('layout', {\n      title: `${warehouse.name} - ${req.__('warehouseDetail.title')}`,\n      currentPage: 'warehouses',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// Edit warehouse form\napp.get('/warehouses/:id/edit', (req: Request, res: Response) => {\n  const warehouseId = parseInt(req.params.id);\n  const warehouses = loadWarehouses();\n  const warehouse = warehouses.find((w: any) => w.id === warehouseId);\n  \n  if (!warehouse) {\n    return res.redirect(`/warehouses?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  res.render('warehouse_form', {\n    warehouse,\n    isEdit: true,\n    locale: req.getLocale(),\n    __: req.__,\n    error: req.query.error\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering warehouse form template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    res.render('layout', {\n      title: req.__('warehouseForm.title.edit'),\n      currentPage: 'warehouses',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// Update warehouse\napp.post('/warehouses/:id/update', (req: Request, res: Response) => {\n  const warehouseId = parseInt(req.params.id);\n  const { name, status, hasShelfSystem } = req.body;\n  \n  // Basic validation\n  if (!name || !name.trim()) {\n    return res.redirect(`/warehouses/${warehouseId}/edit?lang=${req.getLocale()}&error=nameRequired`);\n  }\n  \n  if (name.trim().length < 2) {\n    return res.redirect(`/warehouses/${warehouseId}/edit?lang=${req.getLocale()}&error=nameMinLength`);\n  }\n  \n  if (name.trim().length > 50) {\n    return res.redirect(`/warehouses/${warehouseId}/edit?lang=${req.getLocale()}&error=nameMaxLength`);\n  }\n  \n  const warehouses = loadWarehouses();\n  const warehouseIndex = warehouses.findIndex((w: any) => w.id === warehouseId);\n  \n  if (warehouseIndex === -1) {\n    return res.redirect(`/warehouses?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  // Check for duplicate names (case-insensitive, excluding current warehouse)\n  const normalizedName = name.trim().toLowerCase();\n  const existingWarehouse = warehouses.find((w: any) => \n    w.id !== warehouseId && w.name.toLowerCase() === normalizedName\n  );\n  \n  if (existingWarehouse) {\n    return res.redirect(`/warehouses/${warehouseId}/edit?lang=${req.getLocale()}&error=nameExists`);\n  }\n  \n  // Update warehouse\n  const currentWarehouse = warehouses[warehouseIndex];\n  const willDisableShelfSystem = currentWarehouse.hasShelfSystem && hasShelfSystem !== 'true';\n  \n  warehouses[warehouseIndex] = {\n    ...currentWarehouse,\n    name: name.trim(),\n    status: status === 'Pasif' ? 'Pasif' : 'Aktif',\n    hasShelfSystem: hasShelfSystem === 'true',\n    shelves: willDisableShelfSystem ? [] : currentWarehouse.shelves, // Clear shelves if disabling shelf system\n    updatedAt: new Date().toISOString()\n  };\n  \n  saveWarehouses(warehouses);\n  \n  res.redirect(`/warehouses/${warehouseId}?lang=${req.getLocale()}&success=updated`);\n});\n\n// Toggle warehouse status\napp.post('/warehouses/:id/toggle', (req: Request, res: Response) => {\n  const warehouseId = parseInt(req.params.id);\n  const warehouses = loadWarehouses();\n  const warehouseIndex = warehouses.findIndex((w: any) => w.id === warehouseId);\n  \n  if (warehouseIndex === -1) {\n    return res.redirect(`/warehouses?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  const currentStatus = warehouses[warehouseIndex].status;\n  const newStatus = currentStatus === 'Aktif' ? 'Pasif' : 'Aktif';\n  const successMessage = newStatus === 'Aktif' ? 'activated' : 'deactivated';\n  \n  warehouses[warehouseIndex] = {\n    ...warehouses[warehouseIndex],\n    status: newStatus,\n    updatedAt: new Date().toISOString()\n  };\n  \n  saveWarehouses(warehouses);\n  \n  res.redirect(`/warehouses?lang=${req.getLocale()}&success=${successMessage}`);\n});\n\n// Add shelf to warehouse\napp.post('/warehouses/:id/shelves/new', (req: Request, res: Response) => {\n  const warehouseId = parseInt(req.params.id);\n  const { shelfName } = req.body;\n  \n  // Basic validation\n  if (!shelfName || !shelfName.trim()) {\n    return res.redirect(`/warehouses/${warehouseId}?lang=${req.getLocale()}&error=shelfNameRequired`);\n  }\n  \n  if (shelfName.trim().length < 1) {\n    return res.redirect(`/warehouses/${warehouseId}?lang=${req.getLocale()}&error=shelfNameMinLength`);\n  }\n  \n  if (shelfName.trim().length > 20) {\n    return res.redirect(`/warehouses/${warehouseId}?lang=${req.getLocale()}&error=shelfNameMaxLength`);\n  }\n  \n  const warehouses = loadWarehouses();\n  const warehouseIndex = warehouses.findIndex((w: any) => w.id === warehouseId);\n  \n  if (warehouseIndex === -1) {\n    return res.redirect(`/warehouses?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  const warehouse = warehouses[warehouseIndex];\n  \n  if (!warehouse.hasShelfSystem) {\n    return res.redirect(`/warehouses/${warehouseId}?lang=${req.getLocale()}&error=shelfSystemDisabled`);\n  }\n  \n  // Check for duplicate shelf names within the warehouse\n  const normalizedShelfName = shelfName.trim();\n  if (warehouse.shelves.includes(normalizedShelfName)) {\n    return res.redirect(`/warehouses/${warehouseId}?lang=${req.getLocale()}&error=shelfNameExists`);\n  }\n  \n  // Add shelf\n  warehouse.shelves.push(normalizedShelfName);\n  warehouse.updatedAt = new Date().toISOString();\n  \n  saveWarehouses(warehouses);\n  \n  res.redirect(`/warehouses/${warehouseId}?lang=${req.getLocale()}&success=shelfAdded`);\n});\n\n// Delete shelf from warehouse\napp.post('/warehouses/:id/shelves/del', (req: Request, res: Response) => {\n  const warehouseId = parseInt(req.params.id);\n  const { shelfName } = req.body;\n  \n  const warehouses = loadWarehouses();\n  const warehouseIndex = warehouses.findIndex((w: any) => w.id === warehouseId);\n  \n  if (warehouseIndex === -1) {\n    return res.redirect(`/warehouses?lang=${req.getLocale()}&error=notFound`);\n  }\n  \n  const warehouse = warehouses[warehouseIndex];\n  \n  // Remove shelf\n  const shelfIndex = warehouse.shelves.indexOf(shelfName);\n  if (shelfIndex > -1) {\n    warehouse.shelves.splice(shelfIndex, 1);\n    warehouse.updatedAt = new Date().toISOString();\n    saveWarehouses(warehouses);\n  }\n  \n  res.redirect(`/warehouses/${warehouseId}?lang=${req.getLocale()}&success=shelfDeleted`);\n});\n\n\n// Stock Entry Routes\napp.get('/stock', (req: Request, res: Response) => {\n  res.redirect('/stock/entry');\n});\n\napp.get('/stock/entry', (req: Request, res: Response) => {\n  const warehouses = loadWarehouses();\n  \n  res.render('stock_in', {\n    title: req.__('stockIn.title'),\n    currentPage: 'stock',\n    locale: req.getLocale(),\n    warehouses,\n    __: req.__\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering stock entry template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    res.render('layout', {\n      title: req.__('stockIn.title'),\n      currentPage: 'stock',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// Settings and Label Designer Routes\n\n// Label Designer page\napp.get('/settings/labels', (req: Request, res: Response) => {\n  const templates = loadLabelTemplates();\n  \n  res.render('labelDesigner', {\n    templates,\n    locale: req.getLocale(),\n    query: req.query,\n    __: req.__\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering label designer template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    res.render('layout', {\n      title: req.__('labelDesigner.title') || 'Etiket Tasarƒ±mcƒ±sƒ±',\n      currentPage: 'labelDesigner',\n      locale: req.getLocale(),\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// Settings landing page (redirect to label designer)\napp.get('/settings', (req: Request, res: Response) => {\n  res.redirect(`/settings/labels?lang=${req.getLocale()}`);\n});\n\n// Convenience redirect from /labels to /settings/labels\napp.get('/labels', (req: Request, res: Response) => {\n  res.redirect(`/settings/labels?lang=${req.getLocale()}`);\n});\n\n// Placeholder routes for other ERP modules\nconst placeholderRoutes = ['sales', 'accounting', 'reports', 'messages', 'users'];\n\nplaceholderRoutes.forEach(route => {\n  app.get(`/${route}`, (req: Request, res: Response) => {\n    const bodyContent = `\n        <div class=\"text-center py-5\">\n          <div class=\"stats-card\" style=\"max-width: 600px; margin: 0 auto;\">\n            <i class=\"fas fa-tools fs-1 text-muted mb-3\"></i>\n            <h2 class=\"text-muted mb-3\">${req.__(`menu.${route}`)} - Coming Soon</h2>\n            <p class=\"text-muted\">Bu mod√ºl ≈üu anda geli≈ütirilme a≈üamasƒ±ndadƒ±r. Yakƒ±nda kullanƒ±ma sunulacaktƒ±r.</p>\n            <a href=\"/\" class=\"btn btn-primary\">\n              <i class=\"fas fa-arrow-left me-2\"></i>\n              ${req.__('menu.dashboard')}\n            </a>\n          </div>\n        </div>\n      `;\n    \n    res.render('layout', {\n      title: req.__(`menu.${route}`),\n      currentPage: route,\n      locale: req.getLocale(),\n      body: bodyContent,\n      __: req.__\n    });\n  });\n});\n\n// Multer error handling middleware\napp.use((err: any, req: Request, res: Response, next: NextFunction) => {\n  if (err instanceof multer.MulterError) {\n    if (err.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({ error: req.__('images.sizeError') });\n    }\n    if (err.code === 'LIMIT_FILE_COUNT') {\n      return res.status(400).json({ error: req.__('images.limitExceeded') });\n    }\n    if (err.code === 'LIMIT_UNEXPECTED_FILE') {\n      return res.status(400).json({ error: req.__('images.typeError') });\n    }\n  }\n  \n  if (err.message && err.message.includes('formatlarƒ± desteklenir')) {\n    return res.status(400).json({ error: req.__('images.typeError') });\n  }\n  \n  next(err);\n});\n\n// General error handling middleware\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n  const status = err.status || err.statusCode || 500;\n  const message = err.message || \"Internal Server Error\";\n  console.error('Server Error:', err);\n  \n  const bodyContent = `\n      <div class=\"text-center py-5\">\n        <div class=\"stats-card\" style=\"max-width: 600px; margin: 0 auto;\">\n          <i class=\"fas fa-exclamation-triangle fs-1 text-danger mb-3\"></i>\n          <h2 class=\"text-danger mb-3\">Hata ${status}</h2>\n          <p class=\"text-muted\">${message}</p>\n          <a href=\"/\" class=\"btn btn-primary\">\n            <i class=\"fas fa-home me-2\"></i>\n            Ana Sayfaya D√∂n\n          </a>\n        </div>\n      </div>\n    `;\n  \n  res.status(status).render('layout', {\n    title: 'Hata',\n    currentPage: 'error',\n    locale: _req.getLocale() || 'tr',\n    body: bodyContent,\n    __: _req.__ || ((s: string) => s)\n  });\n});\n\n// Health check endpoint\napp.get('/healthz', (req: Request, res: Response) => {\n  res.status(200).json({ ok: true, status: 'healthy', timestamp: new Date().toISOString() });\n});\n\n// Register API routes\nregisterRoutes(app);\n\n// Serve React build files\napp.use('/assets', express.static(path.join(__dirname, '../dist/public/assets')));\n\n// Products Grid page (if React needed later)\napp.get('/products/grid', (req: Request, res: Response) => {\n  const indexPath = path.join(__dirname, '../dist/public/index.html');\n  if (fs.existsSync(indexPath)) {\n    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n    res.set('Pragma', 'no-cache');  \n    res.set('Expires', '0');\n    res.sendFile(indexPath);\n  } else {\n    res.status(404).send('React app not found');\n  }\n});\n\n// Stock Movements page route\napp.get('/stock/movements', async (req: Request, res: Response) => {\n  try {\n    const stockMovements = await storage.getStockMovements();\n    const warehouses = await storage.getWarehouses();\n    const products = await storage.getAllProducts();\n    \n    // Enrich stock movements with product and warehouse data\n    const enrichedMovements = stockMovements.map(movement => {\n      const product = products.find(p => p.id === movement.productId);\n      const warehouse = warehouses.find(w => w.id.toString() === movement.warehouseId);\n      \n      return {\n        ...movement,\n        productName: product?.name || `√úr√ºn ${movement.productId}`,\n        productAttributes: product?.attributes || [],\n        warehouseName: warehouse?.name || `Depo ${movement.warehouseId}`\n      };\n    });\n    \n    // Sort by date descending (newest first)\n    enrichedMovements.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    \n    res.render('stock_movements', {\n      title: req.__('stockMovements.title'),\n      currentPage: 'stock',\n      locale: req.getLocale(),\n      stockMovements: enrichedMovements,\n      warehouses: warehouses.filter(w => w.status === 'Aktif'),\n      query: req.query,\n      __: req.__\n    }, (err, html) => {\n      if (err) {\n        console.error('Error rendering stock_movements template:', err);\n        return res.status(500).send('Internal Server Error');\n      }\n      \n      res.render('layout', {\n        title: req.__('stockMovements.title'),\n        currentPage: 'stock',\n        locale: req.getLocale(),\n        body: html,\n        __: req.__\n      });\n    });\n  } catch (error) {\n    console.error('Error loading stock movements page:', error);\n    res.status(500).send('Internal Server Error');\n  }\n});\n\n// Import/Export page route (EJS template)\napp.get([\"/import-export\", \"/import-export-old\"], (req: Request, res: Response) => {\n  console.log(\"Import/Export route accessed - serving EJS template\");\n  \n  // Add cache busting headers\n  res.set({\n    'Cache-Control': 'no-cache, no-store, must-revalidate',\n    'Pragma': 'no-cache',\n    'Expires': '0'\n  });\n  \n  const timestamp = Date.now();\n  \n  res.render('import_export', {\n    title: req.__('importExport.title'),\n    currentPage: 'import-export',\n    locale: req.getLocale(),\n    jsVersion: timestamp,\n    cssVersion: timestamp,\n    __: req.__\n  }, (err, html) => {\n    if (err) {\n      console.error('Error rendering import_export template:', err);\n      return res.status(500).send('Internal Server Error');\n    }\n    \n    // Render layout with the import_export HTML as body\n    res.render('layout', {\n      title: req.__('importExport.title'),\n      currentPage: 'import-export',\n      locale: req.getLocale(),\n      cssVersion: timestamp,\n      jsVersion: timestamp,\n      body: html,\n      __: req.__\n    });\n  });\n});\n\n// Customer Management Routes\napp.get('/customers', async (req: Request, res: Response) => {\n  try {\n    const customers = await storage.getAllCustomers();\n    const customerTransactions = loadCustomerTransactions();\n    \n    // Render customers template to string first\n    res.render('customers', {\n      customers,\n      customerTransactions,\n      query: req.query,\n      locale: req.getLocale(),\n      __: req.__\n    }, (err, html) => {\n      if (err) {\n        console.error('Error rendering customers template:', err);\n        return res.status(500).send('Internal Server Error');\n      }\n      \n      // Then render layout with the customers HTML as body\n      res.render('layout', {\n        title: req.__('customers.title'),\n        currentPage: 'customers',\n        locale: req.getLocale(),\n        body: html,\n        __: req.__\n      });\n    });\n  } catch (error) {\n    console.error('Customers page error:', error);\n    res.status(500).send('Internal Server Error');\n  }\n});\n\napp.get('/customers/new', (req: Request, res: Response) => {\n  res.render('customer-form', {\n    customer: null,\n    locale: req.getLocale(),\n    __: req.__\n  });\n});\n\napp.get('/customers/:id/edit', async (req: Request, res: Response) => {\n  try {\n    const customer = await storage.getCustomer(req.params.id);\n    if (!customer) {\n      return res.redirect('/customers?error=notFound');\n    }\n    res.render('customer-form', {\n      customer,\n      locale: req.getLocale(),\n      __: req.__\n    });\n  } catch (error) {\n    console.error('Customer edit error:', error);\n    res.redirect('/customers?error=serverError');\n  }\n});\n\n// Customer API Routes\napp.get('/api/customers', async (req: Request, res: Response) => {\n  try {\n    const customers = await storage.getAllCustomers();\n    res.json({ success: true, customers });\n  } catch (error) {\n    console.error('Get customers API error:', error);\n    res.status(500).json({ success: false, message: 'Server error' });\n  }\n});\n\napp.post('/api/customers', async (req: Request, res: Response) => {\n  try {\n    const customer = await storage.createCustomer(req.body);\n    res.json({ success: true, customer });\n  } catch (error) {\n    console.error('Create customer API error:', error);\n    res.status(500).json({ success: false, message: 'Server error' });\n  }\n});\n\napp.put('/api/customers/:id', async (req: Request, res: Response) => {\n  try {\n    const customer = await storage.updateCustomer(req.params.id, req.body);\n    if (!customer) {\n      return res.status(404).json({ success: false, message: 'Customer not found' });\n    }\n    res.json({ success: true, customer });\n  } catch (error) {\n    console.error('Update customer API error:', error);\n    res.status(500).json({ success: false, message: 'Server error' });\n  }\n});\n\napp.delete('/api/customers/:id', async (req: Request, res: Response) => {\n  try {\n    const deleted = await storage.deleteCustomer(req.params.id);\n    if (!deleted) {\n      return res.status(404).json({ success: false, message: 'Customer not found' });\n    }\n    res.json({ success: true });\n  } catch (error) {\n    console.error('Delete customer API error:', error);\n    res.status(500).json({ success: false, message: 'Server error' });\n  }\n});\n\napp.post('/api/customers/payment', async (req: Request, res: Response) => {\n  try {\n    const { customerId, amount, description } = req.body;\n    \n    const transaction = await storage.createCustomerTransaction({\n      customerId,\n      type: 'payment',\n      amount: parseFloat(amount),\n      currency: 'USD',\n      description: description || 'Payment received',\n      date: new Date().toISOString()\n    });\n    \n    res.json({ success: true, transaction });\n  } catch (error) {\n    console.error('Payment API error:', error);\n    res.status(500).json({ success: false, message: 'Server error' });\n  }\n});\n\napp.get('/api/customers/stats', async (req: Request, res: Response) => {\n  try {\n    const stats = await storage.getCustomerStats();\n    res.json({ success: true, stats });\n  } catch (error) {\n    console.error('Customer stats API error:', error);\n    res.status(500).json({ success: false, message: 'Server error' });\n  }\n});\n\napp.get('/api/customers/:id/balance', async (req: Request, res: Response) => {\n  try {\n    const balance = await storage.getCustomerBalance(req.params.id);\n    res.json({ success: true, balance });\n  } catch (error) {\n    console.error('Customer balance API error:', error);\n    res.status(500).json({ success: false, message: 'Server error' });\n  }\n});\n\napp.get('/api/customers/:id/transactions', async (req: Request, res: Response) => {\n  try {\n    const transactions = await storage.getCustomerTransactionsByCustomerId(req.params.id);\n    res.json({ success: true, transactions });\n  } catch (error) {\n    console.error('Customer transactions API error:', error);\n    res.status(500).json({ success: false, message: 'Server error' });\n  }\n});\n\n\n// Routes are already imported at the top and registered\n\n// Start server\nconst port = parseInt(process.env.PORT || '5000', 10);\n\nfunction startServer(portToTry: number) {\n  const server = app.listen(portToTry, '0.0.0.0', () => {\n    const actualPort = (server.address() as any)?.port || portToTry;\n    console.log(`ERP Server running on port ${actualPort}`);\n    \n    // Log active routes\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Active routes:');\n      console.log('  GET  / (Dashboard)');\n      console.log('  GET  /products (Product Management)');\n      console.log('  GET  /customers (Customer Management)');\n      console.log('  GET  /customers/new (New Customer Form)');\n      console.log('  GET  /customers/:id/edit (Edit Customer Form)');\n      console.log('  GET  /stock/by-warehouse (Stock by Warehouse)');\n      console.log('  GET  /stock/movements (Stock Movements)');\n      console.log('  GET  /import-export (React Import/Export)');\n      console.log('  GET  /healthz (Health Check)');\n      console.log('  GET/POST/PUT/DELETE /api/customers/* (Customer API)');\n      console.log('  POST /api/* (Other API Endpoints)');\n    }\n  });\n\n  // Handle server errors\n  server.on('error', (err: any) => {\n    if (err.code === 'EADDRINUSE') {\n      console.error(`FATAL: Port ${portToTry} is required but already in use!`);\n      console.error('Please ensure port 5000 is available and try again.');\n      process.exit(1);\n    } else {\n      throw err;\n    }\n  });\n\n  return server;\n}\n\nconst server = startServer(port);\n\n// Graceful shutdown\nprocess.on('SIGINT', () => server.close(() => process.exit(0)));\nprocess.on('SIGTERM', () => server.close(() => process.exit(0)));\n","size_bytes":63004},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, stockMovementJsonSchema, insertCustomerJsonSchema, updateCustomerJsonSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { generateBarcodesForStockMovement, generateBarcodeImage, generateUniqueBarcode } from \"./barcodeUtils\";\nimport multer from \"multer\";\nimport XLSX from \"xlsx\";\nimport { parse } from \"csv-parse/sync\";\nimport { stringify } from \"csv-stringify/sync\";\nimport { getUncachableGitHubClient } from \"./github-client.js\";\nimport fs from \"fs\";\nimport path from \"path\";\n\n// Configure multer for file uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n});\n\nexport function registerRoutes(app: Express): void {\n  // Get all products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Get product names for autocomplete (MUST be before /:id route)\n  app.get(\"/api/products/names\", async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      const searchQuery = (req.query.q as string || \"\").toLowerCase().trim();\n      \n      let filteredProducts;\n      if (searchQuery) {\n        // Case-insensitive search by name\n        filteredProducts = products.filter(product => \n          product.name.toLowerCase().includes(searchQuery)\n        );\n      } else {\n        // No search query, return first 10 products\n        filteredProducts = products.slice(0, 10);\n      }\n      \n      // Return id, name, attributes, and prices for autocomplete\n      const result = filteredProducts.map(product => {\n        let parsedAttributes = [];\n        if (product.attributes && Array.isArray(product.attributes)) {\n          parsedAttributes = product.attributes.map(attr => {\n            if (typeof attr === 'string') {\n              try {\n                return JSON.parse(attr);\n              } catch (e) {\n                console.error('Failed to parse attribute:', attr, e);\n                return { name: 'Unknown', value: attr };\n              }\n            }\n            return attr;\n          }).filter(attr => attr && attr.name && attr.value);\n        }\n        \n        return {\n          id: product.id,\n          name: product.name,\n          attributes: parsedAttributes,\n          buyPrice: product.buyPrice,\n          sellPrice: product.sellPrice,\n          buyCurrency: product.buyCurrency,\n          sellCurrency: product.sellCurrency,\n          unit: product.unit,\n          status: product.status\n        };\n      });\n      \n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product names\" });\n    }\n  });\n\n  // Get popular products for autocomplete (MUST be before /:id route)\n  app.get(\"/api/products/popular\", async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      \n      // Get top 5 products by stock level (most popular/used)\n      const popularProducts = products\n        .filter(product => product.status === 'Aktif') // Only active products\n        .sort((a, b) => (b.stock || 0) - (a.stock || 0)) // Sort by stock descending\n        .slice(0, 5) // Take top 5\n        .map(product => {\n          let parsedAttributes = [];\n          if (product.attributes && Array.isArray(product.attributes)) {\n            parsedAttributes = product.attributes.map(attr => {\n              if (typeof attr === 'string') {\n                try {\n                  return JSON.parse(attr);\n                } catch (e) {\n                  console.error('Failed to parse attribute:', attr, e);\n                  return { name: 'Unknown', value: attr };\n                }\n              }\n              return attr;\n            }).filter(attr => attr && attr.name && attr.value);\n          }\n          \n          return {\n            name: product.name,\n            variants: [{\n              id: product.id,\n              attributes: parsedAttributes,\n              status: product.status,\n              sellPrice: product.sellPrice,\n              sellCurrency: product.sellCurrency\n            }],\n            firstId: product.id\n          };\n        });\n      \n      res.json(popularProducts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch popular products\" });\n    }\n  });\n\n  // Get single product (MUST be after specific routes like /names and /popular)\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Helper function to check for duplicate products\n  async function checkForDuplicateProduct(productData: any, excludeId?: string) {\n    const allProducts = await storage.getAllProducts();\n    \n    // Check for exact name matches\n    const nameMatches = allProducts.filter(p => \n      p.id !== excludeId && \n      p.name.toLowerCase() === productData.name.toLowerCase()\n    );\n    \n    if (nameMatches.length > 0) {\n      return {\n        isDuplicate: true,\n        type: 'name' as const,\n        existingProduct: nameMatches[0],\n        message: `Bu isimde bir √ºr√ºn zaten mevcut: ${nameMatches[0].name}`\n      };\n    }\n    \n    // Check for identical attributes if product has attributes\n    if (productData.attributes && Array.isArray(productData.attributes) && productData.attributes.length > 0) {\n      const attributeMatches = allProducts.filter(product => {\n        if (product.id === excludeId || !product.attributes || !Array.isArray(product.attributes) || product.attributes.length === 0) {\n          return false;\n        }\n        \n        // Compare attributes\n        if (product.attributes.length !== productData.attributes.length) {\n          return false;\n        }\n        \n        // Sort both arrays by attributeId for comparison - ensure they're objects\n        const sortedExisting = [...product.attributes]\n          .filter(attr => attr && typeof attr === 'object' && 'attributeId' in attr)\n          .sort((a: any, b: any) => a.attributeId.localeCompare(b.attributeId));\n        const sortedNew = [...productData.attributes]\n          .filter(attr => attr && typeof attr === 'object' && 'attributeId' in attr)\n          .sort((a: any, b: any) => a.attributeId.localeCompare(b.attributeId));\n        \n        if (sortedExisting.length !== sortedNew.length) {\n          return false;\n        }\n        \n        return sortedExisting.every((attr: any, index: number) => {\n          const newAttr = sortedNew[index];\n          return attr.attributeId === newAttr.attributeId && \n                 attr.value?.toLowerCase() === newAttr.value?.toLowerCase();\n        });\n      });\n      \n      if (attributeMatches.length > 0) {\n        const product = attributeMatches[0];\n        const attributesText = product.attributes && Array.isArray(product.attributes) \n          ? product.attributes\n              .filter(attr => attr && typeof attr === 'object' && 'name' in attr && 'value' in attr)\n              .map((attr: any) => `${attr.name}: ${attr.value}`)\n              .join(', ')\n          : '';\n        return {\n          isDuplicate: true,\n          type: 'attributes' as const,\n          existingProduct: product,\n          message: `Aynƒ± √∂zelliklere sahip bir √ºr√ºn zaten mevcut: ${product.name} (${attributesText})`\n        };\n      }\n    }\n    \n    return { isDuplicate: false, existingProduct: undefined };\n  }\n\n  // Create product\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      \n      // Check for duplicates\n      const duplicateCheck = await checkForDuplicateProduct(validatedData);\n      if (duplicateCheck.isDuplicate && duplicateCheck.existingProduct) {\n        return res.status(409).json({ \n          message: duplicateCheck.message,\n          type: 'duplicate_product',\n          duplicateType: duplicateCheck.type,\n          existingProduct: {\n            id: duplicateCheck.existingProduct.id,\n            name: duplicateCheck.existingProduct.name,\n            attributes: duplicateCheck.existingProduct.attributes || []\n          }\n        });\n      }\n      \n      const product = await storage.createProduct(validatedData);\n      res.status(201).json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  // Update product\n  app.patch(\"/api/products/:id\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.partial().parse(req.body);\n      \n      // Check for duplicates, excluding current product ID\n      if (validatedData.name || validatedData.attributes) {\n        // Get current product to merge data for duplicate checking\n        const currentProduct = await storage.getProduct(req.params.id);\n        if (!currentProduct) {\n          return res.status(404).json({ message: \"Product not found\" });\n        }\n        \n        // Merge current product data with updates for duplicate check\n        const updatedProductData = {\n          ...currentProduct,\n          ...validatedData\n        };\n        \n        const duplicateCheck = await checkForDuplicateProduct(updatedProductData, req.params.id);\n        if (duplicateCheck.isDuplicate && duplicateCheck.existingProduct) {\n          return res.status(409).json({ \n            message: duplicateCheck.message,\n            type: 'duplicate_product',\n            duplicateType: duplicateCheck.type,\n            existingProduct: {\n              id: duplicateCheck.existingProduct.id,\n              name: duplicateCheck.existingProduct.name,\n              attributes: duplicateCheck.existingProduct.attributes || []\n            }\n          });\n        }\n      }\n      \n      const product = await storage.updateProduct(req.params.id, validatedData);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  // Delete product\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Moved above to fix routing order\n\n  // Get product statistics\n  app.get(\"/api/products/stats/overview\", async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      const totalProducts = products.length;\n      const activeProducts = products.filter(p => p.status === \"Aktif\").length;\n      const lowStockProducts = products.filter(p => p.stock <= 5).length;\n      const totalValue = products.reduce((sum, p) => sum + parseFloat(p.sellPrice) * p.stock, 0);\n\n      res.json({\n        totalProducts,\n        activeProducts,\n        lowStockProducts,\n        totalValue: totalValue.toFixed(2)\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Get all warehouses\n  app.get(\"/api/warehouses\", async (req, res) => {\n    try {\n      const warehouses = await storage.getWarehouses();\n      res.json(warehouses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch warehouses\" });\n    }\n  });\n\n  // Stock Entry with proper Zod validation\n  app.post(\"/api/stock/entry\", async (req, res) => {\n    try {\n      // Define stock entry input schema with proper validation\n      const stockEntryInputSchema = z.object({\n        productId: z.string().min(1, \"Product ID is required\"),\n        warehouseId: z.string().min(1, \"Warehouse ID is required\"), \n        shelfId: z.string().optional().nullable(),\n        unit: z.enum([\"adet\", \"metre\"], { errorMap: () => ({ message: \"Unit must be 'adet' or 'metre'\" }) }),\n        quantity: z.number().positive().optional(),\n        meters: z.string().optional(),\n        note: z.string().optional()\n      });\n      \n      // Validate request body with Zod\n      const validationResult = stockEntryInputSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: validationResult.error.errors,\n          errorCode: \"VALIDATION_FAILED\"\n        });\n      }\n      \n      const { productId, warehouseId, shelfId, quantity, meters, unit, note } = validationResult.data;\n      \n      // Get and validate product exists\n      const product = await storage.getProduct(productId);\n      if (!product) {\n        return res.status(404).json({ \n          message: \"Product not found\",\n          errorCode: \"PRODUCT_NOT_FOUND\" \n        });\n      }\n      \n      // Get and validate warehouse exists\n      const warehouses = await storage.getWarehouses();\n      const warehouse = warehouses.find(w => w.id.toString() === warehouseId);\n      if (!warehouse) {\n        return res.status(404).json({ \n          message: \"Warehouse not found\",\n          errorCode: \"WAREHOUSE_NOT_FOUND\" \n        });\n      }\n      \n      // Strengthen shelf requirement validation\n      const hasShelfSystem = warehouse.hasShelfSystem === true;\n      const hasShelves = warehouse.shelves && Array.isArray(warehouse.shelves) && warehouse.shelves.length > 0;\n      const shelfRequired = hasShelfSystem && hasShelves;\n      \n      if (shelfRequired && (!shelfId || shelfId.trim() === '')) {\n        return res.status(400).json({ \n          message: \"Shelf selection is required for this warehouse\",\n          errorCode: \"SHELF_REQUIRED\" \n        });\n      }\n      \n      // Validate shelf exists if provided\n      if (shelfId && hasShelves) {\n        const shelfExists = warehouse.shelves.some((shelf: any) => \n          typeof shelf === 'string' ? shelf === shelfId : shelf.id?.toString() === shelfId\n        );\n        if (!shelfExists) {\n          return res.status(400).json({ \n            message: \"Selected shelf not found in warehouse\",\n            errorCode: \"SHELF_NOT_FOUND\" \n          });\n        }\n      }\n      \n      // Prepare quantities for barcode generation with safe JSON parsing\n      let quantities: number[] = [];\n      let totalQuantity = 0;\n      \n      if (unit === 'adet') {\n        const qty = quantity || 0;\n        if (qty <= 0) {\n          return res.status(400).json({ \n            message: \"Valid quantity is required for unit 'adet'\",\n            errorCode: \"INVALID_QUANTITY\" \n          });\n        }\n        // For 'adet' units, create individual barcodes with quantity 1 each\n        // If user enters 10, create 10 barcodes with quantities [1,1,1,1,1,1,1,1,1,1]\n        quantities = Array(qty).fill(1);\n        totalQuantity = qty;\n      } else if (unit === 'metre') {\n        let meterLengths: any[] = [];\n        \n        // Safe JSON parsing with try/catch\n        try {\n          meterLengths = JSON.parse(meters || '[]');\n        } catch (parseError) {\n          return res.status(400).json({ \n            message: \"Invalid meter lengths format. Must be valid JSON array\",\n            errorCode: \"INVALID_METERS_FORMAT\" \n          });\n        }\n        \n        if (!Array.isArray(meterLengths) || meterLengths.length === 0) {\n          return res.status(400).json({ \n            message: \"At least one meter length is required for unit 'metre'\",\n            errorCode: \"METERS_REQUIRED\" \n          });\n        }\n        \n        // Filter and validate meter lengths\n        quantities = meterLengths\n          .map(length => parseFloat(length))\n          .filter(num => !isNaN(num) && num > 0);\n        \n        if (quantities.length === 0) {\n          return res.status(400).json({ \n            message: \"Valid meter lengths are required. All values must be positive numbers\",\n            errorCode: \"INVALID_METER_LENGTHS\" \n          });\n        }\n        \n        totalQuantity = quantities.reduce((sum, qty) => sum + qty, 0);\n      } else {\n        return res.status(400).json({ \n          message: \"Invalid unit. Must be 'adet' or 'metre'\",\n          errorCode: \"INVALID_UNIT\" \n        });\n      }\n      \n      // Create stock movement\n      const stockMovement = await storage.createStockMovement({\n        productId,\n        warehouseId,\n        shelfId: shelfId || null,\n        type: \"Giri≈ü\",\n        quantity: totalQuantity,\n        unit: unit as 'adet' | 'metre',\n        note: note || undefined,\n        barcodes: [] // Will be filled after barcode generation\n      });\n      \n      // Generate barcodes\n      const barcodes = generateBarcodesForStockMovement(\n        productId,\n        stockMovement.id,\n        warehouseId,\n        shelfId || null,\n        unit as 'adet' | 'metre',\n        quantities\n      );\n      \n      // Update stock movement with barcode codes and persist to storage\n      const barcodeCodes = barcodes.map(b => b.code);\n      const updatedStockMovement = await storage.updateStockMovementBarcodes(stockMovement.id, barcodeCodes);\n      if (!updatedStockMovement) {\n        return res.status(500).json({ \n          message: \"Failed to update stock movement with barcodes\",\n          errorCode: \"BARCODE_UPDATE_FAILED\" \n        });\n      }\n      \n      // Update product stock using dedicated method for better consistency\n      const updatedProduct = await storage.updateProductStock(productId, totalQuantity);\n      if (!updatedProduct) {\n        return res.status(500).json({ \n          message: \"Failed to update product stock\",\n          errorCode: \"STOCK_UPDATE_FAILED\" \n        });\n      }\n      \n      res.status(201).json({\n        success: true,\n        stockMovement: updatedStockMovement,\n        barcodes,\n        message: \"Stock entry completed successfully\"\n      });\n      \n    } catch (error) {\n      console.error('Stock entry error:', error);\n      res.status(500).json({ message: \"Failed to create stock entry\" });\n    }\n  });\n  \n  // Get barcode image\n  app.get(\"/api/barcode/:code/image\", async (req, res) => {\n    try {\n      const { code } = req.params;\n      \n      if (!code || code.length !== 6) {\n        return res.status(400).json({ message: \"Invalid barcode code\" });\n      }\n      \n      const imageDataUrl = await generateBarcodeImage(code);\n      \n      // Extract base64 data and send as PNG\n      const base64Data = imageDataUrl.split(',')[1];\n      const buffer = Buffer.from(base64Data, 'base64');\n      \n      res.set({\n        'Content-Type': 'image/png',\n        'Content-Length': buffer.length,\n        'Cache-Control': 'public, max-age=86400' // Cache for 24 hours\n      });\n      \n      res.send(buffer);\n      \n    } catch (error) {\n      console.error('Barcode image generation error:', error);\n      res.status(500).json({ message: \"Failed to generate barcode image\" });\n    }\n  });\n  \n  // Generate unique barcode code (for testing/preview)\n  app.get(\"/api/barcode/generate\", async (req, res) => {\n    try {\n      const code = generateUniqueBarcode();\n      res.json({ code });\n    } catch (error) {\n      console.error('Barcode generation error:', error);\n      res.status(500).json({ message: \"Failed to generate barcode\" });\n    }\n  });\n\n  // Generate barcode labels using templates\n  app.post(\"/api/barcode/print-labels\", async (req, res) => {\n    try {\n      const { barcodes, templateId, productData } = req.body;\n      \n      // Validate input\n      if (!barcodes || !Array.isArray(barcodes) || barcodes.length === 0) {\n        return res.status(400).json({ message: \"Barcodes array is required\" });\n      }\n      \n      if (!templateId) {\n        return res.status(400).json({ message: \"Template ID is required\" });\n      }\n      \n      // Get template\n      const template = await storage.getLabelTemplate(templateId);\n      if (!template) {\n        return res.status(404).json({ message: \"Label template not found\" });\n      }\n      \n      // Generate labels for each barcode\n      const labels = [];\n      for (const barcodeCode of barcodes) {\n        try {\n          // Generate barcode image\n          const barcodeImage = await generateBarcodeImage(barcodeCode);\n          \n          // Create label data\n          const labelData = {\n            barcode: barcodeCode,\n            barcodeImage,\n            productName: productData?.name || 'Product',\n            features: productData?.attributes?.join(', ') || '',\n            price: productData?.sellPrice || '0.00',\n            date: new Date().toLocaleDateString('tr-TR'),\n            logo: '/img/placeholder-product.svg'\n          };\n          \n          labels.push({\n            barcodeCode,\n            template,\n            data: labelData\n          });\n        } catch (error) {\n          console.error(`Error generating label for barcode ${barcodeCode}:`, error);\n        }\n      }\n      \n      res.json({\n        success: true,\n        labels,\n        template,\n        count: labels.length\n      });\n      \n    } catch (error) {\n      console.error('Label generation error:', error);\n      res.status(500).json({ message: \"Failed to generate labels\" });\n    }\n  });\n  \n  // Get stock movements\n  app.get(\"/api/stock/movements\", async (req, res) => {\n    try {\n      const movements = await storage.getStockMovements();\n      res.json(movements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock movements\" });\n    }\n  });\n\n  // Get single stock movement\n  app.get(\"/api/stock/movements/:id\", async (req, res) => {\n    try {\n      const movements = await storage.getStockMovements();\n      const movement = movements.find(m => m.id === req.params.id);\n      \n      if (!movement) {\n        return res.status(404).json({ message: \"Stock movement not found\" });\n      }\n      \n      // Enrich with product and warehouse data\n      const products = await storage.getAllProducts();\n      const warehouses = await storage.getWarehouses();\n      \n      const product = products.find(p => p.id === movement.productId);\n      const warehouse = warehouses.find(w => w.id.toString() === movement.warehouseId);\n      \n      const enrichedMovement = {\n        ...movement,\n        productName: product?.name || `√úr√ºn ${movement.productId}`,\n        productAttributes: product?.attributes || [],\n        warehouseName: warehouse?.name || `Depo ${movement.warehouseId}`\n      };\n      \n      res.json(enrichedMovement);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock movement\" });\n    }\n  });\n\n  // Update stock movement\n  app.put(\"/api/stock/movements/:id\", async (req, res) => {\n    try {\n      const { quantity, note } = req.body;\n      const movementId = req.params.id;\n      \n      // Get current stock movements\n      const movements = await storage.getStockMovements();\n      const movementIndex = movements.findIndex(m => m.id === movementId);\n      \n      if (movementIndex === -1) {\n        return res.status(404).json({ message: \"Stock movement not found\" });\n      }\n      \n      const currentMovement = movements[movementIndex];\n      \n      // Validate quantity\n      if (quantity <= 0) {\n        return res.status(400).json({ message: \"Quantity must be positive\" });\n      }\n      \n      // Calculate quantity difference for stock update\n      const quantityDiff = quantity - currentMovement.quantity;\n      \n      // Update movement\n      movements[movementIndex] = {\n        ...currentMovement,\n        quantity,\n        note: note || currentMovement.note\n      };\n      \n      // Generate new barcodes based on new quantity\n      let newBarcodes: string[] = [];\n      if (currentMovement.unit === 'adet') {\n        // For pieces, generate individual barcodes\n        newBarcodes = Array(Math.floor(quantity)).fill(0).map(() => generateUniqueBarcode());\n      } else {\n        // For meters, generate one barcode per meter (rounded up)\n        const barcodeCount = Math.ceil(quantity);\n        newBarcodes = Array(barcodeCount).fill(0).map(() => generateUniqueBarcode());\n      }\n      \n      movements[movementIndex].barcodes = newBarcodes;\n      \n      // Save updated movements\n      await storage.saveStockMovements(movements);\n      \n      // Update product stock if quantity changed\n      if (quantityDiff !== 0) {\n        await storage.updateProductStock(currentMovement.productId, quantityDiff);\n      }\n      \n      res.json({\n        success: true,\n        movement: movements[movementIndex],\n        barcodes: newBarcodes,\n        message: \"Stock movement updated successfully\"\n      });\n      \n    } catch (error) {\n      console.error('Stock movement update error:', error);\n      res.status(500).json({ message: \"Failed to update stock movement\" });\n    }\n  });\n\n  // Delete stock movement\n  app.delete(\"/api/stock/movements/:id\", async (req, res) => {\n    try {\n      const movementId = req.params.id;\n      \n      // Get current stock movements\n      const movements = await storage.getStockMovements();\n      const movementIndex = movements.findIndex(m => m.id === movementId);\n      \n      if (movementIndex === -1) {\n        return res.status(404).json({ message: \"Stock movement not found\" });\n      }\n      \n      const movement = movements[movementIndex];\n      \n      // Remove movement from array\n      movements.splice(movementIndex, 1);\n      \n      // Save updated movements\n      await storage.saveStockMovements(movements);\n      \n      // Decrease product stock\n      await storage.updateProductStock(movement.productId, -movement.quantity);\n      \n      res.json({\n        success: true,\n        message: \"Stock movement deleted successfully\"\n      });\n      \n    } catch (error) {\n      console.error('Stock movement deletion error:', error);\n      res.status(500).json({ message: \"Failed to delete stock movement\" });\n    }\n  });\n\n  // Export stock movements\n  app.get(\"/api/stock/movements/export\", async (req, res) => {\n    try {\n      const format = req.query.format as string || 'csv';\n      const movements = await storage.getStockMovements();\n      const products = await storage.getAllProducts();\n      const warehouses = await storage.getWarehouses();\n      \n      // Enrich movements with product and warehouse data\n      const enrichedMovements = movements.map(movement => {\n        const product = products.find(p => p.id === movement.productId);\n        const warehouse = warehouses.find(w => w.id.toString() === movement.warehouseId);\n        \n        return {\n          Date: new Date(movement.date).toLocaleDateString('tr-TR'),\n          Time: new Date(movement.date).toLocaleTimeString('tr-TR'),\n          'Product Name': product?.name || `√úr√ºn ${movement.productId}`,\n          'Product Attributes': product?.attributes?.map((attr: any) => `${attr.name}: ${attr.value}`).join(', ') || '',\n          Warehouse: warehouse?.name || `Depo ${movement.warehouseId}`,\n          Shelf: movement.shelfId || '-',\n          Type: movement.type,\n          Quantity: movement.quantity,\n          Unit: movement.unit,\n          'Barcode Count': movement.barcodes?.length || 0,\n          Barcodes: movement.barcodes?.join(', ') || '',\n          Note: movement.note || ''\n        };\n      });\n      \n      if (format === 'csv') {\n        const csvData = stringify(enrichedMovements, { header: true });\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"stock-movements.csv\"');\n        res.send(csvData);\n      } else if (format === 'pdf') {\n        // For PDF export, you would need a PDF generation library\n        // For now, return JSON with a message\n        res.json({\n          message: \"PDF export not implemented yet\",\n          data: enrichedMovements\n        });\n      } else {\n        res.status(400).json({ message: \"Unsupported format. Use 'csv' or 'pdf'\" });\n      }\n      \n    } catch (error) {\n      console.error('Export error:', error);\n      res.status(500).json({ message: \"Failed to export stock movements\" });\n    }\n  });\n\n  // ========== LABEL DESIGNER ROUTES ==========\n  \n  // Get all label templates\n  app.get(\"/api/labels\", async (req, res) => {\n    try {\n      const templates = await storage.getAllLabelTemplates();\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch label templates\" });\n    }\n  });\n\n  // Get single label template\n  app.get(\"/api/labels/:id\", async (req, res) => {\n    try {\n      const template = await storage.getLabelTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ message: \"Label template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch label template\" });\n    }\n  });\n\n  // Create new label template\n  app.post(\"/api/labels\", async (req, res) => {\n    try {\n      const templateData = req.body;\n      \n      // Basic validation\n      if (!templateData.name || !templateData.width || !templateData.height) {\n        return res.status(400).json({ message: \"Name, width and height are required\" });\n      }\n      \n      const template = await storage.createLabelTemplate(templateData);\n      res.status(201).json(template);\n    } catch (error) {\n      console.error('Label template creation error:', error);\n      res.status(500).json({ message: \"Failed to create label template\" });\n    }\n  });\n\n  // Update label template\n  app.put(\"/api/labels/:id\", async (req, res) => {\n    try {\n      const templateData = req.body;\n      const updated = await storage.updateLabelTemplate(req.params.id, templateData);\n      \n      if (!updated) {\n        return res.status(404).json({ message: \"Label template not found\" });\n      }\n      \n      res.json(updated);\n    } catch (error) {\n      console.error('Label template update error:', error);\n      res.status(500).json({ message: \"Failed to update label template\" });\n    }\n  });\n\n  // Delete label template\n  app.delete(\"/api/labels/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteLabelTemplate(req.params.id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Label template not found\" });\n      }\n      \n      res.json({ message: \"Label template deleted successfully\" });\n    } catch (error) {\n      console.error('Label template deletion error:', error);\n      res.status(500).json({ message: \"Failed to delete label template\" });\n    }\n  });\n\n  // Set default label template\n  app.post(\"/api/labels/:id/default\", async (req, res) => {\n    try {\n      const result = await storage.setDefaultLabelTemplate(req.params.id);\n      \n      if (!result) {\n        return res.status(404).json({ message: \"Label template not found\" });\n      }\n      \n      res.json({ message: \"Default template set successfully\", template: result });\n    } catch (error) {\n      console.error('Set default template error:', error);\n      res.status(500).json({ message: \"Failed to set default template\" });\n    }\n  });\n\n  // Get default label template\n  app.get(\"/api/labels/default/template\", async (req, res) => {\n    try {\n      const template = await storage.getDefaultLabelTemplate();\n      \n      if (!template) {\n        return res.status(404).json({ message: \"No default template found\" });\n      }\n      \n      res.json(template);\n    } catch (error) {\n      console.error('Get default template error:', error);\n      res.status(500).json({ message: \"Failed to get default template\" });\n    }\n  });\n\n  // ===========================\n  // IMPORT/EXPORT ENDPOINTS\n  // ===========================\n  \n  // Helper function to validate product data\n  const validateProductRow = (row: any, rowIndex: number, allProducts: any[]) => {\n    const errors: string[] = [];\n    \n    // Convert and clean product name (handle numeric values from Excel)\n    const productName = row['√úr√ºn Adƒ±'] ? row['√úr√ºn Adƒ±'].toString().trim() : '';\n    \n    // Required fields\n    if (!productName) {\n      errors.push('√úr√ºn Adƒ± zorunludur');\n    }\n    \n    if (!row['Birim']?.toString().trim()) {\n      errors.push('Birim zorunludur');\n    } else if (!['adet', 'metre'].includes(row['Birim'].toString().toLowerCase())) {\n      errors.push('Birim sadece \"adet\" veya \"metre\" olabilir');\n    }\n    \n    // Currency validation\n    const validCurrencies = ['USD', 'PLN', 'UAH'];\n    if (row['Alƒ±≈ü Para Birimi'] && !validCurrencies.includes(row['Alƒ±≈ü Para Birimi'])) {\n      errors.push('Alƒ±≈ü Para Birimi sadece USD/PLN/UAH olabilir');\n    }\n    if (row['Satƒ±≈ü Para Birimi'] && !validCurrencies.includes(row['Satƒ±≈ü Para Birimi'])) {\n      errors.push('Satƒ±≈ü Para Birimi sadece USD/PLN/UAH olabilir');\n    }\n    \n    // Status validation\n    if (row['Durum'] && !['Aktif', 'Pasif'].includes(row['Durum'])) {\n      errors.push('Durum sadece \"Aktif\" veya \"Pasif\" olabilir');\n    }\n    \n    // Price validation\n    if (row['Alƒ±≈ü Fiyatƒ±'] && (isNaN(parseFloat(row['Alƒ±≈ü Fiyatƒ±'])) || parseFloat(row['Alƒ±≈ü Fiyatƒ±']) < 0)) {\n      errors.push('Alƒ±≈ü Fiyatƒ± ge√ßerli bir pozitif sayƒ± olmalƒ±dƒ±r');\n    }\n    if (row['Satƒ±≈ü Fiyatƒ±'] && (isNaN(parseFloat(row['Satƒ±≈ü Fiyatƒ±'])) || parseFloat(row['Satƒ±≈ü Fiyatƒ±']) < 0)) {\n      errors.push('Satƒ±≈ü Fiyatƒ± ge√ßerli bir pozitif sayƒ± olmalƒ±dƒ±r');\n    }\n    \n    // Duplicate check (same name + same attributes)\n    if (productName) {\n      const existingProduct = allProducts.find(p => \n        p.name.toLowerCase() === productName.toLowerCase()\n      );\n      if (existingProduct) {\n        errors.push('Bu √ºr√ºn adƒ± zaten mevcut');\n      }\n    }\n    \n    return {\n      row,\n      rowIndex: rowIndex + 2, // +2 for Excel row numbering (1-based + header)\n      isValid: errors.length === 0,\n      errors\n    };\n  };\n  \n  // Download intelligent template file with system options\n  app.get(\"/api/import-export/template\", async (req, res) => {\n    try {\n      const format = req.query.format as string || 'xlsx';\n      \n      // Get existing products to extract unique system options\n      const products = await storage.getAllProducts();\n      \n      // Extract unique values from existing products\n      const colorSet = new Set<string>();\n      const groundSet = new Set<string>();\n      const yarnSet = new Set<string>();\n      const currencySet = new Set<string>();\n      const unitSet = new Set<string>();\n      const statusSet = new Set<string>();\n      \n      products.forEach(p => {\n        if (p.attributes && Array.isArray(p.attributes)) {\n          p.attributes.forEach((attr: any) => {\n            if (attr.name === 'Renk' && attr.value) colorSet.add(attr.value);\n            if (attr.name === 'Zemin' && attr.value) groundSet.add(attr.value);\n            if (attr.name === 'ƒ∞PLƒ∞K' && attr.value) yarnSet.add(attr.value);\n          });\n        }\n        if (p.buyCurrency) currencySet.add(p.buyCurrency);\n        if (p.sellCurrency) currencySet.add(p.sellCurrency);\n        if (p.unit) unitSet.add(p.unit);\n        if (p.status) statusSet.add(p.status);\n      });\n      \n      const uniqueColors = Array.from(colorSet);\n      const uniqueGrounds = Array.from(groundSet);\n      const uniqueYarns = Array.from(yarnSet);\n      const uniqueCurrencies = Array.from(currencySet);\n      const uniqueUnits = Array.from(unitSet);\n      const uniqueStatuses = Array.from(statusSet);\n\n      const headers = [\n        '√úr√ºn Adƒ±',\n        'A√ßƒ±klama',\n        'Birim',\n        'Alƒ±≈ü Fiyatƒ±',\n        'Satƒ±≈ü Fiyatƒ±',\n        'Alƒ±≈ü Para Birimi',\n        'Satƒ±≈ü Para Birimi',\n        'Durum',\n        'Renk',\n        'Zemin', \n        'ƒ∞PLƒ∞K'\n      ];\n      \n      if (format === 'csv') {\n        let csvContent = headers.join(',') + '\\n';\n        csvContent += '# ========== Sƒ∞STEMDEKƒ∞ MEVCUT SE√áENEKLER ==========\\n';\n        csvContent += '# RENKLER: ' + uniqueColors.join(' | ') + '\\n';\n        csvContent += '# ZEMƒ∞N: ' + uniqueGrounds.join(' | ') + '\\n';\n        csvContent += '# ƒ∞PLƒ∞K: ' + uniqueYarns.join(' | ') + '\\n';\n        csvContent += '# PARA Bƒ∞Rƒ∞Mƒ∞: ' + uniqueCurrencies.join(' | ') + '\\n';\n        csvContent += '# Bƒ∞Rƒ∞M: ' + uniqueUnits.join(' | ') + '\\n';\n        csvContent += '# DURUM: ' + uniqueStatuses.join(' | ') + '\\n';\n        csvContent += '# ================================================\\n';\n        csvContent += '# √ñrnek satƒ±r (silebilirsiniz):\\n';\n        csvContent += `√ñrnek √úr√ºn,√úr√ºn a√ßƒ±klamasƒ±,${uniqueUnits[0] || 'adet'},10.50,15.75,${uniqueCurrencies[0] || 'USD'},${uniqueCurrencies[0] || 'USD'},${uniqueStatuses[0] || 'Aktif'},${uniqueColors[0] || ''},${uniqueGrounds[0] || ''},${uniqueYarns[0] || ''}\\n`;\n        \n        res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n        res.setHeader('Content-Disposition', `attachment; filename=\"akilli_urun_sablonu_${new Date().toISOString().split('T')[0]}.csv\"`);\n        res.send('\\uFEFF' + csvContent); // BOM for Turkish characters\n      } else {\n        // Excel format with multiple sheets\n        const workbook = XLSX.utils.book_new();\n        \n        // Main products sheet\n        const mainData = [\n          headers,\n          [\n            '√ñrnek √úr√ºn (bu satƒ±rƒ± silebilirsiniz)',\n            '√úr√ºn a√ßƒ±klamasƒ±',\n            uniqueUnits[0] || 'adet',\n            '10.50',\n            '15.75',\n            uniqueCurrencies[0] || 'USD',\n            uniqueCurrencies[0] || 'USD',\n            uniqueStatuses[0] || 'Aktif',\n            uniqueColors[0] || '',\n            uniqueGrounds[0] || '',\n            uniqueYarns[0] || ''\n          ]\n        ];\n        \n        const worksheet = XLSX.utils.aoa_to_sheet(mainData);\n        \n        // Style headers\n        const headerStyle = {\n          font: { bold: true, color: { rgb: \"FFFFFF\" } },\n          fill: { fgColor: { rgb: \"366092\" } },\n          alignment: { horizontal: \"center\" }\n        };\n        \n        // Apply header styles\n        for (let i = 0; i < headers.length; i++) {\n          const cellRef = XLSX.utils.encode_cell({ r: 0, c: i });\n          if (!worksheet[cellRef]) worksheet[cellRef] = {};\n          worksheet[cellRef].s = headerStyle;\n        }\n        \n        // Set column widths\n        worksheet['!cols'] = [\n          { width: 25 }, { width: 30 }, { width: 12 }, { width: 15 },\n          { width: 15 }, { width: 18 }, { width: 18 }, { width: 12 },\n          { width: 15 }, { width: 15 }, { width: 20 }\n        ];\n        \n        XLSX.utils.book_append_sheet(workbook, worksheet, '√úr√ºnler');\n        \n        // Options sheet with system data\n        const optionsData = [\n          ['Sƒ∞STEMDEKƒ∞ MEVCUT SE√áENEKLER'],\n          [''],\n          ['RENKLER:', ...uniqueColors],\n          ['ZEMƒ∞N:', ...uniqueGrounds],\n          ['ƒ∞PLƒ∞K:', ...uniqueYarns],\n          ['PARA Bƒ∞Rƒ∞Mƒ∞:', ...uniqueCurrencies],\n          ['Bƒ∞Rƒ∞M:', ...uniqueUnits],\n          ['DURUM:', ...uniqueStatuses],\n          [''],\n          ['NOT: Yeni deƒüerler eklemek istiyorsanƒ±z doƒürudan yazabilirsiniz.'],\n          ['Sistem otomatik olarak yeni se√ßenekleri tanƒ±yacaktƒ±r.']\n        ];\n        \n        const optionsSheet = XLSX.utils.aoa_to_sheet(optionsData);\n        XLSX.utils.book_append_sheet(workbook, optionsSheet, 'Sistem Se√ßenekleri');\n        \n        // Instructions sheet\n        const instructionsData = [\n          ['KULLANIM TALƒ∞MATLARI'],\n          [''],\n          ['1. \"√úr√ºnler\" sekmesinde √ºr√ºnlerinizi listeleyin'],\n          ['2. \"Sistem Se√ßenekleri\" sekmesinde mevcut se√ßenekleri g√∂r√ºn'],\n          ['3. Yeni renk/zemin/iplik deƒüerleri ekleyebilirsiniz'],\n          ['4. √ñrnek satƒ±rƒ± silebilirsiniz'],\n          ['5. Dosyayƒ± kaydedip import sayfasƒ±ndan y√ºkleyin'],\n          [''],\n          ['ZORUNLU ALANLAR:'],\n          ['- √úr√ºn Adƒ±'],\n          ['- Alƒ±≈ü Fiyatƒ±'],\n          ['- Satƒ±≈ü Fiyatƒ±'],\n          ['- Birim'],\n          [''],\n          ['ƒ∞STEƒûE BAƒûLI ALANLAR:'],\n          ['- A√ßƒ±klama'],\n          ['- Renk, Zemin, ƒ∞plik (√∂zellikler)'],\n          [''],\n          ['Dƒ∞KKAT: Aynƒ± isimde √ºr√ºn varsa g√ºncelleme modu se√ßilmelidir!']\n        ];\n        \n        const instructionsSheet = XLSX.utils.aoa_to_sheet(instructionsData);\n        XLSX.utils.book_append_sheet(workbook, instructionsSheet, 'Talimatlar');\n        \n        const buffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n        \n        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n        res.setHeader('Content-Disposition', `attachment; filename=\"akilli_urun_sablonu_${new Date().toISOString().split('T')[0]}.xlsx\"`);\n        res.send(buffer);\n      }\n    } catch (error) {\n      console.error('Smart template download error:', error);\n      res.status(500).json({ message: \"Akƒ±llƒ± ≈üablon indirme hatasƒ±\" });\n    }\n  });\n  \n  // Get system options for smart previews\n  app.get(\"/api/import-export/system-options\", async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      \n      // Extract unique values from existing products\n      const colorSet = new Set<string>();\n      const groundSet = new Set<string>();\n      const yarnSet = new Set<string>();\n      const currencySet = new Set<string>();\n      const unitSet = new Set<string>();\n      const statusSet = new Set<string>();\n      \n      products.forEach(p => {\n        if (p.attributes && Array.isArray(p.attributes)) {\n          p.attributes.forEach((attr: any) => {\n            if (attr.name === 'Renk' && attr.value) colorSet.add(attr.value);\n            if (attr.name === 'Zemin' && attr.value) groundSet.add(attr.value);\n            if (attr.name === 'ƒ∞PLƒ∞K' && attr.value) yarnSet.add(attr.value);\n          });\n        }\n        if (p.buyCurrency) currencySet.add(p.buyCurrency);\n        if (p.sellCurrency) currencySet.add(p.sellCurrency);\n        if (p.unit) unitSet.add(p.unit);\n        if (p.status) statusSet.add(p.status);\n      });\n      \n      const uniqueColors = Array.from(colorSet);\n      const uniqueGrounds = Array.from(groundSet);\n      const uniqueYarns = Array.from(yarnSet);\n      const uniqueCurrencies = Array.from(currencySet);\n      const uniqueUnits = Array.from(unitSet);\n      const uniqueStatuses = Array.from(statusSet);\n      \n      res.json({\n        colors: uniqueColors,\n        grounds: uniqueGrounds,\n        yarns: uniqueYarns,\n        currencies: uniqueCurrencies,\n        units: uniqueUnits,\n        statuses: uniqueStatuses\n      });\n    } catch (error) {\n      console.error('System options fetch error:', error);\n      res.status(500).json({ message: \"Sistem se√ßenekleri alƒ±namadƒ±\" });\n    }\n  });\n  \n  // Export products\n  app.post(\"/api/import-export/export\", async (req, res) => {\n    try {\n      const { format = 'xlsx', filteredProductIds } = req.body;\n      let products = await storage.getAllProducts();\n      \n      // Apply filter if provided\n      if (filteredProductIds && Array.isArray(filteredProductIds)) {\n        products = products.filter(p => filteredProductIds.includes(p.id));\n      }\n      \n      // Prepare export data\n      const exportData = [\n        [\n          '√úr√ºn Adƒ±',\n          'A√ßƒ±klama',\n          'Birim',\n          'Alƒ±≈ü Fiyatƒ±',\n          'Satƒ±≈ü Fiyatƒ±',\n          'Alƒ±≈ü Para Birimi',\n          'Satƒ±≈ü Para Birimi',\n          'Durum',\n          '√ñzellik1',\n          '√ñzellik2',\n          '√ñzellik3'\n        ]\n      ];\n      \n      products.forEach(product => {\n        const attributes = (product as any).attributes || [];\n        const attributesArray = Array.isArray(attributes) ? attributes : [];\n        exportData.push([\n          product.name,\n          product.description || '',\n          product.unit,\n          product.buyPrice?.toString() || '',\n          product.sellPrice?.toString() || '',\n          product.buyCurrency || '',\n          product.sellCurrency || '',\n          product.status || 'Aktif',\n          attributesArray[0]?.value || '',\n          attributesArray[1]?.value || '',\n          attributesArray[2]?.value || ''\n        ]);\n      });\n      \n      const timestamp = new Date().toISOString().split('T')[0];\n      \n      if (format === 'csv') {\n        const csv = stringify(exportData);\n        res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n        res.setHeader('Content-Disposition', `attachment; filename=\"urunler_${timestamp}.csv\"`);\n        res.send(csv);\n      } else {\n        const workbook = XLSX.utils.book_new();\n        const worksheet = XLSX.utils.aoa_to_sheet(exportData);\n        XLSX.utils.book_append_sheet(workbook, worksheet, '√úr√ºnler');\n        \n        const buffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n        \n        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n        res.setHeader('Content-Disposition', `attachment; filename=\"urunler_${timestamp}.xlsx\"`);\n        res.send(buffer);\n      }\n    } catch (error) {\n      console.error('Export error:', error);\n      res.status(500).json({ message: \"Dƒ±≈üarƒ± aktarma hatasƒ±\" });\n    }\n  });\n  \n  // Preview imported file\n  app.post(\"/api/import-export/preview\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"Dosya bulunamadƒ±\" });\n      }\n      \n      const allProducts = await storage.getAllProducts();\n      let data: any[] = [];\n      \n      // Parse file based on type\n      if (req.file.mimetype.includes('csv')) {\n        // Handle UTF-8 BOM and encoding properly\n        let csvText = req.file.buffer.toString('utf-8');\n        // Remove BOM if present\n        if (csvText.charCodeAt(0) === 0xFEFF) {\n          csvText = csvText.slice(1);\n        }\n        data = parse(csvText, { \n          columns: true, \n          skip_empty_lines: true,\n          trim: true,\n          bom: true // Handle BOM automatically\n        });\n      } else {\n        const workbook = XLSX.read(req.file.buffer);\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        data = XLSX.utils.sheet_to_json(worksheet);\n      }\n      \n      // Validate each row\n      const validatedRows = data.map((row, index) => \n        validateProductRow(row, index, allProducts)\n      );\n      \n      const validRows = validatedRows.filter(r => r.isValid);\n      const invalidRows = validatedRows.filter(r => !r.isValid);\n      \n      // Prepare Excel-like preview data for frontend\n      const previewData = data.map(row => ({\n        '√úr√ºn Adƒ±': row['√úr√ºn Adƒ±'] || '',\n        'A√ßƒ±klama': row['A√ßƒ±klama'] || '',\n        'Birim': row['Birim'] || '',\n        'Alƒ±≈ü Fiyatƒ±': row['Alƒ±≈ü Fiyatƒ±'] || '',\n        'Satƒ±≈ü Fiyatƒ±': row['Satƒ±≈ü Fiyatƒ±'] || '',\n        'Alƒ±≈ü Para Birimi': row['Alƒ±≈ü Para Birimi'] || '',\n        'Satƒ±≈ü Para Birimi': row['Satƒ±≈ü Para Birimi'] || '',\n        'Durum': row['Durum'] || '',\n        'Renk': row['Renk'] || '',\n        'Zemin': row['Zemin'] || '',\n        'ƒ∞PLƒ∞K': row['ƒ∞PLƒ∞K'] || ''\n      }));\n\n      res.json({\n        totalRows: data.length,\n        validRows: validRows.length,\n        invalidRows: invalidRows.length,\n        previewData: previewData, // Excel-like data for smart preview\n        preview: validatedRows.slice(0, 10), // Legacy preview for backward compatibility\n        errors: invalidRows.map(r => ({\n          rowNumber: r.rowIndex,\n          errors: r.errors,\n          data: r.row\n        }))\n      });\n      \n    } catch (error) {\n      console.error('Preview error:', error);\n      res.status(500).json({ message: \"Dosya i≈üleme hatasƒ±\" });\n    }\n  });\n  \n  // Import validated data\n  app.post(\"/api/import-export/import\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"Dosya bulunamadƒ±\" });\n      }\n      \n      const { updateExisting = false } = req.body;\n      const allProducts = await storage.getAllProducts();\n      let data: any[] = [];\n      \n      // Parse file  \n      if (req.file.mimetype.includes('csv')) {\n        // Handle UTF-8 BOM and encoding properly\n        let csvText = req.file.buffer.toString('utf-8');\n        // Remove BOM if present\n        if (csvText.charCodeAt(0) === 0xFEFF) {\n          csvText = csvText.slice(1);\n        }\n        data = parse(csvText, { \n          columns: true, \n          skip_empty_lines: true,\n          trim: true,\n          bom: true // Handle BOM automatically\n        });\n      } else {\n        const workbook = XLSX.read(req.file.buffer);\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        data = XLSX.utils.sheet_to_json(worksheet);\n      }\n      \n      // Validate and process only valid rows\n      const validatedRows = data.map((row, index) => \n        validateProductRow(row, index, allProducts)\n      );\n      \n      const validRows = validatedRows.filter(r => r.isValid);\n      const invalidRows = validatedRows.filter(r => !r.isValid);\n      \n      let successCount = 0;\n      \n      // Process valid rows\n      for (const validRow of validRows) {\n        try {\n          const row = validRow.row;\n          \n          // Find existing product for update\n          const productName = row['√úr√ºn Adƒ±'] ? row['√úr√ºn Adƒ±'].toString().trim() : '';\n          const existingProduct = productName ? allProducts.find(p => \n            p.name.toLowerCase() === productName.toLowerCase()\n          ) : null;\n          \n          if (existingProduct && updateExisting) {\n            // Update existing product\n            const updateData = {\n              description: row['A√ßƒ±klama']?.toString() || existingProduct.description,\n              buyPrice: row['Alƒ±≈ü Fiyatƒ±'] ? parseFloat(row['Alƒ±≈ü Fiyatƒ±']).toString() : existingProduct.buyPrice,\n              sellPrice: row['Satƒ±≈ü Fiyatƒ±'] ? parseFloat(row['Satƒ±≈ü Fiyatƒ±']).toString() : existingProduct.sellPrice,\n              buyCurrency: row['Alƒ±≈ü Para Birimi'] || existingProduct.buyCurrency,\n              sellCurrency: row['Satƒ±≈ü Para Birimi'] || existingProduct.sellCurrency,\n              status: row['Durum'] || existingProduct.status,\n              unit: row['Birim'] || existingProduct.unit\n            };\n            \n            await storage.updateProduct(existingProduct.id, updateData);\n            successCount++;\n          } else if (!existingProduct) {\n            // Create new product\n            const productData = {\n              name: productName,\n              description: row['A√ßƒ±klama'] ? row['A√ßƒ±klama'].toString().trim() : null,\n              unit: (row['Birim'] || 'adet').toString().toLowerCase(),\n              buyPrice: row['Alƒ±≈ü Fiyatƒ±'] ? parseFloat(row['Alƒ±≈ü Fiyatƒ±']).toString() : '0',\n              sellPrice: row['Satƒ±≈ü Fiyatƒ±'] ? parseFloat(row['Satƒ±≈ü Fiyatƒ±']).toString() : '0',\n              buyCurrency: row['Alƒ±≈ü Para Birimi'] || 'USD',\n              sellCurrency: row['Satƒ±≈ü Para Birimi'] || 'USD',\n              status: row['Durum'] || 'Aktif',\n              stock: 0,\n              attributes: [] // TODO: Handle attributes if needed\n            };\n            \n            await storage.createProduct(productData);\n            successCount++;\n          }\n        } catch (error) {\n          console.error('Product creation/update error:', error);\n        }\n      }\n      \n      res.json({\n        success: true,\n        totalProcessed: data.length,\n        successCount,\n        failedCount: invalidRows.length,\n        errors: invalidRows.map(r => ({\n          rowNumber: r.rowIndex,\n          errors: r.errors,\n          data: r.row\n        }))\n      });\n      \n    } catch (error) {\n      console.error('üö® IMPORT ERROR DETAILS:', error);\n      console.error('üö® Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n      console.error('üö® Error message:', error instanceof Error ? error.message : 'Unknown error');\n      res.status(500).json({ \n        message: \"ƒ∞√ßeri aktarma hatasƒ±\", \n        error: error instanceof Error ? error.message : 'Bilinmeyen hata',\n        details: process.env.NODE_ENV === 'development' ? error : undefined\n      });\n    }\n  });\n\n  // Import from grid data\n  app.post(\"/api/import-export/import-from-grid\", async (req, res) => {\n    try {\n      const { products = [], updateExisting = false } = req.body;\n      \n      if (!Array.isArray(products) || products.length === 0) {\n        return res.status(400).json({ message: \"Ge√ßerli √ºr√ºn listesi bulunamadƒ±\" });\n      }\n      \n      const allProducts = await storage.getAllProducts();\n      let successCount = 0;\n      const errors: Array<{ rowNumber: number; errors: string[]; data: any }> = [];\n      \n      // Process each product from grid\n      for (let index = 0; index < products.length; index++) {\n        try {\n          const product = products[index];\n          \n          // Validate required fields\n          if (!product.name || product.name.trim() === '') {\n            errors.push({\n              rowNumber: index + 1,\n              errors: ['√úr√ºn adƒ± gerekli'],\n              data: product\n            });\n            continue;\n          }\n          \n          // Find existing product for update\n          const existingProduct = allProducts.find(p => \n            p.name.toLowerCase() === product.name.toString().toLowerCase().trim()\n          );\n          \n          if (existingProduct && updateExisting) {\n            // Update existing product\n            const updateData = {\n              description: product.description || existingProduct.description,\n              buyPrice: product.buyPrice || existingProduct.buyPrice,\n              sellPrice: product.sellPrice || existingProduct.sellPrice,\n              buyCurrency: product.buyCurrency || existingProduct.buyCurrency,\n              sellCurrency: product.sellCurrency || existingProduct.sellCurrency,\n              status: product.status || existingProduct.status,\n              unit: product.unit || existingProduct.unit,\n              stock: product.stock !== undefined ? parseInt(product.stock) : existingProduct.stock\n            };\n            \n            await storage.updateProduct(existingProduct.id, updateData);\n            successCount++;\n          } else if (!existingProduct) {\n            // Create new product\n            const productData = {\n              name: product.name.toString().trim(),\n              description: product.description || null,\n              unit: product.unit || 'adet',\n              buyPrice: product.buyPrice || '0',\n              sellPrice: product.sellPrice || '0',\n              buyCurrency: product.buyCurrency || 'USD',\n              sellCurrency: product.sellCurrency || 'USD',\n              currency: product.currency || 'USD',\n              status: product.status || 'Aktif',\n              stock: product.stock ? parseInt(product.stock) : 0,\n              images: product.images || [],\n              attributes: product.attributes || []\n            };\n            \n            await storage.createProduct(productData);\n            successCount++;\n          } else {\n            // Product exists but update not allowed\n            errors.push({\n              rowNumber: index + 1,\n              errors: ['√úr√ºn zaten mevcut ve g√ºncelleme izni verilmemi≈ü'],\n              data: product\n            });\n          }\n        } catch (error) {\n          console.error('Grid product creation/update error:', error);\n          errors.push({\n            rowNumber: index + 1,\n            errors: ['ƒ∞≈ülem sƒ±rasƒ±nda hata olu≈ütu'],\n            data: products[index]\n          });\n        }\n      }\n      \n      res.json({\n        success: true,\n        totalProcessed: products.length,\n        successCount,\n        failedCount: errors.length,\n        errors\n      });\n      \n    } catch (error) {\n      console.error('Grid import error:', error);\n      res.status(500).json({ message: \"Grid i√ßeri aktarma hatasƒ±\" });\n    }\n  });\n\n  // GitHub backup endpoint\n  app.post(\"/api/github/backup\", async (req, res) => {\n    try {\n      console.log('üîÑ GitHub backup started...');\n      \n      const octokit = await getUncachableGitHubClient();\n      const repoName = 'erp-system';\n      \n      // Get user info\n      const { data: user } = await octokit.rest.users.getAuthenticated();\n      console.log(`üîó Connected to GitHub: ${user.login}`);\n      \n      // Otomatik dosya tarama fonksiyonu - Hƒ∞√áBƒ∞R DOSYA EKSƒ∞K KALMAZ!\n      function getAllProjectFiles(dir: string = '.', fileList: string[] = []): string[] {\n        const files = fs.readdirSync(dir);\n        \n        files.forEach(file => {\n          const filePath = path.join(dir, file);\n          const stat = fs.statSync(filePath);\n          \n          if (stat.isDirectory()) {\n            // Bu klas√∂rleri hari√ß tut (gereksiz/b√ºy√ºk)\n            if (![\n              'node_modules', \n              '.git', \n              'dist', \n              '.next', \n              '.vite',\n              'tmp',\n              '.cache'\n            ].includes(file)) {\n              getAllProjectFiles(filePath, fileList);\n            }\n          } else {\n            // Ge√ßici dosyalarƒ± hari√ß tut ama diƒüer hepsini al\n            if (!file.startsWith('.') || file === '.gitignore') {\n              // Binary dosyalar i√ßin size kontrol√º (5MB'dan b√ºy√ºk dosyalarƒ± atla)\n              if (stat.size <= 5 * 1024 * 1024) {\n                fileList.push(filePath.replace(/\\\\/g, '/')); // Windows uyumlu path\n              }\n            }\n          }\n        });\n        \n        return fileList;\n      }\n      \n      // T√úM PROJE DOSYALARINI OTOMATIK BUL\n      console.log('üîç Projede t√ºm dosyalar taranƒ±yor...');\n      const allFiles = getAllProjectFiles('.');\n      const filesToSync = allFiles.filter(file => {\n        // Sadece a≈üaƒüƒ±daki dosya t√ºrlerini hari√ß tut (GER√áEKTEn gereksiz olanlar)\n        const skipExtensions = ['.log', '.tmp', '.cache', '.lock'];\n        const skipFiles: string[] = []; // Hƒ∞√áBƒ∞R DOSYA HARƒ∞√á TUTMA!\n        \n        const ext = path.extname(file).toLowerCase();\n        const fileName = path.basename(file);\n        \n        return !skipExtensions.includes(ext) && !skipFiles.includes(fileName);\n      });\n      \n      console.log(`üìÅ Toplam ${filesToSync.length} dosya yedeklenecek:`);\n      \n      let syncCount = 0;\n      let errorCount = 0;\n      const errors: string[] = [];\n      \n      for (const filePath of filesToSync) {\n        try {\n          if (fs.existsSync(filePath)) {\n            const content = fs.readFileSync(filePath, 'utf8');\n            \n            // Check if file exists on GitHub\n            let sha = null;\n            try {\n              const { data: existingFile } = await octokit.rest.repos.getContent({\n                owner: user.login,\n                repo: repoName,\n                path: filePath,\n              });\n              sha = (existingFile as any).sha;\n            } catch (e) {\n              // File doesn't exist, will create new\n            }\n            \n            const requestData: any = {\n              owner: user.login,\n              repo: repoName,\n              path: filePath,\n              message: sha ? `Update ${filePath}` : `Add ${filePath}`,\n              content: Buffer.from(content).toString('base64'),\n            };\n            \n            if (sha) {\n              requestData.sha = sha;\n            }\n            \n            await octokit.rest.repos.createOrUpdateFileContents(requestData);\n            console.log(`‚úÖ ${filePath}`);\n            syncCount++;\n            \n          } else {\n            console.log(`‚ö†Ô∏è ${filePath} not found`);\n          }\n        } catch (error: any) {\n          console.log(`‚ùå ${filePath} - Error: ${error.message}`);\n          errors.push(`${filePath}: ${error.message}`);\n          errorCount++;\n        }\n        \n        // Rate limiting\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      console.log(`üìä Backup Summary:`);\n      console.log(`‚úÖ Success: ${syncCount} files`);\n      console.log(`‚ùå Errors: ${errorCount} files`);\n      console.log(`üöÄ GitHub Repository: https://github.com/${user.login}/${repoName}`);\n      \n      res.json({\n        success: true,\n        syncCount,\n        errorCount,\n        errors,\n        repository: `https://github.com/${user.login}/${repoName}`,\n        message: 'Backup completed successfully'\n      });\n      \n    } catch (error: any) {\n      console.error('‚ùå GitHub backup error:', error);\n      res.status(500).json({ \n        success: false,\n        message: error.message || 'GitHub backup failed' \n      });\n    }\n  });\n\n  // === CUSTOMER ROUTES MOVED TO server/index.ts ===\n\n  // Routes registered successfully\n}\n","size_bytes":61416},"server/storage.ts":{"content":"import { type Product, type InsertProduct, type StockMovement, type InsertStockMovement, type Barcode, type InsertBarcode, type LabelTemplate, type InsertLabelTemplate, type Customer, type InsertCustomer, type UpdateCustomer, type CustomerTransaction, type InsertCustomerTransaction, products, stockMovements, barcodes, customers, customerTransactions } from \"@shared/schema\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, desc, sql, max } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<any | undefined>;\n  getUserByUsername(username: string): Promise<any | undefined>;\n  createUser(user: any): Promise<any>;\n  \n  // Product methods\n  getAllProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  updateProductStock(id: string, stockChange: number): Promise<Product | undefined>;\n  \n  // Stock movement methods\n  createStockMovement(movement: Omit<InsertStockMovement, 'id'>): Promise<StockMovement>;\n  getStockMovements(): Promise<StockMovement[]>;\n  updateStockMovementBarcodes(id: string, barcodes: string[]): Promise<StockMovement | undefined>;\n  \n  // Warehouse methods\n  getWarehouses(): Promise<any[]>;\n  \n  // Label template methods\n  getAllLabelTemplates(): Promise<LabelTemplate[]>;\n  getLabelTemplate(id: string): Promise<LabelTemplate | undefined>;\n  createLabelTemplate(template: InsertLabelTemplate): Promise<LabelTemplate>;\n  updateLabelTemplate(id: string, template: Partial<InsertLabelTemplate>): Promise<LabelTemplate | undefined>;\n  deleteLabelTemplate(id: string): Promise<boolean>;\n  setDefaultLabelTemplate(id: string): Promise<LabelTemplate | undefined>;\n  getDefaultLabelTemplate(): Promise<LabelTemplate | undefined>;\n  \n  // Customer methods\n  getAllCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByCode(code: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: UpdateCustomer): Promise<Customer | undefined>;\n  deleteCustomer(id: string): Promise<boolean>;\n  generateCustomerCode(): Promise<string>;\n  getNextCustomerCode(): Promise<string>;\n  \n  // Barcode methods\n  createBarcode(barcode: InsertBarcode): Promise<Barcode>;\n  getBarcodesByStockMovement(stockMovementId: string): Promise<Barcode[]>;\n  \n  // Customer Transaction methods\n  createCustomerTransaction(transaction: InsertCustomerTransaction): Promise<CustomerTransaction>;\n  getCustomerTransactionsByCustomerId(customerId: string): Promise<CustomerTransaction[]>;\n  getCustomerBalance(customerId: string): Promise<{ balance: number; totalDebt: number; totalCredit: number }>;\n  getCustomerStats(): Promise<{\n    totalCustomers: number;\n    totalDebt: number;\n    totalCredit: number;\n    topBuyers: Array<{ customer: Customer; totalSales: number }>;\n  }>;\n}\n\n// Initialize database connection\nconst sql = neon(process.env.DATABASE_URL!);\nconst db = drizzle(sql);\n\nexport class DatabaseStorage implements IStorage {\n  private users: Map<string, any>;\n  private warehouses: any[];\n  private labelTemplates: LabelTemplate[];\n  private products: Product[];\n\n  constructor() {\n    this.users = new Map();\n    this.warehouses = [];\n    this.labelTemplates = [];\n    this.products = [];\n    this.initializeWarehouses();\n    this.initializeLabelTemplates();\n    this.initializeProducts();\n  }\n\n  // User methods (keeping simple in-memory for now since no DB schema defined)\n  async getUser(id: string): Promise<any | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<any | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: any): Promise<any> {\n    const id = randomUUID();\n    const user: any = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Product methods - using JSON file storage\n  private initializeProducts() {\n    try {\n      const __dirname = path.dirname(fileURLToPath(import.meta.url));\n      const jsonPath = path.join(__dirname, '../data/products.json');\n      const data = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));\n      this.products = data;\n      console.log(`‚úÖ Loaded ${data.length} products from JSON file`);\n    } catch (error) {\n      console.error('Failed to load products from JSON file:', error);\n      this.products = [];\n    }\n  }\n  \n  private saveProductsToFile(): boolean {\n    try {\n      const __dirname = path.dirname(fileURLToPath(import.meta.url));\n      const jsonPath = path.join(__dirname, '../data/products.json');\n      fs.writeFileSync(jsonPath, JSON.stringify(this.products, null, 2));\n      return true;\n    } catch (error) {\n      console.error('Failed to save products to file:', error);\n      return false;\n    }\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return this.products;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.find(product => product.id === id);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = `prod_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    const now = new Date().toISOString();\n    const newProduct: Product = {\n      ...insertProduct,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    \n    this.products.push(newProduct);\n    this.saveProductsToFile();\n    \n    return newProduct;\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const productIndex = this.products.findIndex(product => product.id === id);\n    if (productIndex === -1) return undefined;\n    \n    const updatedProduct: Product = {\n      ...this.products[productIndex],\n      ...updateData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.products[productIndex] = updatedProduct;\n    this.saveProductsToFile();\n    \n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const productIndex = this.products.findIndex(product => product.id === id);\n    if (productIndex === -1) return false;\n    \n    this.products.splice(productIndex, 1);\n    this.saveProductsToFile();\n    \n    return true;\n  }\n\n  async updateProductStock(id: string, stockChange: number): Promise<Product | undefined> {\n    const product = await this.getProduct(id);\n    if (!product) return undefined;\n    \n    const newStock = Math.max(0, product.stock + stockChange);\n    return await this.updateProduct(id, { stock: newStock });\n  }\n\n  // Stock movement methods - using database\n  async createStockMovement(movement: Omit<InsertStockMovement, 'id'>): Promise<StockMovement> {\n    try {\n      const result = await db.insert(stockMovements)\n        .values(movement)\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error creating stock movement:', error);\n      throw error;\n    }\n  }\n\n  async getStockMovements(): Promise<StockMovement[]> {\n    try {\n      const result = await db.select().from(stockMovements).orderBy(desc(stockMovements.date));\n      return result;\n    } catch (error) {\n      console.error('Error getting stock movements:', error);\n      return [];\n    }\n  }\n\n  async updateStockMovementBarcodes(id: string, barcodes: string[]): Promise<StockMovement | undefined> {\n    try {\n      const result = await db.update(stockMovements)\n        .set({ barcodes })\n        .where(eq(stockMovements.id, id))\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error updating stock movement barcodes:', error);\n      return undefined;\n    }\n  }\n\n  // Barcode methods - using database  \n  async createBarcode(barcode: InsertBarcode): Promise<Barcode> {\n    try {\n      const result = await db.insert(barcodes)\n        .values(barcode)\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error creating barcode:', error);\n      throw error;\n    }\n  }\n\n  async getBarcodesByStockMovement(stockMovementId: string): Promise<Barcode[]> {\n    try {\n      const result = await db.select().from(barcodes)\n        .where(eq(barcodes.stockMovementId, stockMovementId));\n      return result;\n    } catch (error) {\n      console.error('Error getting barcodes by stock movement:', error);\n      return [];\n    }\n  }\n\n  // Customer methods - using database\n  async getAllCustomers(): Promise<Customer[]> {\n    try {\n      const result = await db.select().from(customers);\n      return result;\n    } catch (error) {\n      console.error('Error getting all customers:', error);\n      return [];\n    }\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    try {\n      const result = await db.select().from(customers).where(eq(customers.id, id));\n      return result[0];\n    } catch (error) {\n      console.error('Error getting customer:', error);\n      return undefined;\n    }\n  }\n\n  async getCustomerByCode(code: string): Promise<Customer | undefined> {\n    try {\n      const result = await db.select().from(customers).where(eq(customers.code, code));\n      return result[0];\n    } catch (error) {\n      console.error('Error getting customer by code:', error);\n      return undefined;\n    }\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    try {\n      // If code is empty or auto-generate is requested, generate a new code\n      let customerCode = insertCustomer.code;\n      if (!customerCode || customerCode.trim() === '' || customerCode === 'AUTO_GENERATE') {\n        customerCode = await this.generateCustomerCode();\n      }\n      \n      const customerData = {\n        ...insertCustomer,\n        code: customerCode\n      };\n\n      const result = await db.insert(customers)\n        .values(customerData)\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error creating customer:', error);\n      throw error;\n    }\n  }\n\n  async updateCustomer(id: string, updateData: UpdateCustomer): Promise<Customer | undefined> {\n    try {\n      const result = await db.update(customers)\n        .set({\n          ...updateData,\n          updatedAt: new Date()\n        })\n        .where(eq(customers.id, id))\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error updating customer:', error);\n      return undefined;\n    }\n  }\n\n  async deleteCustomer(id: string): Promise<boolean> {\n    try {\n      const result = await db.delete(customers).where(eq(customers.id, id)).returning();\n      return result.length > 0;\n    } catch (error) {\n      console.error('Error deleting customer:', error);\n      return false;\n    }\n  }\n\n  async generateCustomerCode(): Promise<string> {\n    // Generate unique 6-digit customer code starting from 100000\n    let code: string;\n    let attempts = 0;\n    const maxAttempts = 1000;\n    \n    do {\n      const nextCode = await this.getNextCustomerCode();\n      code = nextCode;\n      attempts++;\n      \n      if (attempts > maxAttempts) {\n        throw new Error('Unable to generate unique customer code after maximum attempts');\n      }\n    } while (await this.getCustomerByCode(code));\n    \n    return code;\n  }\n\n  async getNextCustomerCode(): Promise<string> {\n    try {\n      // Find the highest existing numeric customer code and return the next one\n      const result = await db.select({ maxCode: max(customers.code) }).from(customers);\n      const maxCode = result[0]?.maxCode;\n      \n      let highestCode = 99999; // Start just below 100000\n      \n      if (maxCode && /^\\d{6}$/.test(maxCode)) {\n        const numericCode = parseInt(maxCode, 10);\n        if (!isNaN(numericCode) && numericCode > highestCode) {\n          highestCode = numericCode;\n        }\n      }\n      \n      // Return next code, ensuring it's always 6 digits and >= 100000\n      const nextCode = Math.max(highestCode + 1, 100000);\n      return nextCode.toString().padStart(6, '0');\n    } catch (error) {\n      console.error('Error getting next customer code:', error);\n      return '100000';\n    }\n  }\n\n  // Customer Transaction methods - using database\n  async createCustomerTransaction(insertTransaction: InsertCustomerTransaction): Promise<CustomerTransaction> {\n    try {\n      const result = await db.insert(customerTransactions)\n        .values(insertTransaction)\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error creating customer transaction:', error);\n      throw error;\n    }\n  }\n\n  async getCustomerTransactionsByCustomerId(customerId: string): Promise<CustomerTransaction[]> {\n    try {\n      const result = await db.select().from(customerTransactions)\n        .where(eq(customerTransactions.customerId, customerId))\n        .orderBy(desc(customerTransactions.date));\n      return result;\n    } catch (error) {\n      console.error('Error getting customer transactions:', error);\n      return [];\n    }\n  }\n\n  async getCustomerBalance(customerId: string): Promise<{ balance: number; totalDebt: number; totalCredit: number }> {\n    try {\n      const customer = await this.getCustomer(customerId);\n      if (!customer) {\n        return { balance: 0, totalDebt: 0, totalCredit: 0 };\n      }\n      \n      const transactions = await this.getCustomerTransactionsByCustomerId(customerId);\n      \n      // Convert decimal strings to numbers for calculation\n      const openingBalance = parseFloat(customer.openingBalance);\n      let totalDebt = openingBalance > 0 ? openingBalance : 0;\n      let totalCredit = openingBalance < 0 ? Math.abs(openingBalance) : 0;\n      \n      transactions.forEach(transaction => {\n        const amount = parseFloat(transaction.amount);\n        if (transaction.type === 'sale') {\n          totalDebt += amount;\n        } else if (transaction.type === 'payment') {\n          totalCredit += amount;\n        } else if (transaction.type === 'return') {\n          totalCredit += amount;\n        }\n      });\n      \n      const balance = totalDebt - totalCredit;\n      \n      return { balance, totalDebt, totalCredit };\n    } catch (error) {\n      console.error('Error getting customer balance:', error);\n      return { balance: 0, totalDebt: 0, totalCredit: 0 };\n    }\n  }\n\n  async getCustomerStats(): Promise<{\n    totalCustomers: number;\n    totalDebt: number;\n    totalCredit: number;\n    topBuyers: Array<{ customer: Customer; totalSales: number }>;\n  }> {\n    try {\n      const allCustomers = await this.getAllCustomers();\n      let totalSystemDebt = 0;\n      let totalSystemCredit = 0;\n      \n      const customerSales: Array<{ customer: Customer; totalSales: number }> = [];\n      \n      for (const customer of allCustomers) {\n        const balance = await this.getCustomerBalance(customer.id);\n        totalSystemDebt += balance.totalDebt;\n        totalSystemCredit += balance.totalCredit;\n        \n        // Calculate total sales for this customer\n        const transactions = await this.getCustomerTransactionsByCustomerId(customer.id);\n        const totalSales = transactions\n          .filter(t => t.type === 'sale')\n          .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n        \n        customerSales.push({ customer, totalSales });\n      }\n      \n      // Sort by total sales and get top 5\n      const topBuyers = customerSales\n        .sort((a, b) => b.totalSales - a.totalSales)\n        .slice(0, 5);\n      \n      return {\n        totalCustomers: allCustomers.length,\n        totalDebt: totalSystemDebt,\n        totalCredit: totalSystemCredit,\n        topBuyers\n      };\n    } catch (error) {\n      console.error('Error getting customer stats:', error);\n      return {\n        totalCustomers: 0,\n        totalDebt: 0,\n        totalCredit: 0,\n        topBuyers: []\n      };\n    }\n  }\n\n  // Warehouse methods - keeping JSON file based for now (no DB schema defined)\n  private initializeWarehouses() {\n    try {\n      const __dirname = path.dirname(fileURLToPath(import.meta.url));\n      const jsonPath = path.join(__dirname, '../data/warehouses.json');\n      const data = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));\n      this.warehouses = data;\n      console.log(`‚úÖ Loaded ${data.length} warehouses from JSON file`);\n    } catch (error) {\n      console.error('Failed to load warehouses from JSON file:', error);\n      this.warehouses = [];\n    }\n  }\n  \n  async getWarehouses(): Promise<any[]> {\n    return this.warehouses;\n  }\n\n  // Label template methods - keeping JSON file based for now (no DB schema defined)\n  private initializeLabelTemplates() {\n    try {\n      const __dirname = path.dirname(fileURLToPath(import.meta.url));\n      const jsonPath = path.join(__dirname, '../data/labels.json');\n      const data = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));\n      this.labelTemplates = data;\n      console.log(`‚úÖ Loaded ${data.length} label templates from JSON file`);\n    } catch (error) {\n      console.error('Failed to load label templates from JSON file:', error);\n      this.labelTemplates = [];\n    }\n  }\n  \n  private saveLabelTemplatesToFile(): boolean {\n    try {\n      const __dirname = path.dirname(fileURLToPath(import.meta.url));\n      const jsonPath = path.join(__dirname, '../data/labels.json');\n      fs.writeFileSync(jsonPath, JSON.stringify(this.labelTemplates, null, 2));\n      return true;\n    } catch (error) {\n      console.error('Failed to save label templates to file:', error);\n      return false;\n    }\n  }\n  \n  async getAllLabelTemplates(): Promise<LabelTemplate[]> {\n    return this.labelTemplates;\n  }\n  \n  async getLabelTemplate(id: string): Promise<LabelTemplate | undefined> {\n    return this.labelTemplates.find(template => template.id === id);\n  }\n  \n  async createLabelTemplate(template: InsertLabelTemplate): Promise<LabelTemplate> {\n    const id = `tpl_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    const now = new Date().toISOString();\n    const newTemplate: LabelTemplate = {\n      ...template,\n      id,\n      isDefault: template.isDefault || false,\n      createdAt: now,\n      updatedAt: now\n    };\n    \n    this.labelTemplates.push(newTemplate);\n    this.saveLabelTemplatesToFile();\n    \n    return newTemplate;\n  }\n  \n  async updateLabelTemplate(id: string, updateData: Partial<InsertLabelTemplate>): Promise<LabelTemplate | undefined> {\n    const templateIndex = this.labelTemplates.findIndex(template => template.id === id);\n    if (templateIndex === -1) return undefined;\n    \n    const updatedTemplate: LabelTemplate = {\n      ...this.labelTemplates[templateIndex],\n      ...updateData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.labelTemplates[templateIndex] = updatedTemplate;\n    this.saveLabelTemplatesToFile();\n    \n    return updatedTemplate;\n  }\n  \n  async deleteLabelTemplate(id: string): Promise<boolean> {\n    const templateIndex = this.labelTemplates.findIndex(template => template.id === id);\n    if (templateIndex === -1) return false;\n    \n    // Don't allow deletion of default template\n    if (this.labelTemplates[templateIndex].isDefault) {\n      return false;\n    }\n    \n    this.labelTemplates.splice(templateIndex, 1);\n    this.saveLabelTemplatesToFile();\n    \n    return true;\n  }\n  \n  async setDefaultLabelTemplate(id: string): Promise<LabelTemplate | undefined> {\n    const template = this.labelTemplates.find(template => template.id === id);\n    if (!template) return undefined;\n    \n    // Remove default flag from all templates\n    this.labelTemplates.forEach(template => {\n      template.isDefault = false;\n    });\n    \n    // Set the specified template as default\n    template.isDefault = true;\n    template.updatedAt = new Date().toISOString();\n    \n    this.saveLabelTemplatesToFile();\n    \n    return template;\n  }\n  \n  async getDefaultLabelTemplate(): Promise<LabelTemplate | undefined> {\n    return this.labelTemplates.find(template => template.isDefault === true);\n  }\n}\n\n// Create and export the storage instance\nexport const storage = new DatabaseStorage();","size_bytes":20339},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  buyPrice: decimal(\"buy_price\", { precision: 10, scale: 2 }).notNull(),\n  sellPrice: decimal(\"sell_price\", { precision: 10, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).notNull().default(\"USD\"),\n  buyCurrency: varchar(\"buy_currency\", { length: 3 }).notNull().default(\"USD\"),\n  sellCurrency: varchar(\"sell_currency\", { length: 3 }).notNull().default(\"USD\"),\n  stock: integer(\"stock\").notNull().default(0),\n  unit: varchar(\"unit\", { length: 10 }).notNull().default(\"adet\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"Aktif\"),\n  description: text(\"description\"),\n  coverImage: text(\"cover_image\"),\n  images: text(\"images\").array().default([]),\n  attributes: text(\"attributes\").array().default([]),\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n});\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\n// Stock Movements Table\nexport const stockMovements = pgTable(\"stock_movements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull(),\n  warehouseId: varchar(\"warehouse_id\").notNull(),\n  shelfId: varchar(\"shelf_id\"),\n  type: varchar(\"type\", { length: 20 }).notNull().default(\"Giri≈ü\"), // \"Giri≈ü\" or \"√áƒ±kƒ±≈ü\"\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  unit: varchar(\"unit\", { length: 10 }).notNull().default(\"adet\"), // \"adet\" or \"metre\"\n  date: timestamp(\"date\").notNull().default(sql`now()`),\n  note: text(\"note\"),\n  barcodes: text(\"barcodes\").array().default([]),\n});\n\nexport const insertStockMovementSchema = createInsertSchema(stockMovements).omit({\n  id: true,\n  date: true,\n});\n\nexport type InsertStockMovement = z.infer<typeof insertStockMovementSchema>;\nexport type StockMovement = typeof stockMovements.$inferSelect;\n\n// Barcodes Table\nexport const barcodes = pgTable(\"barcodes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 20 }).notNull().unique(),\n  productId: varchar(\"product_id\").notNull(),\n  stockMovementId: varchar(\"stock_movement_id\").notNull(),\n  warehouseId: varchar(\"warehouse_id\").notNull(),\n  shelfId: varchar(\"shelf_id\"),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull().default(\"1\"),\n  unit: varchar(\"unit\", { length: 10 }).notNull().default(\"adet\"),\n  isUsed: integer(\"is_used\").notNull().default(0), // 0 = not used, 1 = used\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertBarcodeSchema = createInsertSchema(barcodes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertBarcode = z.infer<typeof insertBarcodeSchema>;\nexport type Barcode = typeof barcodes.$inferSelect;\n\n// JSON Schema Types for File-based Storage\nexport const stockMovementJsonSchema = z.object({\n  id: z.string(),\n  productId: z.string(),\n  warehouseId: z.string(),\n  shelfId: z.string().nullable(),\n  type: z.enum([\"Giri≈ü\", \"√áƒ±kƒ±≈ü\"]).default(\"Giri≈ü\"),\n  quantity: z.number().positive(),\n  unit: z.enum([\"adet\", \"metre\"]).default(\"adet\"),\n  date: z.string(),\n  note: z.string().optional(),\n  barcodes: z.array(z.string()).default([]),\n});\n\nexport const barcodeJsonSchema = z.object({\n  id: z.string(),\n  code: z.string().length(6),\n  productId: z.string(),\n  stockMovementId: z.string(),\n  warehouseId: z.string(),\n  shelfId: z.string().nullable(),\n  quantity: z.number().positive().default(1),\n  unit: z.enum([\"adet\", \"metre\"]).default(\"adet\"),\n  isUsed: z.boolean().default(false),\n  createdAt: z.string(),\n});\n\nexport type StockMovementJson = z.infer<typeof stockMovementJsonSchema>;\nexport type BarcodeJson = z.infer<typeof barcodeJsonSchema>;\n\n// Label Template Element Schemas\nconst labelElementBaseSchema = z.object({\n  x: z.number().min(0),\n  y: z.number().min(0),\n  width: z.number().min(1),\n  height: z.number().min(1)\n});\n\nconst labelTextElementSchema = labelElementBaseSchema.extend({\n  type: z.literal(\"text\"),\n  field: z.enum([\"productName\", \"features\", \"price\", \"date\"]),\n  fontSize: z.number().min(4).max(72).default(12),\n  bold: z.boolean().default(false),\n  italic: z.boolean().default(false),\n  align: z.enum([\"left\", \"center\", \"right\"]).default(\"left\")\n});\n\nconst labelBarcodeElementSchema = labelElementBaseSchema.extend({\n  type: z.literal(\"barcode\"),\n  field: z.literal(\"barcode\")\n});\n\nconst labelImageElementSchema = labelElementBaseSchema.extend({\n  type: z.literal(\"image\"),\n  field: z.literal(\"logo\")\n});\n\nconst labelElementSchema = z.discriminatedUnion(\"type\", [\n  labelTextElementSchema,\n  labelBarcodeElementSchema,\n  labelImageElementSchema\n]);\n\n// Label Template Schema (JSON-based, not DB table)\nconst labelTemplateSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1).max(100),\n  width: z.number().min(10).max(500),\n  height: z.number().min(10).max(500),\n  elements: z.array(labelElementSchema),\n  isDefault: z.boolean().default(false),\n  createdAt: z.string().datetime(),\n  updatedAt: z.string().datetime()\n});\n\nexport const insertLabelTemplateSchema = labelTemplateSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport type LabelTemplate = z.infer<typeof labelTemplateSchema>;\nexport type InsertLabelTemplate = z.infer<typeof insertLabelTemplateSchema>;\nexport type LabelElement = z.infer<typeof labelElementSchema>;\n\n// Customers Table\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 50 }).notNull().unique(),\n  name: text(\"name\").notNull(),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  currency: varchar(\"currency\", { length: 3 }).notNull().default(\"USD\"),\n  openingBalance: decimal(\"opening_balance\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateCustomerSchema = insertCustomerSchema.partial();\n\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type UpdateCustomer = z.infer<typeof updateCustomerSchema>;\n\n// Customer JSON Schema for File-based Storage\nexport const customerJsonSchema = z.object({\n  id: z.string(),\n  code: z.string().min(1, \"Customer code is required\"),\n  name: z.string().min(1, \"Customer name is required\"),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  currency: z.enum([\"USD\", \"PLN\", \"UAH\", \"TRY\"]).default(\"USD\"),\n  openingBalance: z.number().default(0),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport const insertCustomerJsonSchema = customerJsonSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateCustomerJsonSchema = insertCustomerJsonSchema.partial();\n\nexport type CustomerJson = z.infer<typeof customerJsonSchema>;\nexport type InsertCustomerJson = z.infer<typeof insertCustomerJsonSchema>;\nexport type UpdateCustomerJson = z.infer<typeof updateCustomerJsonSchema>;\n\n// Customer Transactions Table for Current Account Management\nexport const customerTransactions = pgTable(\"customer_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").notNull().references(() => customers.id),\n  type: varchar(\"type\", { length: 20 }).notNull(), // 'sale', 'payment', 'return', 'adjustment'\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).notNull().default(\"USD\"),\n  description: text(\"description\"),\n  date: timestamp(\"date\").notNull().default(sql`now()`),\n  reference: varchar(\"reference\", { length: 100 }), // For linking to invoices, receipts etc\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertCustomerTransactionSchema = createInsertSchema(customerTransactions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateCustomerTransactionSchema = insertCustomerTransactionSchema.partial();\n\nexport type CustomerTransaction = typeof customerTransactions.$inferSelect;\nexport type InsertCustomerTransaction = z.infer<typeof insertCustomerTransactionSchema>;\nexport type UpdateCustomerTransaction = z.infer<typeof updateCustomerTransactionSchema>;\n\n// Customer Transaction JSON Schema for File-based Storage\nexport const customerTransactionJsonSchema = z.object({\n  id: z.string(),\n  customerId: z.string(),\n  type: z.enum([\"sale\", \"payment\", \"return\", \"adjustment\"]),\n  amount: z.number(),\n  currency: z.enum([\"USD\", \"PLN\", \"UAH\", \"TRY\"]).default(\"USD\"),\n  description: z.string().optional(),\n  date: z.string(),\n  reference: z.string().optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport const insertCustomerTransactionJsonSchema = customerTransactionJsonSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type CustomerTransactionJson = z.infer<typeof customerTransactionJsonSchema>;\nexport type InsertCustomerTransactionJson = z.infer<typeof insertCustomerTransactionJsonSchema>;\n","size_bytes":9689},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport ImportExport from \"@/pages/import-export\";\nimport ProductsGrid from \"@/pages/products-grid\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/import-export\" component={ImportExport} />\n      <Route path=\"/products/grid\" component={ProductsGrid} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":955},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"public/css/style.css":{"content":"/* Stock Statistics Dashboard Styles */\n.stock-stats-dashboard {\n  margin: var(--spacing-lg) 0;\n  display: grid;\n  gap: var(--spacing-lg);\n}\n\n.total-stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\n  gap: var(--spacing-md);\n  margin-bottom: var(--spacing-lg);\n}\n\n.stat-card {\n  background: var(--card);\n  border-radius: var(--radius);\n  padding: var(--spacing-lg);\n  box-shadow: var(--shadow);\n  border-left: 4px solid var(--primary);\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.stat-card:hover {\n  box-shadow: var(--shadow-hover);\n  transform: translateY(-2px);\n}\n\n.stat-card.primary { border-left-color: var(--primary); }\n.stat-card.success { border-left-color: var(--success); }\n.stat-card.info { border-left-color: #3B82F6; }\n.stat-card.warning { border-left-color: var(--warning); }\n\n.stat-header {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  margin-bottom: var(--spacing-md);\n}\n\n.stat-icon {\n  width: 40px;\n  height: 40px;\n  border-radius: var(--radius-sm);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: rgba(37, 99, 235, 0.1);\n  color: var(--primary);\n}\n\n.stat-card.success .stat-icon { \n  background: rgba(22, 163, 74, 0.1);\n  color: var(--success);\n}\n\n.stat-card.info .stat-icon { \n  background: rgba(59, 130, 246, 0.1);\n  color: #3B82F6;\n}\n\n.stat-card.warning .stat-icon { \n  background: rgba(245, 158, 11, 0.1);\n  color: var(--warning);\n}\n\n.stat-header h3 {\n  margin: 0;\n  font-size: 0.9rem;\n  font-weight: 600;\n  color: var(--muted);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.stat-values {\n  text-align: center;\n}\n\n.stat-main {\n  font-size: 2.5rem;\n  font-weight: 700;\n  color: #1F2937;\n  line-height: 1;\n  margin-bottom: var(--spacing-xs);\n}\n\n.stat-label {\n  font-size: 0.8rem;\n  color: var(--muted);\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n/* Warehouse Summary Section */\n.warehouse-summary-section {\n  background: var(--card);\n  border-radius: var(--radius);\n  padding: var(--spacing-lg);\n  box-shadow: var(--shadow);\n}\n\n.section-header {\n  display: flex;\n  justify-content: between;\n  align-items: center;\n  margin-bottom: var(--spacing-lg);\n  padding-bottom: var(--spacing-md);\n  border-bottom: 1px solid var(--border);\n}\n\n.section-header h3 {\n  margin: 0;\n  font-size: 1.1rem;\n  font-weight: 600;\n  color: #1F2937;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n}\n\n.section-actions {\n  display: flex;\n  gap: var(--spacing-sm);\n}\n\n.warehouse-summary-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: var(--spacing-md);\n}\n\n.warehouse-summary-card {\n  background: #F8FAFC;\n  border: 1px solid var(--border);\n  border-radius: var(--radius-sm);\n  padding: var(--spacing-md);\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.warehouse-summary-card:hover {\n  background: #F1F5F9;\n  box-shadow: var(--shadow);\n  transform: translateY(-1px);\n}\n\n.warehouse-card-header {\n  display: flex;\n  justify-content: between;\n  align-items: center;\n  margin-bottom: var(--spacing-md);\n}\n\n.warehouse-name {\n  font-weight: 600;\n  color: #1F2937;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-xs);\n}\n\n.warehouse-total {\n  font-size: 0.85rem;\n  color: var(--muted);\n  background: #E2E8F0;\n  padding: 2px 8px;\n  border-radius: 12px;\n}\n\n.warehouse-stats {\n  display: flex;\n  gap: var(--spacing-lg);\n  margin-bottom: var(--spacing-md);\n}\n\n.stat-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: var(--primary);\n}\n\n.stat-unit {\n  font-size: 0.75rem;\n  color: var(--muted);\n  margin-top: 2px;\n}\n\n.shelf-breakdown {\n  margin: var(--spacing-md) 0;\n  padding: var(--spacing-sm);\n  background: rgba(255, 255, 255, 0.6);\n  border-radius: var(--radius-sm);\n}\n\n.shelf-breakdown-header {\n  margin-bottom: var(--spacing-sm);\n}\n\n.shelf-breakdown-header small {\n  color: var(--muted);\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-xs);\n}\n\n.shelf-stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));\n  gap: var(--spacing-xs);\n}\n\n.shelf-stat-item {\n  background: white;\n  border: 1px solid #E2E8F0;\n  border-radius: 4px;\n  padding: var(--spacing-xs);\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.shelf-stat-item:hover {\n  background: #F1F5F9;\n  border-color: var(--primary);\n}\n\n.shelf-name {\n  font-size: 0.7rem;\n  font-weight: 600;\n  color: #374151;\n}\n\n.shelf-count {\n  font-size: 0.65rem;\n  color: var(--muted);\n  margin-top: 2px;\n}\n\n.more-shelves {\n  background: #F3F4F6;\n  border-color: #D1D5DB;\n  color: var(--muted);\n}\n\n.warehouse-card-actions {\n  margin-top: var(--spacing-md);\n  padding-top: var(--spacing-sm);\n  border-top: 1px solid #E2E8F0;\n}\n\n/* Quick Filters Section */\n.quick-filters-section {\n  background: var(--card);\n  border-radius: var(--radius);\n  padding: var(--spacing-lg);\n  box-shadow: var(--shadow);\n}\n\n.quick-filters-container {\n  display: grid;\n  gap: var(--spacing-lg);\n}\n\n.quick-filter-group {\n  display: grid;\n  gap: var(--spacing-md);\n}\n\n.filter-group-label {\n  font-weight: 600;\n  color: #374151;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  font-size: 0.9rem;\n}\n\n/* Quick Product Search Styles */\n.quick-search-container {\n  max-width: 400px;\n}\n\n.quick-search-input-wrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.quick-product-search {\n  width: 100%;\n  padding: 12px 40px 12px 16px;\n  border: 2px solid #E2E8F0;\n  border-radius: var(--radius-sm);\n  font-size: 0.95rem;\n  background: #FAFAFA;\n  transition: all 0.3s ease;\n  outline: none;\n}\n\n.quick-product-search:focus {\n  border-color: var(--primary);\n  background: white;\n  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n}\n\n.quick-product-search:not(:placeholder-shown) {\n  background: white;\n  border-color: var(--primary);\n}\n\n.quick-search-icon {\n  position: absolute;\n  right: 35px;\n  color: #9CA3AF;\n  font-size: 0.9rem;\n  pointer-events: none;\n}\n\n.quick-search-clear {\n  position: absolute;\n  right: 8px;\n  background: #F87171;\n  border: none;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 0.75rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.quick-search-clear:hover {\n  background: #DC2626;\n  transform: scale(1.1);\n}\n\n/* Modern Shelf Button Design */\n.quick-shelf-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-sm);\n}\n\n.quick-shelf-btn {\n  background: #F8FAFC;\n  border: 2px solid #E2E8F0;\n  border-radius: var(--radius-sm);\n  padding: 10px 16px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-size: 0.9rem;\n  position: relative;\n  overflow: hidden;\n  min-width: 70px;\n  text-align: center;\n}\n\n.quick-shelf-btn:hover {\n  background: #F1F5F9;\n  border-color: var(--primary);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.quick-shelf-btn.selected {\n  background: linear-gradient(135deg, var(--primary) 0%, #1E40AF 100%);\n  border-color: var(--primary);\n  color: white;\n  box-shadow: 0 4px 15px rgba(37, 99, 235, 0.3);\n}\n\n.quick-shelf-btn.selected:hover {\n  background: linear-gradient(135deg, #1E40AF 0%, var(--primary) 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(37, 99, 235, 0.4);\n}\n\n.shelf-btn-content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n}\n\n.shelf-btn-name {\n  font-weight: 600;\n  font-size: 0.9rem;\n}\n\n.shelf-btn-count {\n  font-size: 0.75rem;\n  opacity: 0.8;\n  font-weight: 500;\n}\n\n.quick-shelf-btn.selected .shelf-btn-count {\n  opacity: 0.9;\n}\n\n.quick-filter-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-sm);\n}\n\n.quick-filter-btn {\n  background: #F8FAFC;\n  border: 1px solid #E2E8F0;\n  border-radius: var(--radius-sm);\n  padding: var(--spacing-sm) var(--spacing-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 0.85rem;\n}\n\n.quick-filter-btn:hover {\n  background: #F1F5F9;\n  border-color: var(--primary);\n  transform: translateY(-1px);\n}\n\n.quick-filter-btn.active {\n  background: var(--primary);\n  border-color: var(--primary);\n  color: white;\n}\n\n.quick-filter-btn.clear-filters {\n  background: #FEF2F2;\n  border-color: #FECACA;\n  color: var(--danger);\n}\n\n.quick-filter-btn.clear-filters:hover {\n  background: #FEE2E2;\n  border-color: var(--danger);\n}\n\n.filter-btn-content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2px;\n}\n\n.filter-btn-name {\n  font-weight: 600;\n}\n\n.filter-btn-count {\n  font-size: 0.75rem;\n  opacity: 0.8;\n}\n\n/* Export Buttons */\n.export-section {\n  margin: var(--spacing-md) 0;\n  display: flex;\n  gap: var(--spacing-sm);\n  justify-content: flex-end;\n}\n\n.export-btn {\n  background: var(--success);\n  color: white;\n  border: none;\n  border-radius: var(--radius-sm);\n  padding: var(--spacing-sm) var(--spacing-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 0.85rem;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-xs);\n}\n\n.export-btn:hover {\n  background: #15803D;\n  transform: translateY(-1px);\n}\n\n/* Button Styles */\n.btn-xs {\n  padding: 4px 8px;\n  font-size: 0.75rem;\n  border-radius: 4px;\n}\n\n.btn-sm {\n  padding: 6px 12px;\n  font-size: 0.8rem;\n  border-radius: 6px;\n}\n\n.btn-primary {\n  background: var(--primary);\n  color: white;\n  border: 1px solid var(--primary);\n}\n\n.btn-outline {\n  background: transparent;\n  color: var(--primary);\n  border: 1px solid var(--primary);\n}\n\n.btn-xs, .btn-sm {\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-weight: 500;\n}\n\n.btn-xs:hover, .btn-sm:hover {\n  transform: translateY(-1px);\n  box-shadow: var(--shadow);\n}\n\n/* Active Filters Styles */\n.active-filters-container {\n  margin-top: var(--spacing-md);\n  padding: var(--spacing-md);\n  background: #F8FAFC;\n  border-radius: var(--radius-sm);\n  border: 1px solid #E2E8F0;\n}\n\n.active-filters-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-sm);\n}\n\n.active-filter-tag {\n  background: var(--primary);\n  color: white;\n  padding: 4px 8px;\n  border-radius: 16px;\n  font-size: 0.8rem;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-xs);\n}\n\n.active-filter-tag button {\n  background: none;\n  border: none;\n  color: white;\n  cursor: pointer;\n  padding: 2px;\n  border-radius: 50%;\n  width: 16px;\n  height: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background 0.2s ease;\n}\n\n.active-filter-tag button:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n/* Filter Actions Layout */\n.filter-actions {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-md);\n  align-items: center;\n  justify-content: space-between;\n  margin-top: var(--spacing-lg);\n}\n\n.filter-actions .export-section {\n  margin: 0;\n  justify-content: flex-end;\n}\n\n/* Enhanced Table Styles */\n.table-row {\n  transition: all 0.2s ease;\n}\n\n.table-row:hover {\n  background: #F8FAFC;\n  transform: translateY(-1px);\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n/* No Results State */\n.no-results-state {\n  text-align: center;\n  padding: var(--spacing-xl);\n  color: var(--muted);\n}\n\n.no-results-state i {\n  font-size: 3rem;\n  margin-bottom: var(--spacing-md);\n  opacity: 0.5;\n}\n\n.no-results-state h3 {\n  margin: 0 0 var(--spacing-sm) 0;\n  font-size: 1.2rem;\n  font-weight: 600;\n}\n\n/* Animation classes */\n.animate-bounce {\n  animation: bounce 0.3s ease;\n}\n\n@keyframes bounce {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n}\n\n/* Loading states */\n.loading {\n  opacity: 0.6;\n  pointer-events: none;\n}\n\n.loading::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 20px;\n  height: 20px;\n  margin: -10px 0 0 -10px;\n  border: 2px solid #f3f3f3;\n  border-top: 2px solid var(--primary);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .total-stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .warehouse-summary-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .quick-filter-buttons {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  }\n  \n  .warehouse-stats {\n    justify-content: space-around;\n  }\n  \n  .section-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: var(--spacing-sm);\n  }\n}\n\n@media (max-width: 480px) {\n  .total-stats-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .stat-card {\n    padding: var(--spacing-md);\n  }\n  \n  .stat-main {\n    font-size: 2rem;\n  }\n  \n  .quick-filter-buttons {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* ERP Design System */\n:root {\n  /* Colors */\n  --bg: #F5F7FB;\n  --card: #FFFFFF;\n  --muted: #6B7280;\n  --border: #E5E7EB;\n  --primary: #2563EB;\n  --success: #16A34A;\n  --warning: #F59E0B;\n  --danger: #DC2626;\n  \n  /* Spacing (8px grid) */\n  --spacing-xs: 4px;\n  --spacing-sm: 8px;\n  --spacing-md: 16px;\n  --spacing-lg: 24px;\n  --spacing-xl: 32px;\n  \n  /* Border radius */\n  --radius: 14px;\n  --radius-sm: 8px;\n  \n  /* Shadows */\n  --shadow: 0 4px 16px rgba(0,0,0,.06);\n  --shadow-hover: 0 8px 24px rgba(0,0,0,.12);\n  \n  /* Mobile breakpoints */\n  --mobile: 768px;\n  --tablet: 1024px;\n  --sidebar-width: 260px;\n}\n\n/* Reset and Base */\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  background: var(--bg);\n  margin: 0;\n  padding: 0;\n  line-height: 1.4;\n  color: #1F2937;\n}\n\n/* Layout */\n.sidebar {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 260px;\n  height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  overflow-y: auto;\n  z-index: 100;\n  padding: var(--spacing-lg);\n  box-shadow: 2px 0 16px rgba(0,0,0,0.1);\n}\n\n.main-content {\n  margin-left: 260px;\n  min-height: 100vh;\n  overflow-x: hidden;\n  background: var(--bg);\n}\n\n.content-header {\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  backdrop-filter: blur(6px);\n  background: rgba(255,255,255,.85);\n  border-bottom: 1px solid var(--border);\n  padding: var(--spacing-lg);\n  margin-bottom: var(--spacing-lg);\n}\n\n.content-body {\n  padding: 0 var(--spacing-lg) var(--spacing-lg);\n}\n\n/* Typography */\nh1, h2, h3, h4, h5, h6 {\n  font-weight: 600;\n  margin: 0 0 var(--spacing-md) 0;\n  line-height: 1.2;\n}\n\nh1 { font-size: 2rem; }\nh2 { font-size: 1.5rem; }\nh3 { font-size: 1.25rem; }\nh4 { font-size: 1.125rem; }\n\n.text-muted {\n  color: var(--muted);\n  font-weight: 400;\n}\n\n.text-semibold {\n  font-weight: 600;\n}\n\n/* Sidebar Navigation */\n.sidebar .nav-link {\n  display: flex;\n  align-items: center;\n  color: rgba(255,255,255,0.8);\n  text-decoration: none;\n  padding: 12px 16px;\n  border-radius: var(--radius-sm);\n  margin: 2px 0;\n  transition: all 0.3s ease;\n  position: relative;\n  font-weight: 500;\n}\n\n.sidebar .nav-link:hover {\n  background-color: rgba(255,255,255,0.15);\n  color: white;\n  transform: translateX(2px);\n}\n\n.sidebar .nav-link.active {\n  background-color: rgba(255,255,255,0.2);\n  color: white;\n}\n\n.sidebar .nav-link.active::before {\n  content: '';\n  position: absolute;\n  left: -16px;\n  top: 0;\n  bottom: 0;\n  width: 4px;\n  background: white;\n  border-radius: 2px;\n}\n\n.sidebar .nav-link i {\n  width: 20px;\n  margin-right: 12px;\n}\n\n/* Language Switcher */\n.language-switcher {\n  margin-bottom: var(--spacing-lg);\n  display: flex;\n  gap: var(--spacing-xs);\n  justify-content: center;\n}\n\n.language-switcher .btn {\n  padding: 6px 12px;\n  border: 1px solid rgba(255,255,255,0.3);\n  background: transparent;\n  color: rgba(255,255,255,0.8);\n  border-radius: 20px;\n  text-decoration: none;\n  font-size: 12px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.language-switcher .btn:hover,\n.language-switcher .btn.active {\n  background: rgba(255,255,255,0.2);\n  color: white;\n  border-color: rgba(255,255,255,0.5);\n}\n\n/* Buttons */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 16px;\n  border: none;\n  border-radius: var(--radius-sm);\n  font-weight: 500;\n  font-size: 14px;\n  text-decoration: none;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  gap: var(--spacing-xs);\n}\n\n.btn:focus {\n  outline: 2px solid var(--primary);\n  outline-offset: 2px;\n}\n\n.btn-primary {\n  background: var(--primary);\n  color: white;\n}\n\n.btn-primary:hover {\n  background: #1D4ED8;\n  transform: translateY(-1px);\n}\n\n.btn-outline {\n  background: transparent;\n  color: var(--primary);\n  border: 1px solid var(--border);\n}\n\n.btn-outline:hover {\n  background: var(--primary);\n  color: white;\n  border-color: var(--primary);\n}\n\n.btn-success {\n  background: var(--success);\n  color: white;\n}\n\n.btn-success:hover {\n  background: #15803D;\n}\n\n.btn-danger {\n  background: var(--danger);\n  color: white;\n}\n\n.btn-danger:hover {\n  background: #B91C1C;\n}\n\n.btn-sm {\n  padding: 6px 12px;\n  font-size: 12px;\n}\n\n/* Cards */\n.card {\n  background: var(--card);\n  border-radius: var(--radius);\n  box-shadow: var(--shadow);\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.card:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-hover);\n}\n\n/* Statistics Cards */\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n  gap: var(--spacing-md);\n  margin-bottom: var(--spacing-lg);\n}\n\n.stat-card {\n  background: var(--card);\n  border-radius: var(--radius);\n  box-shadow: var(--shadow);\n  padding: var(--spacing-lg);\n  text-align: center;\n  transition: all 0.3s ease;\n}\n\n.stat-card:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-hover);\n}\n\n.stat-card .icon {\n  font-size: 2.5rem;\n  margin-bottom: var(--spacing-md);\n}\n\n.stat-card .metric {\n  font-size: 2rem;\n  font-weight: 700;\n  margin-bottom: var(--spacing-xs);\n}\n\n.stat-card .label {\n  font-size: 14px;\n  color: var(--muted);\n  font-weight: 500;\n}\n\n/* Product Grid */\n.products-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 320px));\n  gap: 18px;\n  max-width: 1400px;\n  margin: 0 auto;\n  justify-content: center;\n}\n\n.product-card {\n  background: #FFF;\n  border-radius: 14px;\n  box-shadow: 0 4px 12px rgba(0,0,0,.06);\n  overflow: hidden;\n  transition: 0.3s;\n  opacity: 0;\n  transform: translateY(15px);\n}\n\n.product-card.reveal {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n.product-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(0,0,0,.08);\n}\n\n.product-image-container {\n  position: relative;\n  aspect-ratio: 16/9;\n  overflow: hidden;\n  border-radius: 12px 12px 0 0;\n  cursor: pointer;\n  background: #f3f4f6;\n}\n\n.product-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  object-position: center;\n}\n\n.product-status-badge {\n  position: absolute;\n  top: 12px;\n  right: 12px;\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.product-body {\n  padding: 16px;\n}\n\n.product-title {\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n  line-height: 1.3;\n  color: #111827;\n}\n\n.product-description {\n  font-size: 14px;\n  color: #6B7280;\n  margin-bottom: 16px;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 1.4;\n}\n\n.price-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 12px;\n  margin-bottom: 16px;\n}\n\n.price-item {\n  text-align: center;\n  padding: 12px;\n  border-radius: 8px;\n}\n\n.price-item.buy-price {\n  background: #f0f9f4;\n  border: 1px solid #bbf7d0;\n}\n\n.price-item.sell-price {\n  background: #eff6ff;\n  border: 1px solid #93c5fd;\n}\n\n.price-item .label {\n  font-size: 12px;\n  font-weight: 600;\n  margin-bottom: 4px;\n}\n\n.price-item.buy-price .label {\n  color: #16a34a;\n}\n\n.price-item.sell-price .label {\n  color: #2563eb;\n}\n\n.price-item .value {\n  font-size: 14px;\n  font-weight: bold;\n}\n\n.price-item.buy-price .value {\n  color: #16a34a;\n}\n\n.price-item.sell-price .value {\n  color: #2563eb;\n}\n\n.stock-badge {\n  text-align: center;\n  margin-bottom: 16px;\n}\n\n.chips-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n  margin-bottom: 16px;\n}\n\n.chip {\n  display: inline-block;\n  margin: 2px;\n  background: #F3F4F6;\n  color: #374151;\n  font-size: 12px;\n  padding: 4px 10px;\n  border-radius: 9999px;\n}\n\n.chip:hover {\n  background: #E5E7EB;\n}\n\n.product-actions {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 8px;\n}\n\n/* Button Overrides */\n.btn-outline-primary {\n  border: 1px solid #2563eb;\n  color: #2563eb;\n  background: white;\n}\n\n.btn-outline-primary:hover {\n  background: #2563eb;\n  color: white;\n}\n\n.btn-outline-secondary {\n  border: 1px solid #6b7280;\n  color: #6b7280;\n  background: white;\n}\n\n.btn-outline-secondary:hover {\n  background: #6b7280;\n  color: white;\n}\n\n/* Badges */\n.badge {\n  display: inline-flex;\n  align-items: center;\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.badge-primary {\n  background: var(--primary);\n  color: white;\n}\n\n.badge-success,\n.badge-aktif {\n  background: #10B981;\n  color: white;\n}\n\n.badge-warning {\n  background: var(--warning);\n  color: white;\n}\n\n.badge-danger {\n  background: var(--danger);\n  color: white;\n}\n\n.badge-info {\n  background: var(--primary);\n  color: white;\n}\n\n.badge-muted,\n.badge-pasif {\n  background: #9CA3AF;\n  color: white;\n}\n\n.badge-stok {\n  background: #3B82F6;\n  color: white;\n}\n\n.badge-kritik {\n  background: #F59E0B;\n  color: white;\n}\n\n.badge-sifir {\n  background: #EF4444;\n  color: white;\n}\n\n.badge-chip {\n  background: #F3F4F6;\n  color: #374151;\n  border-radius: 8px;\n  padding: 6px 12px;\n  font-size: 12px;\n  font-weight: 500;\n  border: 1px solid #E5E7EB;\n}\n\n/* Toolbar */\n.toolbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: var(--spacing-md);\n}\n\n.toolbar-actions {\n  display: flex;\n  gap: var(--spacing-sm);\n}\n\n/* Mobile Navigation Toggle */\n.mobile-nav-toggle {\n  display: none;\n  position: fixed;\n  top: 15px;\n  left: 15px;\n  z-index: 101;\n  background: var(--primary);\n  color: white;\n  border: none;\n  border-radius: var(--radius-sm);\n  width: 44px;\n  height: 44px;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  box-shadow: var(--shadow);\n  transition: all 0.3s ease;\n}\n\n.mobile-nav-toggle:hover {\n  background: #1D4ED8;\n  transform: scale(1.05);\n}\n\n.mobile-nav-overlay {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 99;\n  opacity: 0;\n  pointer-events: none;\n  transition: opacity 0.3s ease;\n}\n\n.mobile-nav-overlay.show {\n  opacity: 1;\n  pointer-events: auto;\n}\n\n/* Enhanced Mobile Content Adjustment */\n.main-content.mobile-nav-open {\n  overflow: hidden;\n}\n\n/* Dashboard Styles */\n.dashboard-stats {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: var(--spacing-lg);\n  margin-bottom: var(--spacing-xl);\n}\n\n.stats-card {\n  background: var(--card);\n  border-radius: var(--radius);\n  padding: var(--spacing-lg);\n  box-shadow: var(--shadow);\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-md);\n}\n\n.stats-card:hover {\n  box-shadow: var(--shadow-hover);\n  transform: translateY(-2px);\n}\n\n.stats-icon {\n  width: 60px;\n  height: 60px;\n  border-radius: var(--radius-sm);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n  flex-shrink: 0;\n}\n\n.stats-icon.primary {\n  background: rgba(37, 99, 235, 0.1);\n  color: var(--primary);\n}\n\n.stats-icon.success {\n  background: rgba(22, 163, 74, 0.1);\n  color: var(--success);\n}\n\n.stats-icon.warning {\n  background: rgba(245, 158, 11, 0.1);\n  color: var(--warning);\n}\n\n.stats-icon.info {\n  background: rgba(59, 130, 246, 0.1);\n  color: #3B82F6;\n}\n\n.stats-content h3 {\n  font-size: 2rem;\n  font-weight: 700;\n  margin: 0 0 var(--spacing-xs) 0;\n  color: #1F2937;\n}\n\n.stats-content p {\n  margin: 0;\n  color: var(--muted);\n  font-weight: 500;\n}\n\n.warning-note {\n  display: block;\n  margin-top: var(--spacing-xs);\n  color: var(--warning);\n  font-size: 0.75rem;\n}\n\n.warning-note i {\n  margin-right: var(--spacing-xs);\n}\n\n/* Dashboard Charts */\n.dashboard-charts {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  gap: var(--spacing-lg);\n}\n\n.chart-large, .chart-small {\n  background: var(--card);\n  border-radius: var(--radius);\n  padding: var(--spacing-lg);\n  box-shadow: var(--shadow);\n}\n\n.chart-large h5, .chart-small h5 {\n  margin: 0 0 var(--spacing-md) 0;\n  color: #1F2937;\n  font-weight: 600;\n}\n\n.chart-large canvas {\n  height: 300px !important;\n}\n\n/* Header Top */\n.header-top {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.header-top h1 {\n  margin: 0;\n  color: var(--primary);\n}\n\n.header-top .text-muted {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n}\n\n/* Warehouse Card Mobile Styles */\n.warehouse-cards-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: var(--spacing-md);\n  margin-bottom: var(--spacing-lg);\n}\n\n.warehouse-card {\n  background: var(--card);\n  border-radius: var(--radius);\n  box-shadow: var(--shadow);\n  padding: var(--spacing-lg);\n  transition: all 0.3s ease;\n  border: 1px solid var(--border);\n}\n\n.warehouse-card:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-hover);\n}\n\n.warehouse-info {\n  display: grid;\n  grid-template-columns: 1fr auto;\n  gap: var(--spacing-md);\n  align-items: start;\n  margin-bottom: var(--spacing-md);\n}\n\n.warehouse-status-badge {\n  padding: 4px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  white-space: nowrap;\n}\n\n.warehouse-status-badge.aktif {\n  background: rgba(34, 197, 94, 0.1);\n  color: #15803d;\n  border: 1px solid rgba(34, 197, 94, 0.2);\n}\n\n.warehouse-status-badge.pasif {\n  background: rgba(239, 68, 68, 0.1);\n  color: #dc2626;\n  border: 1px solid rgba(239, 68, 68, 0.2);\n}\n\n.warehouse-actions {\n  display: flex;\n  gap: var(--spacing-sm);\n  margin-top: var(--spacing-md);\n}\n\n/* Active Filters Styles */\n.active-filters-container {\n  margin-top: var(--spacing-md);\n  padding: var(--spacing-md);\n  background: #F8FAFC;\n  border-radius: var(--radius-sm);\n  border: 1px solid #E2E8F0;\n}\n\n.active-filters-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-sm);\n}\n\n.active-filter-tag {\n  background: var(--primary);\n  color: white;\n  padding: 4px 8px;\n  border-radius: 16px;\n  font-size: 0.8rem;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-xs);\n}\n\n.active-filter-tag button {\n  background: none;\n  border: none;\n  color: white;\n  cursor: pointer;\n  padding: 2px;\n  border-radius: 50%;\n  width: 16px;\n  height: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background 0.2s ease;\n}\n\n.active-filter-tag button:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n/* Filter Actions Layout */\n.filter-actions {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-md);\n  align-items: center;\n  justify-content: space-between;\n  margin-top: var(--spacing-lg);\n}\n\n.filter-actions .export-section {\n  margin: 0;\n  justify-content: flex-end;\n}\n\n/* Enhanced Table Styles */\n.table-row {\n  transition: all 0.2s ease;\n}\n\n.table-row:hover {\n  background: #F8FAFC;\n  transform: translateY(-1px);\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n/* No Results State */\n.no-results-state {\n  text-align: center;\n  padding: var(--spacing-xl);\n  color: var(--muted);\n}\n\n.no-results-state i {\n  font-size: 3rem;\n  margin-bottom: var(--spacing-md);\n  opacity: 0.5;\n}\n\n.no-results-state h3 {\n  margin: 0 0 var(--spacing-sm) 0;\n  font-size: 1.2rem;\n  font-weight: 600;\n}\n\n/* Animation classes */\n.animate-bounce {\n  animation: bounce 0.3s ease;\n}\n\n@keyframes bounce {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n}\n\n/* Loading states */\n.loading {\n  opacity: 0.6;\n  pointer-events: none;\n}\n\n.loading::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 20px;\n  height: 20px;\n  margin: -10px 0 0 -10px;\n  border: 2px solid #f3f3f3;\n  border-top: 2px solid var(--primary);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Responsive Design */\n@media (max-width: 1024px) {\n  .sidebar {\n    width: 240px;\n  }\n  \n  .main-content {\n    margin-left: 240px;\n  }\n  \n  .products-grid {\n    grid-template-columns: repeat(auto-fit, minmax(260px, 300px));\n    gap: 16px;\n    max-width: 100%;\n  }\n  \n  .warehouse-cards-grid {\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  }\n}\n\n@media (max-width: 768px) {\n  .mobile-nav-toggle {\n    display: flex;\n  }\n  \n  .mobile-nav-overlay {\n    display: block;\n  }\n  \n  .sidebar {\n    transform: translateX(-100%);\n    transition: transform 0.3s ease;\n    z-index: 100;\n  }\n  \n  .sidebar.open {\n    transform: translateX(0);\n  }\n  \n  .main-content {\n    margin-left: 0;\n    padding-top: 70px; /* Space for mobile nav button */\n  }\n  \n  .content-header {\n    padding: var(--spacing-md);\n    margin-top: 0;\n  }\n  \n  .content-body {\n    padding: 0 var(--spacing-md) var(--spacing-md);\n  }\n  \n  .stats-grid {\n    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n    gap: var(--spacing-sm);\n  }\n  \n  .products-grid {\n    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\n    gap: 16px;\n  }\n  \n  /* Enhanced product card mobile styles */\n  .product-card {\n    margin: 0 auto;\n    max-width: 360px;\n  }\n  \n  .product-body {\n    padding: 14px;\n  }\n  \n  .product-title {\n    font-size: 14px;\n  }\n  \n  .product-description {\n    font-size: 12px;\n    line-height: 1.4;\n  }\n  \n  .price-container {\n    padding: 10px;\n    margin-bottom: 12px;\n  }\n  \n  .price-item .value {\n    font-size: 13px;\n  }\n  \n  .attrs-grid {\n    padding: 8px;\n    font-size: 10px;\n    margin-bottom: 12px;\n  }\n  \n  .product-actions {\n    grid-template-columns: 1fr;\n    gap: 6px;\n  }\n  \n  .product-actions .btn {\n    width: 100%;\n    justify-content: center;\n    font-size: 12px;\n    padding: 8px 10px;\n  }\n  \n  .warehouse-cards-grid {\n    grid-template-columns: 1fr;\n    gap: var(--spacing-md);\n  }\n  \n  .warehouse-info {\n    grid-template-columns: 1fr;\n    gap: var(--spacing-sm);\n  }\n  \n  .warehouse-actions {\n    flex-direction: column;\n    gap: var(--spacing-sm);\n  }\n  \n  .warehouse-actions .btn {\n    width: 100%;\n    justify-content: center;\n  }\n  \n  .toolbar {\n    flex-direction: column;\n    align-items: stretch;\n    gap: var(--spacing-md);\n  }\n  \n  .toolbar-actions {\n    justify-content: stretch;\n    flex-wrap: wrap;\n  }\n  \n  .toolbar-actions .btn {\n    flex: 1;\n    min-width: calc(50% - var(--spacing-xs));\n  }\n  \n  /* Enhanced warehouse form responsiveness */\n  .form-grid-2,\n  .form-grid-3 {\n    grid-template-columns: 1fr;\n  }\n  \n  .form-section {\n    margin-bottom: var(--spacing-md);\n  }\n  \n  .form-section-body {\n    padding: var(--spacing-md);\n  }\n  \n  /* Warehouse detail responsive */\n  .warehouse-detail-container .row {\n    flex-direction: column;\n  }\n  \n  .info-card {\n    margin-bottom: var(--spacing-md);\n  }\n  \n  /* Enhanced filter panel for mobile */\n  .filter-panel {\n    left: 0;\n    width: 100%;\n    max-width: 320px;\n    z-index: 60;\n  }\n  \n  /* Dashboard responsive */\n  .dashboard-stats {\n    grid-template-columns: 1fr;\n    gap: var(--spacing-md);\n  }\n  \n  .dashboard-charts {\n    grid-template-columns: 1fr;\n    gap: var(--spacing-md);\n  }\n  \n  .header-top {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: var(--spacing-sm);\n  }\n  \n  .stats-card {\n    padding: var(--spacing-md);\n    flex-direction: column;\n    text-align: center;\n    gap: var(--spacing-sm);\n  }\n  \n  .stats-icon {\n    width: 50px;\n    height: 50px;\n    font-size: 20px;\n  }\n  \n  .stats-content h3 {\n    font-size: 1.5rem;\n  }\n  \n  .chart-large canvas {\n    height: 250px !important;\n  }\n}\n\n@media (max-width: 480px) {\n  .main-content {\n    padding-top: 60px; /* Reduced space for smaller screens */\n  }\n  \n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n    gap: var(--spacing-xs);\n  }\n  \n  .stats-card .metric {\n    font-size: 1.25rem;\n  }\n  \n  .toolbar-actions .btn {\n    font-size: 13px;\n    padding: 8px 12px;\n  }\n  \n  .warehouse-actions .btn {\n    font-size: 13px;\n    padding: 10px 12px;\n  }\n  \n  .form-section-body {\n    padding: var(--spacing-sm);\n  }\n  \n  .modal-header,\n  .modal-body {\n    padding: var(--spacing-sm);\n  }\n}\n\n@media (max-width: 360px) {\n  .content-header,\n  .content-body {\n    padding-left: var(--spacing-sm);\n    padding-right: var(--spacing-sm);\n  }\n  \n  .main-content {\n    padding-top: 55px;\n  }\n  \n  .mobile-nav-toggle {\n    width: 40px;\n    height: 40px;\n    font-size: 16px;\n  }\n  \n  .stats-grid {\n    grid-template-columns: 1fr;\n    gap: var(--spacing-xs);\n  }\n  \n  .stat-card {\n    padding: var(--spacing-sm);\n  }\n  \n  .stat-card .metric {\n    font-size: 1.125rem;\n  }\n  \n  .product-card {\n    max-width: 320px;\n  }\n  \n  .product-body {\n    padding: 12px;\n  }\n  \n  .product-title {\n    font-size: 14px;\n  }\n  \n  .product-description {\n    font-size: 12px;\n    -webkit-line-clamp: 2;\n  }\n  \n  .price-container {\n    padding: 10px;\n    margin-bottom: 12px;\n  }\n  \n  .price-item .label {\n    font-size: 10px;\n  }\n  \n  .price-item .value {\n    font-size: 13px;\n  }\n  \n  .attrs-grid {\n    padding: 8px;\n    font-size: 10px;\n    gap: 4px;\n  }\n  \n  .product-actions {\n    grid-template-columns: 1fr;\n    gap: 6px;\n  }\n  \n  .product-actions .btn {\n    font-size: 12px;\n    padding: 8px 10px;\n  }\n  \n  .toolbar-actions {\n    flex-direction: column;\n  }\n  \n  .toolbar-actions .btn {\n    width: 100%;\n    margin-bottom: var(--spacing-xs);\n  }\n  \n  .warehouse-card {\n    padding: var(--spacing-md);\n  }\n  \n  .form-control {\n    height: 40px;\n    padding: 10px 12px;\n  }\n  \n  h1 {\n    font-size: 1.5rem;\n  }\n  \n  h2 {\n    font-size: 1.25rem;\n  }\n  \n  .btn {\n    padding: 8px 12px;\n    font-size: 13px;\n  }\n}\n\n/* Animations */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.fade-in-up {\n  animation: fadeInUp 0.6s ease forwards;\n}\n\n/* Loading States */\n.skeleton {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200% 100%;\n  animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\n/* Focus States */\n*:focus {\n  outline: 2px solid var(--primary);\n  outline-offset: 2px;\n}\n\n/* Modal Styles */\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: var(--spacing-lg);\n}\n\n.modal-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(4px);\n}\n\n.modal-content {\n  background: var(--card);\n  border-radius: var(--radius);\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);\n  max-width: 1000px;\n  width: 100%;\n  max-height: 90vh;\n  overflow-y: auto;\n  position: relative;\n  z-index: 1001;\n  animation: modalSlideIn 0.3s ease-out;\n}\n\n@keyframes modalSlideIn {\n  from {\n    opacity: 0;\n    transform: scale(0.9) translateY(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1) translateY(0);\n  }\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  padding: var(--spacing-lg);\n  border-bottom: 1px solid var(--border);\n}\n\n.modal-title h3 {\n  margin: 0 0 var(--spacing-xs) 0;\n  font-size: 1.5rem;\n  font-weight: 600;\n}\n\n.modal-header-actions {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-md);\n}\n\n.modal-close {\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  color: var(--muted);\n  cursor: pointer;\n  padding: var(--spacing-xs);\n  border-radius: var(--radius-sm);\n  transition: all 0.2s ease;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-close:hover {\n  background: var(--bg);\n  color: var(--danger);\n}\n\n.modal-body {\n  padding: var(--spacing-lg);\n}\n\n/* Statistics Metrics Grid */\n.stats-metrics-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: var(--spacing-md);\n  margin-bottom: var(--spacing-xl);\n}\n\n.metric-card {\n  background: var(--bg);\n  border-radius: var(--radius);\n  padding: var(--spacing-lg);\n  text-align: center;\n  border: 1px solid var(--border);\n}\n\n.metric-value {\n  font-size: 2.5rem;\n  font-weight: 700;\n  color: var(--primary);\n  margin-bottom: var(--spacing-sm);\n}\n\n.metric-value small {\n  font-size: 1rem;\n  font-weight: 500;\n  color: var(--muted);\n}\n\n.metric-label {\n  font-size: 14px;\n  font-weight: 600;\n  color: var(--muted);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  margin-bottom: var(--spacing-xs);\n}\n\n.metric-subtitle {\n  font-size: 12px;\n  color: var(--muted);\n  font-style: italic;\n}\n\n/* Charts Grid */\n.charts-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--spacing-lg);\n}\n\n.chart-container {\n  background: var(--card);\n  border: 1px solid var(--border);\n  border-radius: var(--radius);\n  padding: var(--spacing-lg);\n  position: relative;\n  width: 100%;\n  height: 320px;\n  max-height: 45vh;\n  min-height: 220px;\n}\n\n.chart-title {\n  font-size: 1rem;\n  font-weight: 600;\n  margin-bottom: var(--spacing-md);\n  color: var(--muted);\n  text-align: center;\n}\n\n.chart-container canvas {\n  width: 100% !important;\n  height: calc(100% - 40px) !important;\n  display: block;\n}\n\n/* Modal Responsive */\n@media (max-width: 1024px) {\n  .charts-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .stats-metrics-grid {\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  }\n  \n  .chart-container {\n    height: 280px;\n    min-height: 200px;\n  }\n}\n\n@media (max-width: 768px) {\n  .modal {\n    padding: var(--spacing-sm);\n  }\n  \n  .modal-content {\n    max-height: 95vh;\n  }\n  \n  .modal-header,\n  .modal-body {\n    padding: var(--spacing-md);\n  }\n  \n  .stats-metrics-grid {\n    grid-template-columns: repeat(2, 1fr);\n    gap: var(--spacing-sm);\n  }\n  \n  .metric-card {\n    padding: var(--spacing-md);\n  }\n  \n  .metric-value {\n    font-size: 2rem;\n  }\n  \n  .chart-container {\n    height: 240px;\n    min-height: 180px;\n  }\n}\n\n@media (max-width: 480px) {\n  .stats-metrics-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .modal-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: var(--spacing-sm);\n  }\n  \n  .modal-header-actions {\n    align-self: flex-end;\n    margin-top: -40px;\n  }\n}\n\n/* Utilities */\n.d-flex { display: flex; }\n.d-grid { display: grid; }\n.justify-center { justify-content: center; }\n.items-center { align-items: center; }\n.gap-sm { gap: var(--spacing-sm); }\n.gap-md { gap: var(--spacing-md); }\n.mb-0 { margin-bottom: 0; }\n.mb-sm { margin-bottom: var(--spacing-sm); }\n.mb-md { margin-bottom: var(--spacing-md); }\n.mb-lg { margin-bottom: var(--spacing-lg); }\n.text-center { text-align: center; }\n.w-full { width: 100%; }\n\n/* Modern Product Form Styles */\n.product-form-container {\n  display: grid;\n  grid-template-columns: 1fr 340px;\n  gap: 24px;\n  margin-bottom: 24px;\n}\n\n.product-form-left {\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n}\n\n.product-form-right {\n  position: sticky;\n  top: 88px;\n  max-height: calc(100vh - 120px);\n  overflow-y: auto;\n}\n\n.form-section {\n  background: var(--card);\n  border-radius: var(--radius);\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.06);\n  overflow: hidden;\n}\n\n.form-section-header {\n  padding: 20px 24px;\n  border-bottom: 1px solid var(--border);\n  background: var(--bg);\n}\n\n.form-section-title {\n  margin: 0;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: #1F2937;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.form-section-body {\n  padding: 24px;\n}\n\n.form-grid {\n  display: grid;\n  gap: 20px;\n}\n\n.form-grid-2 {\n  grid-template-columns: 1fr 1fr;\n}\n\n.form-grid-3 {\n  grid-template-columns: 1fr 1fr 1fr;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form-label {\n  font-size: 14px;\n  font-weight: 600;\n  color: #374151;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.form-label .required {\n  color: var(--danger);\n}\n\n.form-label-help {\n  font-size: 12px;\n  font-weight: 400;\n  color: var(--muted);\n  margin-left: 4px;\n}\n\n.form-control {\n  height: 44px;\n  padding: 12px 16px;\n  border: 2px solid var(--border);\n  border-radius: 8px;\n  font-size: 14px;\n  font-family: inherit;\n  background: var(--card);\n  color: #1F2937;\n  transition: all 0.2s ease;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.form-control:focus {\n  outline: none;\n  border-color: var(--primary);\n  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n}\n\n.form-control::placeholder {\n  color: var(--muted);\n}\n\n.form-control:disabled {\n  background: #F3F4F6;\n  color: var(--muted);\n  cursor: not-allowed;\n}\n\n.form-textarea {\n  min-height: 80px;\n  resize: vertical;\n  padding: 12px 16px;\n  font-family: inherit;\n}\n\n.currency-group {\n  display: grid;\n  grid-template-columns: 1fr auto;\n  gap: 8px;\n  align-items: end;\n}\n\n.currency-select {\n  width: auto;\n  min-width: 100px;\n  height: 44px;\n  padding: 12px 16px;\n  font-size: 14px;\n}\n\n.price-warning {\n  background: #FEF3C7;\n  color: #D97706;\n  padding: 12px 16px;\n  border-radius: 8px;\n  font-size: 13px;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-top: 12px;\n  border: 1px solid #FDE68A;\n}\n\n/* Image Management Styles */\n.image-section {\n  background: var(--card);\n  border-radius: var(--radius);\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.06);\n  overflow: hidden;\n  height: fit-content;\n}\n\n.image-upload-area {\n  border: 2px dashed var(--border);\n  border-radius: 8px;\n  padding: 24px;\n  text-align: center;\n  background: #FAFBFC;\n  margin-bottom: 16px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.image-upload-area:hover {\n  border-color: var(--primary);\n  background: #F8FAFF;\n}\n\n.image-upload-area.dragover {\n  border-color: var(--primary);\n  background: #F0F7FF;\n  transform: scale(1.02);\n}\n\n.upload-icon {\n  font-size: 2rem;\n  color: var(--muted);\n  margin-bottom: 12px;\n}\n\n.upload-text {\n  font-weight: 500;\n  margin-bottom: 4px;\n  color: #374151;\n}\n\n.upload-hint {\n  font-size: 12px;\n  color: var(--muted);\n}\n\n.cover-preview {\n  width: 100%;\n  aspect-ratio: 16/9;\n  border-radius: 8px;\n  overflow: hidden;\n  background: #F3F4F6;\n  margin-bottom: 16px;\n  position: relative;\n  border: 2px solid var(--border);\n}\n\n.cover-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.cover-badge {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  background: var(--success);\n  color: white;\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 11px;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n.cover-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  color: var(--muted);\n}\n\n.thumbnail-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 12px;\n}\n\n.thumbnail-item {\n  position: relative;\n  aspect-ratio: 1;\n  border-radius: 8px;\n  overflow: hidden;\n  background: #F3F4F6;\n  border: 2px solid var(--border);\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.thumbnail-item:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.thumbnail-item:hover .thumbnail-actions {\n  opacity: 1;\n}\n\n.thumbnail-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.thumbnail-actions {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n\n.thumbnail-btn {\n  background: rgba(255, 255, 255, 0.9);\n  border: none;\n  border-radius: 4px;\n  padding: 6px;\n  cursor: pointer;\n  color: #374151;\n  font-size: 12px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  min-width: 28px;\n  height: 28px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.thumbnail-btn:hover {\n  background: white;\n  transform: scale(1.1);\n}\n\n.thumbnail-cover-badge {\n  position: absolute;\n  top: 4px;\n  left: 4px;\n  background: var(--success);\n  color: white;\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-size: 9px;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n/* Sticky Action Bar */\n.sticky-actions {\n  position: sticky;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-top: 1px solid var(--border);\n  padding: 16px 24px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  z-index: 50;\n  margin-top: 24px;\n  box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.06);\n}\n\n.sticky-actions .btn {\n  min-width: 100px;\n  height: 44px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  font-weight: 600;\n}\n\n/* Responsive adjustments for product form */\n@media (max-width: 1024px) {\n  .product-form-container {\n    grid-template-columns: 1fr;\n    gap: 20px;\n  }\n  \n  .product-form-right {\n    position: static;\n    max-height: none;\n    order: -1;\n  }\n  \n  .form-grid-2,\n  .form-grid-3 {\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n@media (max-width: 640px) {\n  .form-grid-2,\n  .form-grid-3 {\n    grid-template-columns: 1fr;\n  }\n  \n  .currency-group {\n    grid-template-columns: 1fr;\n  }\n  \n  .currency-select {\n    width: 100%;\n  }\n  \n  .thumbnail-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .sticky-actions {\n    flex-direction: column;\n    gap: 12px;\n    padding: 16px;\n  }\n  \n  .sticky-actions .btn {\n    width: 100%;\n  }\n  \n  .form-section-body {\n    padding: 16px;\n  }\n}\n\n/* Image Preview Modal */\n.image-preview-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.9);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2000;\n  padding: 20px;\n}\n\n.image-preview-content {\n  max-width: 90%;\n  max-height: 90%;\n  position: relative;\n}\n\n.image-preview-content img {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: contain;\n  border-radius: 8px;\n}\n\n.image-preview-close {\n  position: absolute;\n  top: -40px;\n  right: 0;\n  background: rgba(255, 255, 255, 0.9);\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  color: #374151;\n  font-size: 16px;\n  transition: all 0.2s ease;\n}\n\n.image-preview-close:hover {\n  background: white;\n  transform: scale(1.1);\n}\n\n/* =========================\n   PRODUCT CARD IMPROVEMENTS\n   ========================= */\n\n/* Image Overlay for Lightbox - Removed duplicate definition */\n\n.product-image-container:hover .image-overlay {\n  opacity: 1;\n}\n\n.image-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.4);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n  color: white;\n  font-size: 2rem;\n}\n\n/* Chips Container and Styles */\n.chips-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n  margin-bottom: var(--spacing-lg);\n}\n\n.chip {\n  display: inline-flex;\n  align-items: center;\n  padding: 6px 10px;\n  border-radius: 999px;\n  font-size: 12px;\n  line-height: 1;\n  font-weight: 500;\n  white-space: nowrap;\n  transition: all 0.2s ease;\n}\n\n.chip:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Improved Price Container */\n.price-container {\n  background: #F9FAFB;\n  border-radius: 12px;\n  padding: 12px;\n  margin-bottom: var(--spacing-md);\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--spacing-md);\n  text-align: center;\n  border: 1px solid #F3F4F6;\n}\n\n.price-item .label {\n  font-size: 10px;\n  color: var(--muted);\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  margin-bottom: 4px;\n}\n\n.price-item .value {\n  font-size: 14px;\n  font-weight: 700;\n}\n\n/* ===================\n   LIGHTBOX MODAL\n   =================== */\n\n.lightbox-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 2000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: lightboxFadeIn 0.3s ease;\n}\n\n@keyframes lightboxFadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.lightbox-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.65);\n  backdrop-filter: blur(4px);\n}\n\n.lightbox-content {\n  position: relative;\n  width: 90vw;\n  height: 90vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2001;\n}\n\n.lightbox-image-container {\n  max-width: 100%;\n  max-height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.lightbox-image-container img {\n  max-width: 90vw;\n  max-height: 90vh;\n  object-fit: contain;\n  border-radius: 8px;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n}\n\n.lightbox-nav {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  background: rgba(255, 255, 255, 0.9);\n  border: none;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  color: #374151;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  backdrop-filter: blur(10px);\n}\n\n.lightbox-nav:hover {\n  background: rgba(255, 255, 255, 1);\n  transform: translateY(-50%) scale(1.1);\n}\n\n.lightbox-prev {\n  left: 20px;\n}\n\n.lightbox-next {\n  right: 20px;\n}\n\n.lightbox-counter {\n  position: absolute;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 8px 16px;\n  border-radius: 20px;\n  font-size: 14px;\n  font-weight: 500;\n  backdrop-filter: blur(10px);\n}\n\n.lightbox-close {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: rgba(255, 255, 255, 0.9);\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  color: #374151;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  backdrop-filter: blur(10px);\n}\n\n.lightbox-close:hover {\n  background: rgba(255, 255, 255, 1);\n  color: var(--danger);\n  transform: scale(1.1);\n}\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n/* ========================\n   RESPONSIVE LIGHTBOX\n   ======================== */\n\n@media (max-width: 768px) {\n  .lightbox-nav {\n    width: 40px;\n    height: 40px;\n    font-size: 16px;\n  }\n  \n  .lightbox-prev {\n    left: 10px;\n  }\n  \n  .lightbox-next {\n    right: 10px;\n  }\n  \n  .lightbox-close {\n    width: 36px;\n    height: 36px;\n    font-size: 16px;\n    top: 15px;\n    right: 15px;\n  }\n  \n  .lightbox-counter {\n    top: 15px;\n    font-size: 12px;\n    padding: 6px 12px;\n  }\n  \n  .chips-container {\n    gap: 4px;\n  }\n  \n  .chip {\n    font-size: 11px;\n    padding: 5px 8px;\n  }\n  \n  .price-container {\n    padding: 10px;\n    gap: 10px;\n  }\n  \n  .price-item .value {\n    font-size: 13px;\n  }\n}\n\n@media (max-width: 480px) {\n  .lightbox-image-container img {\n    max-width: 95vw;\n    max-height: 95vh;\n  }\n  \n  .chips-container {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .chip {\n    font-size: 10px;\n  }\n  \n  .price-container {\n    grid-template-columns: 1fr;\n    gap: 8px;\n  }\n}\n\n/* ===============================\n   VISUAL PLACEHOLDER STYLES\n   =============================== */\n\n/* Product Image Placeholder */\n.product-image-placeholder {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: linear-gradient(135deg, #F0F4FF 0%, #E8F1FF 50%, #D6E8FF 100%);\n  border-radius: var(--radius) var(--radius) 0 0;\n  overflow: hidden;\n}\n\n.placeholder-pattern {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-image: \n    radial-gradient(circle at 20px 20px, rgba(59, 130, 246, 0.1) 2px, transparent 2px),\n    radial-gradient(circle at 60px 60px, rgba(99, 102, 241, 0.08) 2px, transparent 2px);\n  background-size: 80px 80px, 120px 120px;\n  animation: patternMove 20s linear infinite;\n}\n\n@keyframes patternMove {\n  0% { transform: translateX(0) translateY(0); }\n  100% { transform: translateX(80px) translateY(80px); }\n}\n\n.placeholder-content {\n  position: relative;\n  z-index: 2;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n  color: #6B7280;\n  font-weight: 500;\n}\n\n.placeholder-content i {\n  font-size: 2rem;\n  color: #9CA3AF;\n}\n\n.placeholder-content span {\n  font-size: 12px;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n/* Cover Placeholder for Product Form */\n.cover-placeholder {\n  width: 100%;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: var(--bg);\n  border: 2px dashed #D1D5DB;\n  border-radius: var(--radius);\n  transition: all 0.3s ease;\n}\n\n.cover-placeholder:hover {\n  border-color: var(--primary);\n  background: rgba(37, 99, 235, 0.05);\n}\n\n.placeholder-visual {\n  position: relative;\n  width: 120px;\n  height: 80px;\n  margin-bottom: 16px;\n  background: linear-gradient(135deg, #F8FAFC 0%, #F1F5F9 50%, #E2E8F0 100%);\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n\n.cover-placeholder .placeholder-pattern {\n  background-image: \n    linear-gradient(45deg, rgba(59, 130, 246, 0.03) 25%, transparent 25%),\n    linear-gradient(-45deg, rgba(59, 130, 246, 0.03) 25%, transparent 25%),\n    linear-gradient(45deg, transparent 75%, rgba(59, 130, 246, 0.03) 75%),\n    linear-gradient(-45deg, transparent 75%, rgba(59, 130, 246, 0.03) 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n}\n\n.placeholder-icon {\n  position: relative;\n  z-index: 2;\n  font-size: 24px;\n  color: #9CA3AF;\n}\n\n.placeholder-text {\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--muted);\n  text-align: center;\n}\n\n/* Hover effects */\n.product-image-container:hover .product-image-placeholder {\n  background: linear-gradient(135deg, #EEF2FF 0%, #E0E7FF 50%, #C7D2FE 100%);\n}\n\n.product-image-container:hover .placeholder-content i {\n  color: var(--primary);\n  transform: scale(1.1);\n  transition: all 0.2s ease;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .placeholder-visual {\n    width: 100px;\n    height: 70px;\n  }\n  \n  .placeholder-icon {\n    font-size: 20px;\n  }\n  \n  .placeholder-content i {\n    font-size: 1.5rem;\n  }\n}\n\n/* ===== FILTER PANEL STYLES ===== */\n\n/* Filter Panel - Centered Modal Design */\n.filter-panel {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0.9);\n  width: 90vw;\n  max-width: 500px;\n  max-height: 85vh;\n  background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  border: 1px solid rgba(226, 232, 240, 0.8);\n  box-shadow: \n    0 25px 50px -12px rgba(0, 0, 0, 0.25),\n    0 0 0 1px rgba(255, 255, 255, 0.5);\n  z-index: 50;\n  opacity: 0;\n  visibility: hidden;\n  transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  border-radius: 20px;\n}\n\n.filter-panel.open {\n  transform: translate(-50%, -50%) scale(1);\n  opacity: 1;\n  visibility: visible;\n  box-shadow: \n    0 25px 50px -12px rgba(0, 0, 0, 0.4),\n    0 0 0 1px rgba(255, 255, 255, 0.8);\n}\n\n/* Filter Overlay - Premium backdrop */\n.filter-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: linear-gradient(135deg, \n    rgba(0, 0, 0, 0.4) 0%, \n    rgba(0, 0, 0, 0.6) 50%, \n    rgba(0, 0, 0, 0.5) 100%);\n  backdrop-filter: blur(8px);\n  -webkit-backdrop-filter: blur(8px);\n  z-index: 40;\n  opacity: 0;\n  visibility: hidden;\n  transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);\n}\n\n.filter-overlay.show {\n  opacity: 1;\n  visibility: visible;\n}\n\n/* Filter Header - Modern glass design */\n.filter-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px 28px;\n  border-bottom: 1px solid rgba(226, 232, 240, 0.6);\n  background: linear-gradient(135deg, \n    rgba(255, 255, 255, 0.95) 0%, \n    rgba(248, 250, 252, 0.9) 100%);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  border-radius: 20px 20px 0 0;\n}\n\n.filter-header h3 {\n  margin: 0;\n  font-size: 1.25rem;\n  font-weight: 700;\n  background: linear-gradient(135deg, #1F2937 0%, #374151 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.filter-header h3::before {\n  content: \"üîç\";\n  font-size: 1.1rem;\n  filter: grayscale(1);\n}\n\n.filter-close-btn {\n  background: rgba(239, 68, 68, 0.1);\n  border: 1px solid rgba(239, 68, 68, 0.2);\n  font-size: 1.1rem;\n  color: #dc2626;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\n  position: relative;\n  overflow: hidden;\n}\n\n.filter-close-btn::before {\n  content: '';\n  position: absolute;\n  inset: 0;\n  background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(220, 38, 38, 0.2));\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.filter-close-btn:hover {\n  background: rgba(239, 68, 68, 0.15);\n  border-color: rgba(239, 68, 68, 0.4);\n  transform: scale(1.05);\n  box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);\n}\n\n.filter-close-btn:hover::before {\n  opacity: 1;\n}\n\n.filter-close-btn:active {\n  transform: scale(0.95);\n}\n\n/* Filter Content - Enhanced */\n.filter-content {\n  flex: 1;\n  padding: 28px 28px 120px 28px;\n  overflow-y: auto;\n  background: linear-gradient(to bottom, transparent 0%, rgba(248, 250, 252, 0.3) 100%);\n}\n\n.filter-section {\n  margin-bottom: 32px;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.7);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.6);\n  border-radius: 16px;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.04);\n  transition: all 0.3s ease;\n}\n\n.filter-section:hover {\n  background: rgba(255, 255, 255, 0.85);\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);\n  transform: translateY(-1px);\n}\n\n.filter-section:last-child {\n  margin-bottom: 0;\n}\n\n.filter-section-title {\n  font-size: 0.9rem;\n  font-weight: 700;\n  background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  margin: 0 0 16px 0;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.filter-section-title::before {\n  content: \"‚ñ∂\";\n  font-size: 0.7rem;\n  background: linear-gradient(135deg, #6366f1, #8b5cf6);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Form Controls - Premium Design */\n.form-group {\n  position: relative;\n  margin-bottom: 18px;\n}\n\n.form-control {\n  width: 100%;\n  padding: 14px 16px;\n  border: 2px solid rgba(226, 232, 240, 0.6);\n  border-radius: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.form-control:focus {\n  outline: none;\n  border-color: #6366f1;\n  background: rgba(255, 255, 255, 1);\n  box-shadow: \n    0 0 0 4px rgba(99, 102, 241, 0.1),\n    0 4px 16px rgba(99, 102, 241, 0.15);\n  transform: translateY(-2px);\n}\n\n.form-control:hover {\n  border-color: rgba(99, 102, 241, 0.4);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n}\n\n.form-control::placeholder {\n  color: #9ca3af;\n  font-weight: 400;\n}\n\n/* Search Input - Enhanced */\n.search-icon {\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #9ca3af;\n  font-size: 16px;\n  pointer-events: none;\n  transition: all 0.3s ease;\n}\n\n.form-group:has(.form-control:focus) .search-icon {\n  color: #6366f1;\n  transform: translateY(-50%) scale(1.1);\n}\n\n.form-group:has(.form-control:hover) .search-icon {\n  color: #6366f1;\n}\n\n/* Radio Group */\n.radio-group {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-sm);\n}\n\n.radio-item {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  cursor: pointer;\n  padding: var(--spacing-sm);\n  border-radius: var(--radius-sm);\n  transition: all 0.2s ease;\n}\n\n.radio-item:hover {\n  background: rgba(37, 99, 235, 0.05);\n}\n\n/* Visually hidden but accessible to screen readers */\n.visually-hidden {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n.radio-item input[type=\"radio\"] {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n.radio-mark {\n  width: 16px;\n  height: 16px;\n  border: 2px solid var(--border);\n  border-radius: 50%;\n  position: relative;\n  transition: all 0.2s ease;\n  flex-shrink: 0;\n}\n\n.radio-item input[type=\"radio\"]:checked + .radio-mark {\n  border-color: var(--primary);\n  background: var(--primary);\n}\n\n.radio-item input[type=\"radio\"]:focus + .radio-mark {\n  outline: 2px solid var(--primary);\n  outline-offset: 2px;\n}\n\n.radio-item input[type=\"radio\"]:checked + .radio-mark::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 6px;\n  height: 6px;\n  background: white;\n  border-radius: 50%;\n}\n\n/* Price Range Groups */\n.price-range-group {\n  margin-bottom: var(--spacing-lg);\n}\n\n.price-range-group:last-child {\n  margin-bottom: 0;\n}\n\n/* Price Range Header with Currency Selector */\n.price-range-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: var(--spacing-sm);\n  gap: var(--spacing-sm);\n}\n\n.price-range-label {\n  display: block;\n  font-size: 0.75rem;\n  font-weight: 500;\n  color: var(--muted);\n  margin-bottom: 0;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  flex-shrink: 0;\n}\n\n/* Currency Select Dropdown */\n.currency-select {\n  width: auto;\n  min-width: 120px;\n  padding: 6px 8px;\n  font-size: 11px;\n  font-weight: 600;\n  border: 1px solid var(--border);\n  border-radius: 6px;\n  background: white;\n  color: var(--primary);\n  transition: all 0.2s ease;\n}\n\n.currency-select:focus {\n  border-color: var(--primary);\n  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);\n}\n\n/* Filter Hint */\n.filter-hint {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--spacing-xs);\n  padding: var(--spacing-sm);\n  background: #F0F9FF;\n  border: 1px solid #BAE6FD;\n  border-radius: 6px;\n  font-size: 11px;\n  color: #0C4A6E;\n  margin-top: var(--spacing-md);\n}\n\n.filter-hint i {\n  color: #0EA5E9;\n  font-size: 12px;\n  margin-top: 1px;\n  flex-shrink: 0;\n}\n\n.price-inputs {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n}\n\n.price-input {\n  flex: 1;\n  padding: 8px 10px;\n  font-size: 13px;\n}\n\n.price-separator {\n  color: var(--muted);\n  font-weight: 500;\n  flex-shrink: 0;\n}\n\n/* Attributes Accordion */\n.attributes-accordion {\n  display: flex;\n  flex-direction: column;\n}\n\n.accordion-item {\n  border: 1px solid var(--border);\n  border-radius: var(--radius-sm);\n  margin-bottom: var(--spacing-xs);\n  overflow: hidden;\n}\n\n.accordion-item:last-child {\n  margin-bottom: 0;\n}\n\n.accordion-toggle {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-md);\n  background: white;\n  border: none;\n  font-size: 14px;\n  font-weight: 500;\n  color: #374151;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.accordion-toggle:hover {\n  background: var(--bg);\n}\n\n.accordion-toggle i {\n  font-size: 12px;\n  color: var(--muted);\n  transition: transform 0.2s ease;\n}\n\n.accordion-toggle.active i {\n  transform: rotate(180deg);\n}\n\n.accordion-content {\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.3s ease;\n  background: #FAFBFC;\n}\n\n.accordion-content.open {\n  max-height: 300px;\n  border-top: 1px solid var(--border);\n}\n\n/* Checkbox Group */\n.checkbox-group {\n  padding: var(--spacing-md);\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-xs);\n}\n\n.checkbox-item {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n  font-size: 13px;\n}\n\n.checkbox-item:hover {\n  background: rgba(37, 99, 235, 0.05);\n}\n\n.checkbox-item input[type=\"checkbox\"] {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n.checkbox-mark {\n  width: 14px;\n  height: 14px;\n  border: 1px solid var(--border);\n  border-radius: 3px;\n  position: relative;\n  transition: all 0.2s ease;\n  flex-shrink: 0;\n}\n\n.checkbox-item input[type=\"checkbox\"]:checked + .checkbox-mark {\n  border-color: var(--primary);\n  background: var(--primary);\n}\n\n.checkbox-item input[type=\"checkbox\"]:focus + .checkbox-mark {\n  outline: 2px solid var(--primary);\n  outline-offset: 2px;\n}\n\n.checkbox-item input[type=\"checkbox\"]:checked + .checkbox-mark::after {\n  content: '‚úì';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;\n  font-size: 10px;\n  font-weight: 600;\n}\n\n/* Filter Actions */\n/* Filter Actions - Premium Design */\n.filter-actions {\n  position: sticky;\n  bottom: 0;\n  padding: 24px 28px;\n  background: linear-gradient(135deg, \n    rgba(255, 255, 255, 0.95) 0%, \n    rgba(248, 250, 252, 0.95) 100%);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  border-top: 1px solid rgba(226, 232, 240, 0.6);\n  display: flex;\n  gap: 16px;\n  box-shadow: 0 -8px 32px rgba(0, 0, 0, 0.08);\n  border-radius: 0 0 20px 0;\n}\n\n.filter-actions .btn {\n  flex: 1;\n  font-size: 14px;\n  font-weight: 600;\n  padding: 14px 20px;\n  border-radius: 12px;\n  border: 2px solid transparent;\n  transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\n  position: relative;\n  overflow: hidden;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n/* Clear Filters Button */\n.filter-actions .btn-outline {\n  background: rgba(239, 68, 68, 0.1);\n  color: #dc2626;\n  border-color: rgba(239, 68, 68, 0.3);\n}\n\n.filter-actions .btn-outline:hover {\n  background: rgba(239, 68, 68, 0.15);\n  border-color: #dc2626;\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(239, 68, 68, 0.3);\n}\n\n/* Apply Filters Button */\n.filter-actions .btn-primary {\n  background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);\n  color: white;\n  border-color: transparent;\n  box-shadow: 0 4px 16px rgba(99, 102, 241, 0.3);\n}\n\n.filter-actions .btn-primary:hover {\n  background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);\n  transform: translateY(-3px);\n  box-shadow: 0 12px 24px rgba(99, 102, 241, 0.4);\n}\n\n.filter-actions .btn-primary:active {\n  transform: translateY(-1px);\n  box-shadow: 0 6px 16px rgba(99, 102, 241, 0.35);\n}\n\n/* Active Filters Count Badge */\n#activeFiltersCount {\n  font-size: 10px;\n  padding: 2px 6px;\n  border-radius: 10px;\n  min-width: 16px;\n  text-align: center;\n}\n\n/* Content Body Adjustment */\n.content-body.filter-open {\n  margin-left: 320px;\n  transition: margin-left 0.3s ease;\n}\n\n/* Active Filters Styles */\n.active-filters-container {\n  margin-top: var(--spacing-md);\n  padding: var(--spacing-md);\n  background: #F8FAFC;\n  border-radius: var(--radius-sm);\n  border: 1px solid #E2E8F0;\n}\n\n.active-filters-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-sm);\n}\n\n.active-filter-tag {\n  background: var(--primary);\n  color: white;\n  padding: 4px 8px;\n  border-radius: 16px;\n  font-size: 0.8rem;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-xs);\n}\n\n.active-filter-tag button {\n  background: none;\n  border: none;\n  color: white;\n  cursor: pointer;\n  padding: 2px;\n  border-radius: 50%;\n  width: 16px;\n  height: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background 0.2s ease;\n}\n\n.active-filter-tag button:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n/* Filter Actions Layout */\n.filter-actions {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-md);\n  align-items: center;\n  justify-content: space-between;\n  margin-top: var(--spacing-lg);\n}\n\n.filter-actions .export-section {\n  margin: 0;\n  justify-content: flex-end;\n}\n\n/* Enhanced Table Styles */\n.table-row {\n  transition: all 0.2s ease;\n}\n\n.table-row:hover {\n  background: #F8FAFC;\n  transform: translateY(-1px);\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n/* No Results State */\n.no-results-state {\n  text-align: center;\n  padding: var(--spacing-xl);\n  color: var(--muted);\n}\n\n.no-results-state i {\n  font-size: 3rem;\n  margin-bottom: var(--spacing-md);\n  opacity: 0.5;\n}\n\n.no-results-state h3 {\n  margin: 0 0 var(--spacing-sm) 0;\n  font-size: 1.2rem;\n  font-weight: 600;\n}\n\n/* Animation classes */\n.animate-bounce {\n  animation: bounce 0.3s ease;\n}\n\n@keyframes bounce {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n}\n\n/* Loading states */\n.loading {\n  opacity: 0.6;\n  pointer-events: none;\n}\n\n.loading::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 20px;\n  height: 20px;\n  margin: -10px 0 0 -10px;\n  border: 2px solid #f3f3f3;\n  border-top: 2px solid var(--primary);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Responsive Design for Centered Modal */\n@media (max-width: 1200px) {\n  .filter-panel {\n    width: 95vw;\n    max-width: 450px;\n  }\n}\n\n@media (max-width: 768px) {\n  .filter-panel {\n    width: 95vw;\n    max-width: 400px;\n    max-height: 90vh;\n  }\n  \n  .filter-panel.open {\n    transform: translate(-50%, -50%) scale(1);\n  }\n  \n  .filter-header {\n    padding: var(--spacing-md);\n  }\n  \n  .filter-content {\n    padding: var(--spacing-md);\n  }\n  \n  .filter-actions {\n    padding: var(--spacing-md);\n  }\n  \n  .filter-actions .btn {\n    font-size: 14px;\n    padding: 12px 16px;\n  }\n}\n\n@media (max-width: 480px) {\n  .price-range-header {\n    flex-direction: column;\n    align-items: stretch;\n    gap: var(--spacing-xs);\n  }\n  \n  .currency-select {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n@media (max-width: 360px) {\n  .filter-panel {\n    width: 98vw;\n    max-height: 95vh;\n  }\n  \n  .price-inputs {\n    flex-direction: column;\n    gap: var(--spacing-xs);\n  }\n  \n  .price-separator {\n    display: none;\n  }\n}\n\n/* ===== ACTIVE FILTER CHIPS STYLES ===== */\n\n.active-filters-section {\n  background: white;\n  border-radius: var(--radius);\n  padding: var(--spacing-md);\n  margin-bottom: var(--spacing-lg);\n  border: 1px solid var(--border);\n  box-shadow: var(--shadow);\n}\n\n.active-filters-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: var(--spacing-sm);\n}\n\n.active-filters-title {\n  font-size: 1rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0;\n}\n\n.clear-all-filters {\n  font-size: 13px;\n  padding: 6px 12px;\n  border-radius: var(--radius-sm);\n}\n\n.active-filters-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-xs);\n}\n\n.filter-chip {\n  display: inline-flex;\n  align-items: center;\n  background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);\n  border: 1px solid #d1d5db;\n  border-radius: var(--radius);\n  padding: 6px 8px 6px 12px;\n  font-size: 13px;\n  font-weight: 500;\n  color: #374151;\n  max-width: 280px;\n  transition: all 0.2s ease;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n}\n\n.filter-chip:hover {\n  background: linear-gradient(135deg, #e5e7eb 0%, #d1d5db 100%);\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n  transform: translateY(-1px);\n}\n\n.filter-chip-label {\n  flex-grow: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-right: var(--spacing-xs);\n  line-height: 1.2;\n}\n\n.filter-chip-remove {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 18px;\n  height: 18px;\n  border: none;\n  background: rgba(239, 68, 68, 0.1);\n  color: #dc2626;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  flex-shrink: 0;\n  font-size: 10px;\n}\n\n.filter-chip-remove:hover {\n  background: #dc2626;\n  color: white;\n  transform: scale(1.1);\n}\n\n.filter-chip-remove i {\n  font-size: 9px;\n  line-height: 1;\n}\n\n@media (max-width: 768px) {\n  .active-filters-section {\n    margin: 0 var(--spacing-md) var(--spacing-lg);\n    padding: var(--spacing-sm);\n  }\n  \n  .active-filters-header {\n    flex-direction: column;\n    align-items: stretch;\n    gap: var(--spacing-xs);\n  }\n  \n  .clear-all-filters {\n    align-self: flex-end;\n    width: auto;\n  }\n  \n  .filter-chip {\n    max-width: 100%;\n    font-size: 12px;\n    padding: 5px 6px 5px 10px;\n  }\n  \n  .filter-chip-remove {\n    width: 16px;\n    height: 16px;\n    font-size: 9px;\n  }\n}\n\n/* ===== PRODUCT FORM AUTOCOMPLETE & VALIDATION STYLES ===== */\n\n/* Autocomplete Dropdown Styles */\n.autocomplete-wrapper {\n  position: relative;\n}\n\n.autocomplete-dropdown {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  right: 0;\n  background: white;\n  border: 1px solid var(--border);\n  border-top: none;\n  border-radius: 0 0 8px 8px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);\n  z-index: 1000;\n  max-height: 220px;\n  overflow-y: auto;\n}\n\n.autocomplete-item {\n  padding: 12px 16px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  border-bottom: 1px solid #f3f4f6;\n  transition: all 0.2s ease;\n  font-size: 14px;\n}\n\n.autocomplete-item:hover,\n.autocomplete-item.selected {\n  background: #f8faff;\n  color: var(--primary);\n}\n\n.autocomplete-item i {\n  color: #9ca3af;\n  font-size: 14px;\n  min-width: 16px;\n}\n\n.autocomplete-item:hover i,\n.autocomplete-item.selected i {\n  color: var(--primary);\n}\n\n.autocomplete-loading,\n.autocomplete-error,\n.autocomplete-empty {\n  padding: 12px 16px;\n  color: #6b7280;\n  font-style: italic;\n  text-align: center;\n  font-size: 14px;\n  border-bottom: none;\n}\n\n.autocomplete-loading i {\n  margin-right: 8px;\n  animation: spin 1s linear infinite;\n}\n\n.autocomplete-error {\n  color: var(--danger);\n}\n\n.autocomplete-header {\n  padding: 8px 16px;\n  background: #f8f9fa;\n  border-bottom: 1px solid #e9ecef;\n  font-weight: 600;\n  font-size: 12px;\n  color: var(--primary);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.autocomplete-header i {\n  color: #ffc107;\n}\n\n/* Enhanced Autocomplete Item Styles */\n.autocomplete-item.main-item {\n  background: #f8f9fa;\n  font-weight: 600;\n  border-left: 3px solid var(--primary);\n  padding: 14px 16px;\n}\n\n.autocomplete-item.main-item:hover {\n  background: #e3f2fd;\n}\n\n.autocomplete-item.variant-item {\n  padding: 10px 16px 10px 32px;\n  background: #fafbfc;\n  border-left: 2px solid #e5e7eb;\n  font-size: 13px;\n  cursor: default;\n}\n\n.autocomplete-item.variant-item:hover {\n  background: #f5f6fa;\n}\n\n.item-content {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n}\n\n.item-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.product-name {\n  font-weight: 600;\n  color: var(--text);\n}\n\n.variant-count {\n  font-size: 12px;\n  color: var(--muted);\n  background: #e5e7eb;\n  padding: 2px 6px;\n  border-radius: 10px;\n  margin-left: auto;\n}\n\n.variant-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex-wrap: wrap;\n}\n\n.variant-info .attributes {\n  color: var(--text);\n  font-weight: 500;\n  flex: 1;\n  min-width: 150px;\n}\n\n.variant-info .price {\n  color: var(--primary);\n  font-weight: 600;\n  background: #e3f2fd;\n  padding: 2px 8px;\n  border-radius: 12px;\n  font-size: 12px;\n}\n\n.variant-info .status {\n  padding: 2px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n.variant-info .status.status-active {\n  background: #d4edda;\n  color: #155724;\n}\n\n.variant-info .status.status-inactive {\n  background: #f8d7da;\n  color: #721c24;\n}\n\n.variant-actions {\n  margin-left: auto;\n  display: flex;\n  gap: 4px;\n}\n\n.variant-action-btn {\n  background: none;\n  border: 1px solid #dee2e6;\n  border-radius: 4px;\n  padding: 4px 6px;\n  cursor: pointer;\n  color: var(--muted);\n  transition: all 0.2s ease;\n  font-size: 12px;\n}\n\n.variant-action-btn:hover {\n  background: var(--primary);\n  color: white;\n  border-color: var(--primary);\n}\n\n.variant-action-btn.edit-btn:hover {\n  background: #28a745;\n  border-color: #28a745;\n}\n\n/* Duplicate Warning Styles */\n.duplicate-warning {\n  display: none;\n  align-items: center;\n  gap: 10px;\n  padding: 12px 16px;\n  margin-top: 8px;\n  background: #fef3c7;\n  color: #92400e;\n  border: 1px solid #f59e0b;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.duplicate-warning i {\n  color: #f59e0b;\n  font-size: 16px;\n  min-width: 16px;\n}\n\n.duplicate-edit-link {\n  margin-left: auto;\n  color: var(--primary);\n  text-decoration: none;\n  font-weight: 600;\n  white-space: nowrap;\n}\n\n.duplicate-edit-link:hover {\n  text-decoration: underline;\n}\n\n/* Validation Message Styles */\n.validation-message {\n  display: none;\n  align-items: center;\n  gap: 10px;\n  padding: 12px 16px;\n  margin-top: 12px;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.validation-message.validation-error {\n  background: #fef2f2;\n  color: #dc2626;\n  border: 1px solid #fca5a5;\n}\n\n.validation-message.validation-error i {\n  color: #dc2626;\n  min-width: 16px;\n}\n\n.validation-message.validation-success {\n  background: #f0fdf4;\n  color: #16a34a;\n  border: 1px solid #86efac;\n}\n\n.validation-message.validation-success i {\n  color: #16a34a;\n  min-width: 16px;\n}\n\n/* Validation Summary Styles */\n.validation-summary {\n  padding: 16px 20px;\n  margin-bottom: 24px;\n  border-radius: 8px;\n  border: 1px solid #fca5a5;\n  animation: slideInDown 0.3s ease;\n}\n\n.validation-summary.validation-error {\n  background: #fef2f2;\n  color: #dc2626;\n}\n\n.validation-header {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 12px;\n}\n\n.validation-header i {\n  color: #dc2626;\n  font-size: 18px;\n  min-width: 18px;\n}\n\n.validation-errors {\n  margin: 0;\n  padding-left: 20px;\n  list-style-type: disc;\n}\n\n.validation-errors li {\n  margin: 6px 0;\n  color: #991b1b;\n  font-weight: 500;\n}\n\n/* Form Field Error States */\n.form-control.error {\n  border-color: #dc2626;\n  box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);\n}\n\n.form-control.error:focus {\n  border-color: #dc2626;\n  box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);\n}\n\n/* Success States */\n.form-control.success {\n  border-color: #16a34a;\n  box-shadow: 0 0 0 3px rgba(22, 163, 74, 0.1);\n}\n\n.form-control.success:focus {\n  border-color: #16a34a;\n  box-shadow: 0 0 0 3px rgba(22, 163, 74, 0.1);\n}\n\n/* Slide in animation for validation summary */\n@keyframes slideInDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Enhanced stock badge to accommodate units */\n.stock-badge {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: var(--spacing-md);\n  font-weight: 600;\n  font-size: 14px;\n  white-space: nowrap;\n}\n\n/* ===== LABEL DESIGNER STYLES ===== */\n\n/* Label Designer Container */\n.label-designer-container {\n  display: flex;\n  gap: 24px;\n  height: calc(100vh - 160px);\n  min-height: 600px;\n}\n\n/* Template List Panel */\n.label-templates-panel {\n  flex: 0 0 280px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n/* Canvas Panel */\n.label-canvas-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n/* Fields Panel */\n.label-fields-panel {\n  flex: 0 0 280px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n/* Canvas Container */\n.canvas-container {\n  flex: 1;\n  position: relative;\n  background: #f8f9fa;\n  border: 2px dashed #dee2e6;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: auto;\n  padding: 20px;\n  min-height: 300px;\n}\n\n/* Canvas Grid */\n.canvas-grid {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  opacity: 0.3;\n}\n\n/* Label Canvas */\n.label-canvas {\n  position: relative;\n  background: white;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n  border-radius: 4px;\n  overflow: visible;\n  min-width: 240px;\n  min-height: 160px;\n}\n\n/* Canvas Controls */\n.canvas-controls {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.canvas-dimensions {\n  font-size: 12px;\n  color: var(--muted);\n  margin-left: 8px;\n  font-weight: 500;\n}\n\n/* Draggable Fields */\n.draggable-fields {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.field-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 16px;\n  background: white;\n  border: 1px solid var(--border);\n  border-radius: 8px;\n  cursor: grab;\n  transition: all 0.2s ease;\n  user-select: none;\n}\n\n.field-item:hover {\n  background: #f8f9fa;\n  border-color: var(--primary);\n  transform: translateY(-1px);\n  box-shadow: 0 2px 8px rgba(37, 99, 235, 0.15);\n}\n\n.field-item:active {\n  cursor: grabbing;\n  transform: translateY(0);\n}\n\n.field-item i {\n  color: var(--primary);\n  width: 16px;\n  text-align: center;\n}\n\n.field-item span {\n  font-weight: 500;\n  color: #374151;\n}\n\n/* Label Elements */\n.label-element {\n  position: absolute;\n  border: 1px dashed #ccc;\n  background: rgba(37, 99, 235, 0.1);\n  cursor: move;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 10px;\n  color: #666;\n  user-select: none;\n  transition: all 0.2s ease;\n  z-index: 10;\n  min-width: 20px;\n  min-height: 10px;\n}\n\n.label-element:hover {\n  border-color: var(--primary);\n  background: rgba(37, 99, 235, 0.15);\n}\n\n.label-element.selected {\n  border: 2px solid var(--primary) !important;\n  background: rgba(37, 99, 235, 0.2) !important;\n  z-index: 100;\n}\n\n.label-element i {\n  margin-right: 4px;\n  font-size: 10px;\n}\n\n/* Resize Handles */\n.resize-handle {\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: var(--primary);\n  border: 1px solid white;\n  border-radius: 2px;\n  z-index: 101;\n}\n\n.resize-handle:hover {\n  background: #1d4ed8;\n  transform: scale(1.2);\n}\n\n.resize-nw {\n  top: -4px;\n  left: -4px;\n  cursor: nw-resize;\n}\n\n.resize-ne {\n  top: -4px;\n  right: -4px;\n  cursor: ne-resize;\n}\n\n.resize-sw {\n  bottom: -4px;\n  left: -4px;\n  cursor: sw-resize;\n}\n\n.resize-se {\n  bottom: -4px;\n  right: -4px;\n  cursor: se-resize;\n}\n\n/* Template List */\n.template-item {\n  padding: 16px;\n  background: white;\n  border: 1px solid var(--border);\n  border-radius: 8px;\n  transition: all 0.2s ease;\n}\n\n.template-item:hover {\n  border-color: var(--primary);\n  box-shadow: 0 2px 8px rgba(37, 99, 235, 0.1);\n}\n\n.template-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 8px;\n}\n\n.template-name {\n  font-size: 14px;\n  font-weight: 600;\n  color: #111827;\n  margin: 0;\n}\n\n.template-info {\n  display: flex;\n  gap: 12px;\n  margin-bottom: 12px;\n  font-size: 12px;\n  color: var(--muted);\n}\n\n.template-actions {\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n\n/* Drop Zones */\n.canvas-container.drag-over {\n  border-color: var(--primary);\n  background: rgba(37, 99, 235, 0.05);\n}\n\n.canvas-container.drag-over .label-canvas {\n  background: rgba(37, 99, 235, 0.02);\n}\n\n/* Empty State */\n.empty-state {\n  text-align: center;\n  color: var(--muted);\n  font-style: italic;\n  padding: 24px;\n  background: #f8f9fa;\n  border-radius: 8px;\n  border: 1px dashed #dee2e6;\n}\n\n/* Properties Panel Animations */\n#elementProperties {\n  animation: slideInRight 0.3s ease;\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n/* Drag Visual Feedback */\n.field-item.dragging {\n  opacity: 0.5;\n  transform: rotate(5deg);\n}\n\n/* Grid Snap Visual */\n.canvas-container.snapping {\n  background: rgba(34, 197, 94, 0.05);\n}\n\n/* Touch Support */\n@media (pointer: coarse) {\n  .resize-handle {\n    width: 12px;\n    height: 12px;\n  }\n  \n  .field-item {\n    padding: 16px 20px;\n  }\n  \n  .label-element {\n    min-width: 30px;\n    min-height: 20px;\n  }\n}\n\n/* Responsive Layout */\n@media (max-width: 1200px) {\n  .label-designer-container {\n    flex-direction: column;\n    height: auto;\n    gap: 16px;\n  }\n  \n  .label-templates-panel,\n  .label-fields-panel {\n    flex: none;\n    order: 1;\n  }\n  \n  .label-canvas-panel {\n    order: 2;\n    min-height: 400px;\n  }\n}\n\n@media (max-width: 768px) {\n  .label-designer-container {\n    gap: 12px;\n  }\n  \n  .canvas-container {\n    padding: 16px;\n    min-height: 300px;\n  }\n  \n  .label-canvas {\n    min-width: 180px;\n    min-height: 120px;\n  }\n  \n  .template-actions {\n    justify-content: center;\n  }\n  \n  .field-item {\n    padding: 14px 16px;\n    font-size: 14px;\n  }\n}\n\n/* High DPI Support */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {\n  .label-canvas {\n    image-rendering: -webkit-optimize-contrast;\n    image-rendering: crisp-edges;\n  }\n  \n  .resize-handle {\n    border-width: 0.5px;\n  }\n}","size_bytes":85596},"public/js/labelDesigner.js":{"content":"// Label Designer JavaScript\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('StockIn.JS loading');\n    if (document.getElementById('labelCanvas')) {\n        console.log('DOM Content Loaded - StockIn.JS initializing');\n        initLabelDesigner();\n    }\n});\n\n// Global variables for label designer\nlet currentTemplate = null;\nlet selectedElement = null;\nlet isDragging = false;\nlet isResizing = false;\nlet dragOffset = { x: 0, y: 0 };\nlet resizeHandle = null;\nlet canvasScale = 1;\nlet gridSize = 5; // 5mm grid\nlet templates = [];\n\n// Initialize Label Designer\nfunction initLabelDesigner() {\n    console.log('Form action cleared');\n    \n    // Get DOM elements\n    const canvas = document.getElementById('labelCanvas');\n    const templateList = document.getElementById('templateList');\n    const draggableFields = document.getElementById('draggableFields');\n    const templateName = document.getElementById('templateName');\n    const templateWidth = document.getElementById('templateWidth');\n    const templateHeight = document.getElementById('templateHeight');\n    \n    if (!canvas || !templateList || !draggableFields) {\n        console.error('Required elements not found');\n        return;\n    }\n\n    // Initialize notification styles\n    addNotificationStyles();\n    \n    // Initialize canvas settings\n    setupCanvas();\n    \n    // Load existing templates\n    loadTemplates();\n    \n    // Setup event listeners\n    setupEventListeners();\n    \n    // Setup drag and drop\n    setupDragAndDrop();\n    \n    // Setup toolbar actions\n    setupToolbarActions();\n    \n    // Setup canvas controls\n    setupCanvasControls();\n    \n    // Add import/export buttons to toolbar\n    addImportExportButtons();\n    \n    console.log('Label Designer initialized successfully');\n}\n\n// Add import/export buttons to toolbar\nfunction addImportExportButtons() {\n    const toolbar = document.querySelector('.toolbar-actions');\n    if (!toolbar) return;\n    \n    // Add export button\n    const exportBtn = document.createElement('button');\n    exportBtn.type = 'button';\n    exportBtn.className = 'btn btn-outline';\n    exportBtn.innerHTML = '<i class=\"fas fa-download\"></i> Export';\n    exportBtn.setAttribute('data-testid', 'button-export-template');\n    exportBtn.addEventListener('click', exportTemplate);\n    \n    // Add import button\n    const importBtn = document.createElement('button');\n    importBtn.type = 'button';\n    importBtn.className = 'btn btn-outline';\n    importBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Import';\n    importBtn.setAttribute('data-testid', 'button-import-template');\n    importBtn.addEventListener('click', importTemplate);\n    \n    // Insert before the back button\n    const backBtn = toolbar.querySelector('[data-testid=\"button-back-to-settings\"]');\n    if (backBtn) {\n        toolbar.insertBefore(exportBtn, backBtn);\n        toolbar.insertBefore(importBtn, backBtn);\n    } else {\n        toolbar.appendChild(importBtn);\n        toolbar.appendChild(exportBtn);\n    }\n}\n\n// Setup Canvas\nfunction setupCanvas() {\n    const canvas = document.getElementById('labelCanvas');\n    const canvasContainer = document.getElementById('canvasContainer');\n    const grid = document.getElementById('canvasGrid');\n    \n    // Initial canvas size (60mm x 40mm default)\n    updateCanvasSize(60, 40);\n    \n    // Setup canvas styles\n    canvas.style.position = 'relative';\n    canvas.style.border = '2px solid var(--primary)';\n    canvas.style.borderRadius = '4px';\n    canvas.style.backgroundColor = '#ffffff';\n    canvas.style.overflow = 'hidden';\n    \n    // Setup grid\n    drawGrid();\n}\n\n// Update canvas size based on template dimensions\nfunction updateCanvasSize(width, height) {\n    const canvas = document.getElementById('labelCanvas');\n    const dimensionsSpan = document.getElementById('canvasDimensions');\n    \n    // Convert mm to pixels (at 96 DPI: 1mm = 3.78px, but we'll use 4px for easier calculation)\n    const pixelWidth = width * 4 * canvasScale;\n    const pixelHeight = height * 4 * canvasScale;\n    \n    canvas.style.width = pixelWidth + 'px';\n    canvas.style.height = pixelHeight + 'px';\n    \n    // Update data attributes for calculations\n    canvas.dataset.widthMm = width;\n    canvas.dataset.heightMm = height;\n    \n    // Update dimensions display\n    if (dimensionsSpan) {\n        dimensionsSpan.textContent = `${width}mm x ${height}mm`;\n    }\n    \n    // Redraw grid\n    drawGrid();\n}\n\n// Draw grid on canvas\nfunction drawGrid() {\n    const canvas = document.getElementById('labelCanvas');\n    const grid = document.getElementById('canvasGrid');\n    \n    if (!canvas || !grid) return;\n    \n    const width = parseInt(canvas.dataset.widthMm) || 60;\n    const height = parseInt(canvas.dataset.heightMm) || 40;\n    \n    // Clear existing grid\n    grid.innerHTML = '';\n    \n    // Grid container setup\n    grid.style.position = 'absolute';\n    grid.style.top = '0';\n    grid.style.left = '0';\n    grid.style.width = '100%';\n    grid.style.height = '100%';\n    grid.style.pointerEvents = 'none';\n    grid.style.zIndex = '1';\n    \n    // Create grid pattern using CSS\n    grid.style.backgroundImage = `\n        linear-gradient(to right, rgba(0,0,0,0.1) 1px, transparent 1px),\n        linear-gradient(to bottom, rgba(0,0,0,0.1) 1px, transparent 1px)\n    `;\n    grid.style.backgroundSize = `${gridSize * 4 * canvasScale}px ${gridSize * 4 * canvasScale}px`;\n}\n\n// Load templates from server\nasync function loadTemplates() {\n    try {\n        const response = await fetch('/api/labels');\n        if (response.ok) {\n            templates = await response.json();\n            renderTemplateList();\n        } else {\n            console.error('Failed to load templates');\n        }\n    } catch (error) {\n        console.error('Error loading templates:', error);\n    }\n}\n\n// Render template list in sidebar\nfunction renderTemplateList() {\n    const templateList = document.getElementById('templateList');\n    if (!templateList) return;\n    \n    templateList.innerHTML = '';\n    \n    if (templates.length === 0) {\n        templateList.innerHTML = '<div class=\"empty-state\">No templates found. Create your first template!</div>';\n        return;\n    }\n    \n    templates.forEach(template => {\n        const templateItem = document.createElement('div');\n        templateItem.className = 'template-item';\n        templateItem.dataset.testid = `template-${template.id}`;\n        templateItem.innerHTML = `\n            <div class=\"template-header\">\n                <h4 class=\"template-name\">${escapeHtml(template.name)}</h4>\n                ${template.isDefault ? '<span class=\"badge badge-success\">Default</span>' : ''}\n            </div>\n            <div class=\"template-info\">\n                <span class=\"template-size\">${template.width}mm √ó ${template.height}mm</span>\n                <span class=\"template-elements\">${(template.elements || []).length} elements</span>\n            </div>\n            <div class=\"template-actions\">\n                <button type=\"button\" class=\"btn btn-sm btn-primary\" onclick=\"loadTemplate('${template.id}')\" data-testid=\"button-load-template-${template.id}\">\n                    <i class=\"fas fa-edit\"></i> Load\n                </button>\n                <button type=\"button\" class=\"btn btn-sm btn-outline\" onclick=\"duplicateTemplate('${template.id}')\" data-testid=\"button-duplicate-template-${template.id}\">\n                    <i class=\"fas fa-copy\"></i> Duplicate\n                </button>\n                <button type=\"button\" class=\"btn btn-sm btn-danger\" onclick=\"deleteTemplate('${template.id}')\" data-testid=\"button-delete-template-${template.id}\">\n                    <i class=\"fas fa-trash\"></i> Delete\n                </button>\n            </div>\n        `;\n        templateList.appendChild(templateItem);\n    });\n}\n\n// Load a template for editing\nasync function loadTemplate(templateId) {\n    try {\n        const response = await fetch(`/api/labels/${templateId}`);\n        if (response.ok) {\n            currentTemplate = await response.json();\n            renderTemplate();\n            \n            // Update form fields\n            document.getElementById('templateName').value = currentTemplate.name || '';\n            document.getElementById('templateWidth').value = currentTemplate.width || 60;\n            document.getElementById('templateHeight').value = currentTemplate.height || 40;\n            \n            // Update canvas size\n            updateCanvasSize(currentTemplate.width || 60, currentTemplate.height || 40);\n            \n            // Show save button\n            document.getElementById('saveTemplateBtn').style.display = 'inline-flex';\n            \n            console.log('Template loaded:', currentTemplate);\n        } else {\n            console.error('Failed to load template');\n        }\n    } catch (error) {\n        console.error('Error loading template:', error);\n    }\n}\n\n// Render template elements on canvas\nfunction renderTemplate() {\n    const canvas = document.getElementById('labelCanvas');\n    if (!canvas || !currentTemplate) return;\n    \n    // Clear existing elements\n    const existingElements = canvas.querySelectorAll('.label-element');\n    existingElements.forEach(el => el.remove());\n    \n    // Render each element\n    if (currentTemplate.elements && Array.isArray(currentTemplate.elements)) {\n        currentTemplate.elements.forEach((element, index) => {\n            createElementOnCanvas(element, index);\n        });\n    }\n    \n    // Mark as having unsaved changes\n    hasUnsavedChanges = true;\n    resetAutoSaveTimer();\n}\n\n// Create element on canvas\nfunction createElementOnCanvas(elementData, elementIndex) {\n    const canvas = document.getElementById('labelCanvas');\n    if (!canvas) return;\n    \n    const element = document.createElement('div');\n    element.className = 'label-element';\n    element.dataset.type = elementData.type;\n    element.dataset.field = elementData.field;\n    element.dataset.index = elementIndex;\n    element.dataset.testid = `element-${elementData.field}-${elementIndex}`;\n    \n    // Position and size (convert mm to pixels)\n    const x = (elementData.x || 0) * 4 * canvasScale;\n    const y = (elementData.y || 0) * 4 * canvasScale;\n    const width = (elementData.width || 20) * 4 * canvasScale;\n    const height = (elementData.height || 10) * 4 * canvasScale;\n    \n    element.style.position = 'absolute';\n    element.style.left = x + 'px';\n    element.style.top = y + 'px';\n    element.style.width = width + 'px';\n    element.style.height = height + 'px';\n    element.style.border = '1px dashed #ccc';\n    element.style.backgroundColor = 'rgba(37, 99, 235, 0.1)';\n    element.style.cursor = 'move';\n    element.style.zIndex = '10';\n    element.style.display = 'flex';\n    element.style.alignItems = 'center';\n    element.style.justifyContent = 'center';\n    element.style.fontSize = '10px';\n    element.style.color = '#666';\n    element.style.userSelect = 'none';\n    \n    // Element content based on type\n    let content = '';\n    switch (elementData.type) {\n        case 'text':\n            content = `<i class=\"fas fa-font\"></i> ${elementData.field}`;\n            break;\n        case 'barcode':\n            content = `<i class=\"fas fa-barcode\"></i> Barcode`;\n            break;\n        case 'image':\n            content = `<i class=\"fas fa-image\"></i> Image`;\n            break;\n        default:\n            content = elementData.field;\n    }\n    \n    element.innerHTML = content;\n    \n    // Add event listeners for selection and dragging\n    element.addEventListener('mousedown', handleElementMouseDown);\n    element.addEventListener('click', handleElementClick);\n    element.addEventListener('touchstart', handleElementTouchStart, { passive: false });\n    \n    canvas.appendChild(element);\n}\n\n// Setup drag and drop functionality\nfunction setupDragAndDrop() {\n    const draggableFields = document.getElementById('draggableFields');\n    const canvas = document.getElementById('labelCanvas');\n    \n    if (!draggableFields || !canvas) return;\n    \n    // Make fields draggable\n    const fieldItems = draggableFields.querySelectorAll('.field-item');\n    fieldItems.forEach(item => {\n        item.addEventListener('dragstart', handleDragStart);\n        item.addEventListener('dragend', handleDragEnd);\n        \n        // Add touch support for field items\n        item.addEventListener('touchstart', handleFieldTouchStart, { passive: false });\n        item.addEventListener('touchmove', handleFieldTouchMove, { passive: false });\n        item.addEventListener('touchend', handleFieldTouchEnd, { passive: false });\n    });\n    \n    // Setup canvas drop zone\n    canvas.addEventListener('dragover', handleDragOver);\n    canvas.addEventListener('drop', handleDrop);\n    \n    // Setup element dragging within canvas (mouse)\n    canvas.addEventListener('mousemove', handleCanvasMouseMove);\n    canvas.addEventListener('mouseup', handleCanvasMouseUp);\n    canvas.addEventListener('mouseleave', handleCanvasMouseUp);\n    \n    // Setup element dragging within canvas (touch)\n    canvas.addEventListener('touchmove', handleCanvasTouchMove, { passive: false });\n    canvas.addEventListener('touchend', handleCanvasTouchEnd, { passive: false });\n}\n\n// Handle drag start\nfunction handleDragStart(e) {\n    const fieldType = e.target.dataset.field;\n    const elementType = e.target.dataset.type;\n    \n    e.dataTransfer.setData('text/plain', JSON.stringify({\n        field: fieldType,\n        type: elementType\n    }));\n    \n    e.dataTransfer.effectAllowed = 'copy';\n    \n    // Add visual feedback\n    e.target.style.opacity = '0.5';\n}\n\n// Handle drag end\nfunction handleDragEnd(e) {\n    e.target.style.opacity = '1';\n}\n\n// Handle drag over canvas\nfunction handleDragOver(e) {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n    \n    // Add visual feedback to canvas\n    const canvas = e.currentTarget;\n    canvas.style.backgroundColor = 'rgba(37, 99, 235, 0.05)';\n}\n\n// Handle drop on canvas\nfunction handleDrop(e) {\n    e.preventDefault();\n    \n    const canvas = e.currentTarget;\n    canvas.style.backgroundColor = '#ffffff';\n    \n    try {\n        const data = JSON.parse(e.dataTransfer.getData('text/plain'));\n        const rect = canvas.getBoundingClientRect();\n        \n        // Calculate drop position in mm (snap to grid)\n        const pixelX = e.clientX - rect.left;\n        const pixelY = e.clientY - rect.top;\n        const mmX = Math.round((pixelX / (4 * canvasScale)) / gridSize) * gridSize;\n        const mmY = Math.round((pixelY / (4 * canvasScale)) / gridSize) * gridSize;\n        \n        // Create new element data\n        const newElement = createNewElement(data.type, data.field, mmX, mmY);\n        \n        // Add to current template\n        if (!currentTemplate) {\n            // Create new template if none exists\n            currentTemplate = {\n                name: 'New Template',\n                width: 60,\n                height: 40,\n                elements: [],\n                isDefault: false\n            };\n        }\n        \n        if (!currentTemplate.elements) {\n            currentTemplate.elements = [];\n        }\n        \n        currentTemplate.elements.push(newElement);\n        \n        // Re-render template\n        renderTemplate();\n        \n        // Show save button\n        document.getElementById('saveTemplateBtn').style.display = 'inline-flex';\n        \n        console.log('Element dropped:', newElement);\n        \n    } catch (error) {\n        console.error('Error handling drop:', error);\n    }\n}\n\n// Create new element data structure\nfunction createNewElement(type, field, x, y) {\n    const baseElement = {\n        type: type,\n        field: field,\n        x: Math.max(0, x),\n        y: Math.max(0, y)\n    };\n    \n    // Default properties based on type\n    switch (type) {\n        case 'text':\n            return {\n                ...baseElement,\n                width: 30,\n                height: 8,\n                fontSize: 12,\n                bold: false,\n                align: 'left'\n            };\n        case 'barcode':\n            return {\n                ...baseElement,\n                width: 40,\n                height: 10\n            };\n        case 'image':\n            return {\n                ...baseElement,\n                width: 15,\n                height: 15\n            };\n        default:\n            return {\n                ...baseElement,\n                width: 20,\n                height: 10\n            };\n    }\n}\n\n// Handle element click for selection\nfunction handleElementClick(e) {\n    e.stopPropagation();\n    selectElement(e.currentTarget);\n    hasUnsavedChanges = true;\n    resetAutoSaveTimer();\n}\n\n// Handle element mouse down for dragging\nfunction handleElementMouseDown(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const element = e.currentTarget;\n    selectElement(element);\n    \n    // Check if clicking on resize handle\n    const target = e.target;\n    if (target.classList.contains('resize-handle')) {\n        startResize(e, target.dataset.handle);\n        return;\n    }\n    \n    // Start element dragging\n    startElementDrag(e, element);\n}\n\n// Handle element touch start for dragging\nfunction handleElementTouchStart(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (e.touches.length !== 1) return; // Only handle single touch\n    \n    const touch = e.touches[0];\n    const element = e.currentTarget;\n    selectElement(element);\n    \n    // Check if touching resize handle\n    const target = document.elementFromPoint(touch.clientX, touch.clientY);\n    if (target && target.classList.contains('resize-handle')) {\n        startResize({ clientX: touch.clientX, clientY: touch.clientY }, target.dataset.handle);\n        return;\n    }\n    \n    // Start element dragging\n    startElementDrag({ clientX: touch.clientX, clientY: touch.clientY }, element);\n}\n\n// Start element dragging\nfunction startElementDrag(e, element) {\n    isDragging = true;\n    selectedElement = element;\n    \n    const rect = element.getBoundingClientRect();\n    dragOffset.x = e.clientX - rect.left;\n    dragOffset.y = e.clientY - rect.top;\n    \n    element.style.zIndex = '100';\n    document.body.style.userSelect = 'none';\n    \n    console.log('Started dragging element');\n}\n\n// Handle canvas mouse move (for dragging and resizing)\nfunction handleCanvasMouseMove(e) {\n    if (isDragging && selectedElement) {\n        moveElement(e);\n    } else if (isResizing && selectedElement) {\n        resizeElement(e);\n    }\n}\n\n// Move element\nfunction moveElement(e) {\n    if (!selectedElement) return;\n    \n    const canvas = document.getElementById('labelCanvas');\n    const canvasRect = canvas.getBoundingClientRect();\n    \n    // Calculate new position in pixels\n    let pixelX = e.clientX - canvasRect.left - dragOffset.x;\n    let pixelY = e.clientY - canvasRect.top - dragOffset.y;\n    \n    // Convert to mm and snap to grid\n    let mmX = Math.round((pixelX / (4 * canvasScale)) / gridSize) * gridSize;\n    let mmY = Math.round((pixelY / (4 * canvasScale)) / gridSize) * gridSize;\n    \n    // Ensure element stays within canvas bounds\n    const canvasWidth = parseInt(canvas.dataset.widthMm) || 60;\n    const canvasHeight = parseInt(canvas.dataset.heightMm) || 40;\n    const elementIndex = parseInt(selectedElement.dataset.index);\n    const elementData = currentTemplate.elements[elementIndex];\n    \n    mmX = Math.max(0, Math.min(mmX, canvasWidth - (elementData.width || 20)));\n    mmY = Math.max(0, Math.min(mmY, canvasHeight - (elementData.height || 10)));\n    \n    // Update element position\n    selectedElement.style.left = (mmX * 4 * canvasScale) + 'px';\n    selectedElement.style.top = (mmY * 4 * canvasScale) + 'px';\n    \n    // Update element data\n    if (currentTemplate && currentTemplate.elements && currentTemplate.elements[elementIndex]) {\n        currentTemplate.elements[elementIndex].x = mmX;\n        currentTemplate.elements[elementIndex].y = mmY;\n        \n        // Update properties panel if shown\n        const elementX = document.getElementById('elementX');\n        const elementY = document.getElementById('elementY');\n        if (elementX) elementX.value = mmX;\n        if (elementY) elementY.value = mmY;\n        \n        hasUnsavedChanges = true;\n        resetAutoSaveTimer();\n    }\n}\n\n// Handle canvas mouse up (stop dragging/resizing)\nfunction handleCanvasMouseUp(e) {\n    if (isDragging) {\n        isDragging = false;\n        document.body.style.userSelect = 'auto';\n        if (selectedElement) {\n            selectedElement.style.zIndex = '10';\n        }\n        console.log('Stopped dragging element');\n    }\n    \n    if (isResizing) {\n        isResizing = false;\n        resizeHandle = null;\n        document.body.style.userSelect = 'auto';\n        console.log('Stopped resizing element');\n    }\n}\n\n// Select element\nfunction selectElement(element) {\n    // Remove previous selection\n    const previousSelected = document.querySelector('.label-element.selected');\n    if (previousSelected) {\n        previousSelected.classList.remove('selected');\n        removeResizeHandles(previousSelected);\n    }\n    \n    // Select new element\n    selectedElement = element;\n    element.classList.add('selected');\n    element.style.border = '2px solid var(--primary)';\n    element.style.backgroundColor = 'rgba(37, 99, 235, 0.2)';\n    \n    // Add resize handles\n    addResizeHandles(element);\n    \n    // Update properties panel\n    updatePropertiesPanel(element);\n    \n    console.log('Element selected:', element.dataset.field);\n}\n\n// Add resize handles to selected element\nfunction addResizeHandles(element) {\n    const handles = ['nw', 'ne', 'sw', 'se'];\n    \n    handles.forEach(handle => {\n        const handleElement = document.createElement('div');\n        handleElement.className = `resize-handle resize-${handle}`;\n        handleElement.dataset.handle = handle;\n        handleElement.dataset.testid = `resize-handle-${handle}`;\n        \n        // Handle styles\n        handleElement.style.position = 'absolute';\n        handleElement.style.width = '8px';\n        handleElement.style.height = '8px';\n        handleElement.style.backgroundColor = 'var(--primary)';\n        handleElement.style.border = '1px solid #fff';\n        handleElement.style.borderRadius = '2px';\n        handleElement.style.zIndex = '101';\n        \n        // Position handles\n        switch (handle) {\n            case 'nw':\n                handleElement.style.top = '-4px';\n                handleElement.style.left = '-4px';\n                handleElement.style.cursor = 'nw-resize';\n                break;\n            case 'ne':\n                handleElement.style.top = '-4px';\n                handleElement.style.right = '-4px';\n                handleElement.style.cursor = 'ne-resize';\n                break;\n            case 'sw':\n                handleElement.style.bottom = '-4px';\n                handleElement.style.left = '-4px';\n                handleElement.style.cursor = 'sw-resize';\n                break;\n            case 'se':\n                handleElement.style.bottom = '-4px';\n                handleElement.style.right = '-4px';\n                handleElement.style.cursor = 'se-resize';\n                break;\n        }\n        \n        // Add event listeners\n        handleElement.addEventListener('mousedown', (e) => {\n            e.stopPropagation();\n            startResize(e, handle);\n        });\n        \n        element.appendChild(handleElement);\n    });\n}\n\n// Remove resize handles\nfunction removeResizeHandles(element) {\n    const handles = element.querySelectorAll('.resize-handle');\n    handles.forEach(handle => handle.remove());\n}\n\n// Start resize operation\nfunction startResize(e, handle) {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    isResizing = true;\n    resizeHandle = handle;\n    \n    document.body.style.userSelect = 'none';\n    \n    console.log('Started resizing element:', handle);\n}\n\n// Resize element\nfunction resizeElement(e) {\n    if (!selectedElement || !resizeHandle) return;\n    \n    const canvas = document.getElementById('labelCanvas');\n    const canvasRect = canvas.getBoundingClientRect();\n    const elementIndex = parseInt(selectedElement.dataset.index);\n    const elementData = currentTemplate.elements[elementIndex];\n    \n    if (!elementData) return;\n    \n    // Get current element rect\n    const currentRect = selectedElement.getBoundingClientRect();\n    \n    // Calculate mouse position relative to canvas\n    const mouseX = e.clientX - canvasRect.left;\n    const mouseY = e.clientY - canvasRect.top;\n    \n    // Calculate new dimensions based on handle\n    let newWidth = elementData.width;\n    let newHeight = elementData.height;\n    let newX = elementData.x;\n    let newY = elementData.y;\n    \n    switch (resizeHandle) {\n        case 'se':\n            newWidth = Math.max(5, Math.round((mouseX / (4 * canvasScale)) / gridSize) * gridSize - elementData.x);\n            newHeight = Math.max(5, Math.round((mouseY / (4 * canvasScale)) / gridSize) * gridSize - elementData.y);\n            break;\n        case 'sw':\n            const newRightX = Math.max(5, Math.round((mouseX / (4 * canvasScale)) / gridSize) * gridSize);\n            newWidth = Math.max(5, (elementData.x + elementData.width) - newRightX);\n            newHeight = Math.max(5, Math.round((mouseY / (4 * canvasScale)) / gridSize) * gridSize - elementData.y);\n            newX = newRightX;\n            break;\n        case 'ne':\n            newWidth = Math.max(5, Math.round((mouseX / (4 * canvasScale)) / gridSize) * gridSize - elementData.x);\n            const newBottomY = Math.max(5, Math.round((mouseY / (4 * canvasScale)) / gridSize) * gridSize);\n            newHeight = Math.max(5, (elementData.y + elementData.height) - newBottomY);\n            newY = newBottomY;\n            break;\n        case 'nw':\n            const newRightX2 = Math.max(5, Math.round((mouseX / (4 * canvasScale)) / gridSize) * gridSize);\n            const newBottomY2 = Math.max(5, Math.round((mouseY / (4 * canvasScale)) / gridSize) * gridSize);\n            newWidth = Math.max(5, (elementData.x + elementData.width) - newRightX2);\n            newHeight = Math.max(5, (elementData.y + elementData.height) - newBottomY2);\n            newX = newRightX2;\n            newY = newBottomY2;\n            break;\n    }\n    \n    // Ensure element stays within canvas bounds\n    const canvasWidth = parseInt(canvas.dataset.widthMm) || 60;\n    const canvasHeight = parseInt(canvas.dataset.heightMm) || 40;\n    \n    if (newX + newWidth > canvasWidth) {\n        newWidth = canvasWidth - newX;\n    }\n    if (newY + newHeight > canvasHeight) {\n        newHeight = canvasHeight - newY;\n    }\n    \n    // Update element style\n    selectedElement.style.left = (newX * 4 * canvasScale) + 'px';\n    selectedElement.style.top = (newY * 4 * canvasScale) + 'px';\n    selectedElement.style.width = (newWidth * 4 * canvasScale) + 'px';\n    selectedElement.style.height = (newHeight * 4 * canvasScale) + 'px';\n    \n    // Update element data\n    elementData.x = newX;\n    elementData.y = newY;\n    elementData.width = newWidth;\n    elementData.height = newHeight;\n    \n    // Update properties panel\n    updatePropertiesPanel(selectedElement);\n}\n\n// Update properties panel\nfunction updatePropertiesPanel(element) {\n    const propertiesPanel = document.getElementById('elementProperties');\n    const propertiesContent = document.getElementById('propertiesContent');\n    \n    if (!propertiesPanel || !propertiesContent) return;\n    \n    const elementIndex = parseInt(element.dataset.index);\n    const elementData = currentTemplate.elements[elementIndex];\n    \n    if (!elementData) return;\n    \n    // Show properties panel\n    propertiesPanel.style.display = 'block';\n    \n    // Generate properties form based on element type\n    let propertiesHTML = `\n        <div class=\"form-group\">\n            <label class=\"form-label\">Position</label>\n            <div class=\"form-grid form-grid-2\">\n                <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"elementX\">X (mm)</label>\n                    <input type=\"number\" id=\"elementX\" class=\"form-control\" value=\"${elementData.x}\" min=\"0\" data-testid=\"input-element-x\">\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"elementY\">Y (mm)</label>\n                    <input type=\"number\" id=\"elementY\" class=\"form-control\" value=\"${elementData.y}\" min=\"0\" data-testid=\"input-element-y\">\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label class=\"form-label\">Size</label>\n            <div class=\"form-grid form-grid-2\">\n                <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"elementWidth\">Width (mm)</label>\n                    <input type=\"number\" id=\"elementWidth\" class=\"form-control\" value=\"${elementData.width}\" min=\"5\" data-testid=\"input-element-width\">\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"elementHeight\">Height (mm)</label>\n                    <input type=\"number\" id=\"elementHeight\" class=\"form-control\" value=\"${elementData.height}\" min=\"5\" data-testid=\"input-element-height\">\n                </div>\n            </div>\n        </div>\n    `;\n    \n    // Add type-specific properties\n    if (elementData.type === 'text') {\n        propertiesHTML += `\n            <div class=\"form-group\">\n                <label class=\"form-label\" for=\"elementFontSize\">Font Size</label>\n                <input type=\"number\" id=\"elementFontSize\" class=\"form-control\" value=\"${elementData.fontSize || 12}\" min=\"6\" max=\"72\" data-testid=\"input-element-font-size\">\n            </div>\n            <div class=\"form-group\">\n                <label class=\"form-label\" for=\"elementAlign\">Alignment</label>\n                <select id=\"elementAlign\" class=\"form-control\" data-testid=\"select-element-align\">\n                    <option value=\"left\" ${elementData.align === 'left' ? 'selected' : ''}>Left</option>\n                    <option value=\"center\" ${elementData.align === 'center' ? 'selected' : ''}>Center</option>\n                    <option value=\"right\" ${elementData.align === 'right' ? 'selected' : ''}>Right</option>\n                </select>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"checkbox-wrapper\">\n                    <input type=\"checkbox\" id=\"elementBold\" ${elementData.bold ? 'checked' : ''} data-testid=\"checkbox-element-bold\">\n                    <label for=\"elementBold\">Bold</label>\n                </div>\n            </div>\n        `;\n    }\n    \n    propertiesContent.innerHTML = propertiesHTML;\n    \n    // Add event listeners to property inputs\n    addPropertyEventListeners(elementIndex);\n}\n\n// Add event listeners to property inputs\nfunction addPropertyEventListeners(elementIndex) {\n    const inputs = ['elementX', 'elementY', 'elementWidth', 'elementHeight', 'elementFontSize', 'elementAlign', 'elementBold'];\n    \n    inputs.forEach(inputId => {\n        const input = document.getElementById(inputId);\n        if (input) {\n            input.addEventListener('input', () => updateElementProperty(elementIndex, inputId, input));\n            input.addEventListener('change', () => updateElementProperty(elementIndex, inputId, input));\n        }\n    });\n}\n\n// Update element property\nfunction updateElementProperty(elementIndex, inputId, input) {\n    const elementData = currentTemplate.elements[elementIndex];\n    const element = selectedElement;\n    \n    if (!elementData || !element) return;\n    \n    let value = input.type === 'checkbox' ? input.checked : \n                input.type === 'number' ? parseFloat(input.value) || 0 : input.value;\n    \n    switch (inputId) {\n        case 'elementX':\n            elementData.x = Math.max(0, value);\n            element.style.left = (elementData.x * 4 * canvasScale) + 'px';\n            break;\n        case 'elementY':\n            elementData.y = Math.max(0, value);\n            element.style.top = (elementData.y * 4 * canvasScale) + 'px';\n            break;\n        case 'elementWidth':\n            elementData.width = Math.max(5, value);\n            element.style.width = (elementData.width * 4 * canvasScale) + 'px';\n            break;\n        case 'elementHeight':\n            elementData.height = Math.max(5, value);\n            element.style.height = (elementData.height * 4 * canvasScale) + 'px';\n            break;\n        case 'elementFontSize':\n            elementData.fontSize = Math.max(6, Math.min(72, value));\n            break;\n        case 'elementAlign':\n            elementData.align = value;\n            break;\n        case 'elementBold':\n            elementData.bold = value;\n            break;\n    }\n    \n    console.log('Property updated:', inputId, value);\n}\n\n// Setup event listeners\nfunction setupEventListeners() {\n    // Template form inputs\n    const templateWidth = document.getElementById('templateWidth');\n    const templateHeight = document.getElementById('templateHeight');\n    \n    if (templateWidth) {\n        templateWidth.addEventListener('input', () => {\n            const width = parseInt(templateWidth.value) || 60;\n            updateCanvasSize(width, parseInt(templateHeight.value) || 40);\n            if (currentTemplate) {\n                currentTemplate.width = width;\n            }\n        });\n    }\n    \n    if (templateHeight) {\n        templateHeight.addEventListener('input', () => {\n            const height = parseInt(templateHeight.value) || 40;\n            updateCanvasSize(parseInt(templateWidth.value) || 60, height);\n            if (currentTemplate) {\n                currentTemplate.height = height;\n            }\n        });\n    }\n    \n    // Canvas click (deselect elements)\n    const canvas = document.getElementById('labelCanvas');\n    if (canvas) {\n        canvas.addEventListener('click', (e) => {\n            if (e.target === canvas) {\n                deselectElement();\n            }\n        });\n    }\n    \n    // Delete key\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Delete' && selectedElement) {\n            deleteSelectedElement();\n        }\n    });\n}\n\n// Deselect element\nfunction deselectElement() {\n    if (selectedElement) {\n        selectedElement.classList.remove('selected');\n        selectedElement.style.border = '1px dashed #ccc';\n        selectedElement.style.backgroundColor = 'rgba(37, 99, 235, 0.1)';\n        removeResizeHandles(selectedElement);\n        selectedElement = null;\n        \n        // Hide properties panel\n        const propertiesPanel = document.getElementById('elementProperties');\n        if (propertiesPanel) {\n            propertiesPanel.style.display = 'none';\n        }\n    }\n}\n\n// Delete selected element\nfunction deleteSelectedElement() {\n    if (!selectedElement || !currentTemplate) return;\n    \n    const elementIndex = parseInt(selectedElement.dataset.index);\n    \n    // Remove from template data\n    currentTemplate.elements.splice(elementIndex, 1);\n    \n    // Re-render template\n    renderTemplate();\n    \n    // Hide properties panel\n    const propertiesPanel = document.getElementById('elementProperties');\n    if (propertiesPanel) {\n        propertiesPanel.style.display = 'none';\n    }\n    \n    selectedElement = null;\n    \n    console.log('Element deleted');\n}\n\n// Setup toolbar actions\nfunction setupToolbarActions() {\n    // New template button\n    const newTemplateBtn = document.getElementById('newTemplateBtn');\n    if (newTemplateBtn) {\n        newTemplateBtn.addEventListener('click', createNewTemplate);\n    }\n    \n    // Save template button\n    const saveTemplateBtn = document.getElementById('saveTemplateBtn');\n    if (saveTemplateBtn) {\n        saveTemplateBtn.addEventListener('click', showSaveModal);\n    }\n    \n    // Preview button\n    const previewBtn = document.getElementById('previewBtn');\n    if (previewBtn) {\n        previewBtn.addEventListener('click', showPreviewModal);\n    }\n    \n    // Delete element button\n    const deleteElementBtn = document.getElementById('deleteElementBtn');\n    if (deleteElementBtn) {\n        deleteElementBtn.addEventListener('click', deleteSelectedElement);\n    }\n    \n    // Print preview button\n    const printPreview = document.getElementById('printPreview');\n    if (printPreview) {\n        printPreview.addEventListener('click', handlePrintPreview);\n    }\n    \n    // Template dimension change listeners for auto-save\n    const templateWidth = document.getElementById('templateWidth');\n    const templateHeight = document.getElementById('templateHeight');\n    const templateName = document.getElementById('templateName');\n    \n    if (templateWidth) {\n        templateWidth.addEventListener('change', handleTemplateChange);\n    }\n    \n    if (templateHeight) {\n        templateHeight.addEventListener('change', handleTemplateChange);\n    }\n    \n    if (templateName) {\n        templateName.addEventListener('input', handleTemplateChange);\n    }\n    \n    // Initialize auto-save\n    initializeAutoSave();\n}\n\n// Create new template\nfunction createNewTemplate() {\n    currentTemplate = {\n        name: 'New Template',\n        width: 60,\n        height: 40,\n        elements: [],\n        isDefault: false\n    };\n    \n    // Clear canvas\n    const canvas = document.getElementById('labelCanvas');\n    const existingElements = canvas.querySelectorAll('.label-element');\n    existingElements.forEach(el => el.remove());\n    \n    // Reset form\n    document.getElementById('templateName').value = 'New Template';\n    document.getElementById('templateWidth').value = 60;\n    document.getElementById('templateHeight').value = 40;\n    \n    // Update canvas\n    updateCanvasSize(60, 40);\n    \n    // Show save button\n    document.getElementById('saveTemplateBtn').style.display = 'inline-flex';\n    \n    // Hide properties panel\n    const propertiesPanel = document.getElementById('elementProperties');\n    if (propertiesPanel) {\n        propertiesPanel.style.display = 'none';\n    }\n    \n    console.log('New template created');\n}\n\n// Show save modal\nfunction showSaveModal() {\n    if (!currentTemplate) return;\n    \n    const modal = document.getElementById('templateModal');\n    const modalTemplateName = document.getElementById('modalTemplateName');\n    \n    if (modal && modalTemplateName) {\n        modalTemplateName.value = currentTemplate.name || 'New Template';\n        modal.style.display = 'flex';\n        modalTemplateName.focus();\n    }\n}\n\n// Setup canvas controls\nfunction setupCanvasControls() {\n    const zoomInBtn = document.getElementById('zoomInBtn');\n    const zoomOutBtn = document.getElementById('zoomOutBtn');\n    const fitToScreenBtn = document.getElementById('fitToScreenBtn');\n    \n    if (zoomInBtn) {\n        zoomInBtn.addEventListener('click', () => {\n            canvasScale = Math.min(3, canvasScale * 1.2);\n            updateCanvasSize(currentTemplate?.width || 60, currentTemplate?.height || 40);\n            renderTemplate();\n        });\n    }\n    \n    if (zoomOutBtn) {\n        zoomOutBtn.addEventListener('click', () => {\n            canvasScale = Math.max(0.3, canvasScale * 0.8);\n            updateCanvasSize(currentTemplate?.width || 60, currentTemplate?.height || 40);\n            renderTemplate();\n        });\n    }\n    \n    if (fitToScreenBtn) {\n        fitToScreenBtn.addEventListener('click', () => {\n            canvasScale = 1;\n            updateCanvasSize(currentTemplate?.width || 60, currentTemplate?.height || 40);\n            renderTemplate();\n        });\n    }\n}\n\n// Duplicate template\nasync function duplicateTemplate(templateId) {\n    try {\n        const response = await fetch(`/api/labels/${templateId}`);\n        if (response.ok) {\n            const template = await response.json();\n            \n            // Create duplicate with new name\n            const duplicatedTemplate = {\n                ...template,\n                id: undefined, // Let server generate new ID\n                name: template.name + ' (Copy)',\n                isDefault: false\n            };\n            \n            // Save the duplicated template\n            const saveResponse = await fetch('/api/labels', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(duplicatedTemplate)\n            });\n            \n            if (saveResponse.ok) {\n                // Reload templates\n                await loadTemplates();\n                console.log('Template duplicated successfully');\n            } else {\n                console.error('Failed to duplicate template');\n            }\n        } else {\n            console.error('Failed to load template for duplication');\n        }\n    } catch (error) {\n        console.error('Error duplicating template:', error);\n    }\n}\n\n// Delete template\nasync function deleteTemplate(templateId) {\n    if (!confirm('Are you sure you want to delete this template?')) {\n        return;\n    }\n    \n    try {\n        const response = await fetch(`/api/labels/${templateId}`, {\n            method: 'DELETE'\n        });\n        \n        if (response.ok) {\n            // Reload templates\n            await loadTemplates();\n            \n            // If currently loaded template was deleted, clear canvas\n            if (currentTemplate && currentTemplate.id === templateId) {\n                createNewTemplate();\n            }\n            \n            console.log('Template deleted successfully');\n        } else {\n            console.error('Failed to delete template');\n        }\n    } catch (error) {\n        console.error('Error deleting template:', error);\n    }\n}\n\n// Show preview modal with actual data rendering\nasync function showPreviewModal() {\n    if (!currentTemplate) {\n        showNotification('No template loaded to preview', 'warning');\n        return;\n    }\n    \n    const modal = document.getElementById('previewModal');\n    const previewContainer = document.getElementById('previewContainer');\n    \n    if (modal && previewContainer) {\n        try {\n            // Show loading state\n            previewContainer.innerHTML = '<div class=\"loading\">Generating preview...</div>';\n            modal.style.display = 'flex';\n            \n            // Get sample product data for preview\n            const sampleProduct = await getSampleProductData();\n            \n            // Generate preview with actual data\n            await renderLabelPreview(previewContainer, sampleProduct);\n            \n        } catch (error) {\n            console.error('Error generating preview:', error);\n            previewContainer.innerHTML = '<div class=\"error\">Error generating preview</div>';\n            showNotification('Failed to generate preview', 'error');\n        }\n    }\n}\n\n// Modal event listeners\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Save modal event listeners\n    const confirmSave = document.getElementById('confirmSave');\n    const cancelModal = document.getElementById('cancelModal');\n    const closeModal = document.getElementById('closeModal');\n    const templateModal = document.getElementById('templateModal');\n    \n    if (confirmSave) {\n        confirmSave.addEventListener('click', saveTemplate);\n    }\n    \n    if (cancelModal) {\n        cancelModal.addEventListener('click', () => {\n            templateModal.style.display = 'none';\n        });\n    }\n    \n    if (closeModal) {\n        closeModal.addEventListener('click', () => {\n            templateModal.style.display = 'none';\n        });\n    }\n    \n    // Preview modal event listeners\n    const closePreviewModal = document.getElementById('closePreviewModal');\n    const previewModal = document.getElementById('previewModal');\n    \n    if (closePreviewModal) {\n        closePreviewModal.addEventListener('click', () => {\n            previewModal.style.display = 'none';\n        });\n    }\n});\n\n// Enhanced save template with validation and notifications\nasync function saveTemplate() {\n    if (!currentTemplate) {\n        showNotification('No template to save', 'warning');\n        return;\n    }\n    \n    const modalTemplateName = document.getElementById('modalTemplateName');\n    const setAsDefault = document.getElementById('setAsDefault');\n    \n    // Validate template data\n    const validation = validateTemplate({\n        name: modalTemplateName?.value?.trim() || '',\n        width: parseInt(document.getElementById('templateWidth').value) || 60,\n        height: parseInt(document.getElementById('templateHeight').value) || 40,\n        elements: currentTemplate.elements || []\n    });\n    \n    if (!validation.isValid) {\n        showNotification(validation.errors.join(', '), 'error');\n        return;\n    }\n    \n    // Show saving indicator\n    const confirmBtn = document.getElementById('confirmSave');\n    const originalText = confirmBtn.innerHTML;\n    confirmBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Saving...';\n    confirmBtn.disabled = true;\n    \n    try {\n        // Update template data\n        currentTemplate.name = modalTemplateName.value.trim();\n        currentTemplate.width = parseInt(document.getElementById('templateWidth').value) || 60;\n        currentTemplate.height = parseInt(document.getElementById('templateHeight').value) || 40;\n        \n        if (setAsDefault && setAsDefault.checked) {\n            currentTemplate.isDefault = true;\n        }\n        \n        let response;\n        \n        if (currentTemplate.id) {\n            // Update existing template\n            response = await fetch(`/api/labels/${currentTemplate.id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(currentTemplate)\n            });\n        } else {\n            // Create new template\n            response = await fetch('/api/labels', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(currentTemplate)\n            });\n        }\n        \n        if (response.ok) {\n            const savedTemplate = await response.json();\n            currentTemplate = savedTemplate;\n            \n            // Set as default if requested\n            if (setAsDefault && setAsDefault.checked) {\n                await fetch(`/api/labels/${savedTemplate.id}/default`, {\n                    method: 'POST'\n                });\n            }\n            \n            // Reload templates\n            await loadTemplates();\n            \n            // Close modal\n            document.getElementById('templateModal').style.display = 'none';\n            \n            // Show success notification\n            showNotification(`Template \"${savedTemplate.name}\" saved successfully!`, 'success');\n            \n            // Reset auto-save timer\n            resetAutoSaveTimer();\n            \n            console.log('Template saved successfully');\n        } else {\n            const errorData = await response.json();\n            showNotification(errorData.message || 'Failed to save template. Please try again.', 'error');\n        }\n    } catch (error) {\n        console.error('Error saving template:', error);\n        showNotification('Error saving template. Please try again.', 'error');\n    } finally {\n        // Reset button state\n        confirmBtn.innerHTML = originalText;\n        confirmBtn.disabled = false;\n    }\n}\n\n// Utility function to escape HTML\nfunction escapeHtml(text) {\n    if (typeof text !== 'string') {\n        text = String(text);\n    }\n    const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n    };\n    return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\n}\n\n// Auto-save functionality\nlet autoSaveTimer = null;\nlet hasUnsavedChanges = false;\n\nfunction initializeAutoSave() {\n    // Check for unsaved changes every 30 seconds\n    setInterval(() => {\n        if (hasUnsavedChanges && currentTemplate && currentTemplate.id) {\n            autoSaveTemplate();\n        }\n    }, 30000);\n}\n\nfunction handleTemplateChange() {\n    hasUnsavedChanges = true;\n    resetAutoSaveTimer();\n    \n    // Update canvas when dimensions change\n    const width = parseInt(document.getElementById('templateWidth').value) || 60;\n    const height = parseInt(document.getElementById('templateHeight').value) || 40;\n    \n    if (currentTemplate) {\n        currentTemplate.width = width;\n        currentTemplate.height = height;\n        updateCanvasSize(width, height);\n    }\n}\n\nfunction resetAutoSaveTimer() {\n    if (autoSaveTimer) {\n        clearTimeout(autoSaveTimer);\n    }\n    \n    // Auto-save after 5 seconds of inactivity\n    autoSaveTimer = setTimeout(() => {\n        if (hasUnsavedChanges && currentTemplate && currentTemplate.id) {\n            autoSaveTemplate();\n        }\n    }, 5000);\n}\n\nasync function autoSaveTemplate() {\n    if (!currentTemplate || !currentTemplate.id) return;\n    \n    try {\n        const templateData = {\n            ...currentTemplate,\n            name: document.getElementById('templateName').value || currentTemplate.name,\n            width: parseInt(document.getElementById('templateWidth').value) || currentTemplate.width,\n            height: parseInt(document.getElementById('templateHeight').value) || currentTemplate.height\n        };\n        \n        const response = await fetch(`/api/labels/${currentTemplate.id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(templateData)\n        });\n        \n        if (response.ok) {\n            hasUnsavedChanges = false;\n            showNotification('Template auto-saved', 'info', 2000);\n        }\n    } catch (error) {\n        console.error('Auto-save failed:', error);\n    }\n}\n\n// Print preview functionality\nfunction handlePrintPreview() {\n    if (!currentTemplate) {\n        showNotification('No template to print', 'warning');\n        return;\n    }\n    \n    // Create a new window for printing\n    const printWindow = window.open('', '_blank', 'width=800,height=600');\n    \n    printWindow.document.write(`\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Label Preview - ${escapeHtml(currentTemplate.name)}</title>\n            <style>\n                body { \n                    margin: 0; \n                    padding: 20px; \n                    font-family: Arial, sans-serif;\n                    background: #f5f5f5;\n                }\n                .print-container {\n                    background: white;\n                    padding: 20px;\n                    border-radius: 8px;\n                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n                    max-width: 800px;\n                    margin: 0 auto;\n                }\n                .label-preview {\n                    border: 2px solid #333;\n                    margin: 20px auto;\n                    background: white;\n                    position: relative;\n                }\n                .print-info {\n                    margin-bottom: 20px;\n                    padding: 10px;\n                    background: #f8f9fa;\n                    border-radius: 4px;\n                }\n                @media print {\n                    body { background: white; }\n                    .print-container { box-shadow: none; }\n                    .print-info { display: none; }\n                }\n                @page {\n                    margin: 0.5in;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"print-container\">\n                <div class=\"print-info\">\n                    <h2>Label Template: ${escapeHtml(currentTemplate.name)}</h2>\n                    <p>Dimensions: ${currentTemplate.width}mm √ó ${currentTemplate.height}mm</p>\n                    <p>Elements: ${currentTemplate.elements.length}</p>\n                    <p>Generated: ${new Date().toLocaleString()}</p>\n                    <button onclick=\"window.print()\">Print</button>\n                    <button onclick=\"window.close()\">Close</button>\n                </div>\n                <div id=\"labelContainer\"></div>\n            </div>\n        </body>\n        </html>\n    `);\n    \n    printWindow.document.close();\n    \n    // Render the label in the print window\n    const labelContainer = printWindow.document.getElementById('labelContainer');\n    \n    getSampleProductData().then(sampleData => {\n        renderPrintableLabel(labelContainer, currentTemplate, sampleData, printWindow);\n    });\n}\n\nasync function renderPrintableLabel(container, template, sampleData, printWindow) {\n    const scale = 3; // Higher scale for print quality\n    const pixelWidth = template.width * 4 * scale;\n    const pixelHeight = template.height * 4 * scale;\n    \n    const labelDiv = printWindow.document.createElement('div');\n    labelDiv.className = 'label-preview';\n    labelDiv.style.width = pixelWidth + 'px';\n    labelDiv.style.height = pixelHeight + 'px';\n    \n    container.appendChild(labelDiv);\n    \n    // Render elements\n    for (const element of template.elements) {\n        const elementDiv = printWindow.document.createElement('div');\n        elementDiv.style.position = 'absolute';\n        elementDiv.style.left = (element.x * 4 * scale) + 'px';\n        elementDiv.style.top = (element.y * 4 * scale) + 'px';\n        elementDiv.style.width = (element.width * 4 * scale) + 'px';\n        elementDiv.style.height = (element.height * 4 * scale) + 'px';\n        \n        if (element.type === 'text') {\n            const textValue = sampleData[element.field] || element.field;\n            const fontSize = (element.fontSize || 12) * scale;\n            \n            elementDiv.style.fontSize = fontSize + 'px';\n            elementDiv.style.fontWeight = element.bold ? 'bold' : 'normal';\n            elementDiv.style.fontStyle = element.italic ? 'italic' : 'normal';\n            elementDiv.style.textAlign = element.align || 'left';\n            elementDiv.style.display = 'flex';\n            elementDiv.style.alignItems = 'center';\n            elementDiv.style.color = '#000';\n            elementDiv.innerHTML = escapeHtml(textValue);\n        } else if (element.type === 'barcode') {\n            elementDiv.style.border = '1px solid #ddd';\n            elementDiv.style.display = 'flex';\n            elementDiv.style.alignItems = 'center';\n            elementDiv.style.justifyContent = 'center';\n            elementDiv.innerHTML = `<div style=\"font-size: ${8 * scale}px;\">BARCODE: ${sampleData.barcode}</div>`;\n        } else if (element.type === 'image') {\n            elementDiv.style.border = '1px dashed #ccc';\n            elementDiv.style.display = 'flex';\n            elementDiv.style.alignItems = 'center';\n            elementDiv.style.justifyContent = 'center';\n            elementDiv.innerHTML = `<div style=\"font-size: ${8 * scale}px;\">LOGO</div>`;\n        }\n        \n        labelDiv.appendChild(elementDiv);\n    }\n}\n\n// Template import/export functionality\nfunction exportTemplate() {\n    if (!currentTemplate) {\n        showNotification('No template to export', 'warning');\n        return;\n    }\n    \n    const templateData = {\n        ...currentTemplate,\n        name: document.getElementById('templateName').value || currentTemplate.name,\n        width: parseInt(document.getElementById('templateWidth').value) || currentTemplate.width,\n        height: parseInt(document.getElementById('templateHeight').value) || currentTemplate.height\n    };\n    \n    // Remove ID for export\n    delete templateData.id;\n    delete templateData.createdAt;\n    delete templateData.updatedAt;\n    \n    const dataStr = JSON.stringify(templateData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    \n    const exportFileDefaultName = `label-template-${templateData.name.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.json`;\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n    \n    showNotification('Template exported successfully', 'success');\n}\n\nfunction importTemplate() {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    \n    input.onchange = function(event) {\n        const file = event.target.files[0];\n        if (!file) return;\n        \n        const reader = new FileReader();\n        reader.onload = function(e) {\n            try {\n                const templateData = JSON.parse(e.target.result);\n                \n                // Validate imported template\n                const validation = validateTemplate(templateData);\n                if (!validation.isValid) {\n                    showNotification('Invalid template: ' + validation.errors.join(', '), 'error');\n                    return;\n                }\n                \n                // Load imported template\n                currentTemplate = {\n                    ...templateData,\n                    name: templateData.name + ' (Imported)',\n                    isDefault: false\n                };\n                \n                // Update UI\n                document.getElementById('templateName').value = currentTemplate.name;\n                document.getElementById('templateWidth').value = currentTemplate.width;\n                document.getElementById('templateHeight').value = currentTemplate.height;\n                \n                updateCanvasSize(currentTemplate.width, currentTemplate.height);\n                renderTemplate();\n                \n                // Show save button\n                document.getElementById('saveTemplateBtn').style.display = 'inline-flex';\n                \n                showNotification('Template imported successfully', 'success');\n                \n            } catch (error) {\n                console.error('Error importing template:', error);\n                showNotification('Error importing template: Invalid JSON file', 'error');\n            }\n        };\n        \n        reader.readAsText(file);\n    };\n    \n    input.click();\n}\n\n// Delete selected element\nfunction deleteSelectedElement() {\n    if (!selectedElement || !currentTemplate || !currentTemplate.elements) {\n        showNotification('No element selected', 'warning');\n        return;\n    }\n    \n    const elementIndex = parseInt(selectedElement.dataset.index);\n    \n    if (elementIndex >= 0 && elementIndex < currentTemplate.elements.length) {\n        // Remove element from template\n        currentTemplate.elements.splice(elementIndex, 1);\n        \n        // Remove element from canvas\n        selectedElement.remove();\n        selectedElement = null;\n        \n        // Hide properties panel\n        const propertiesPanel = document.getElementById('elementProperties');\n        if (propertiesPanel) {\n            propertiesPanel.style.display = 'none';\n        }\n        \n        // Re-render template to update indices\n        renderTemplate();\n        \n        // Show save button\n        document.getElementById('saveTemplateBtn').style.display = 'inline-flex';\n        \n        showNotification('Element deleted', 'success');\n        \n        hasUnsavedChanges = true;\n        resetAutoSaveTimer();\n    }\n}\n\n// Update properties panel\nfunction updatePropertiesPanel(element) {\n    const propertiesPanel = document.getElementById('elementProperties');\n    const propertiesContent = document.getElementById('propertiesContent');\n    \n    if (!propertiesPanel || !propertiesContent || !element) return;\n    \n    const elementIndex = parseInt(element.dataset.index);\n    const elementData = currentTemplate.elements[elementIndex];\n    \n    if (!elementData) return;\n    \n    let propertiesHTML = `\n        <div class=\"form-group\">\n            <label class=\"form-label\">Position & Size</label>\n            <div class=\"form-grid form-grid-4\">\n                <div class=\"form-group\">\n                    <label class=\"form-label-sm\">X (mm)</label>\n                    <input type=\"number\" id=\"elementX\" class=\"form-control form-control-sm\" \n                           value=\"${elementData.x}\" min=\"0\" step=\"1\" data-testid=\"input-element-x\">\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"form-label-sm\">Y (mm)</label>\n                    <input type=\"number\" id=\"elementY\" class=\"form-control form-control-sm\" \n                           value=\"${elementData.y}\" min=\"0\" step=\"1\" data-testid=\"input-element-y\">\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"form-label-sm\">Width (mm)</label>\n                    <input type=\"number\" id=\"elementWidth\" class=\"form-control form-control-sm\" \n                           value=\"${elementData.width}\" min=\"1\" step=\"1\" data-testid=\"input-element-width\">\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"form-label-sm\">Height (mm)</label>\n                    <input type=\"number\" id=\"elementHeight\" class=\"form-control form-control-sm\" \n                           value=\"${elementData.height}\" min=\"1\" step=\"1\" data-testid=\"input-element-height\">\n                </div>\n            </div>\n        </div>\n    `;\n    \n    if (elementData.type === 'text') {\n        propertiesHTML += `\n            <div class=\"form-group\">\n                <label class=\"form-label\">Text Properties</label>\n                <div class=\"form-grid form-grid-2\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label-sm\">Font Size</label>\n                        <input type=\"number\" id=\"elementFontSize\" class=\"form-control form-control-sm\" \n                               value=\"${elementData.fontSize || 12}\" min=\"4\" max=\"72\" data-testid=\"input-font-size\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label class=\"form-label-sm\">Alignment</label>\n                        <select id=\"elementAlign\" class=\"form-control form-control-sm\" data-testid=\"select-text-align\">\n                            <option value=\"left\" ${elementData.align === 'left' ? 'selected' : ''}>Left</option>\n                            <option value=\"center\" ${elementData.align === 'center' ? 'selected' : ''}>Center</option>\n                            <option value=\"right\" ${elementData.align === 'right' ? 'selected' : ''}>Right</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <div class=\"checkbox-wrapper\">\n                        <input type=\"checkbox\" id=\"elementBold\" ${elementData.bold ? 'checked' : ''} data-testid=\"checkbox-bold\">\n                        <label for=\"elementBold\">Bold</label>\n                    </div>\n                    <div class=\"checkbox-wrapper\">\n                        <input type=\"checkbox\" id=\"elementItalic\" ${elementData.italic ? 'checked' : ''} data-testid=\"checkbox-italic\">\n                        <label for=\"elementItalic\">Italic</label>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    \n    propertiesContent.innerHTML = propertiesHTML;\n    propertiesPanel.style.display = 'block';\n    \n    // Add event listeners for property changes\n    addPropertyEventListeners(elementIndex);\n}\n\n// Add event listeners for property changes\nfunction addPropertyEventListeners(elementIndex) {\n    const inputs = ['elementX', 'elementY', 'elementWidth', 'elementHeight', 'elementFontSize', 'elementAlign', 'elementBold', 'elementItalic'];\n    \n    inputs.forEach(inputId => {\n        const input = document.getElementById(inputId);\n        if (input) {\n            input.addEventListener('change', () => updateElementProperty(elementIndex, inputId));\n            input.addEventListener('input', () => updateElementProperty(elementIndex, inputId));\n        }\n    });\n}\n\n// Update element property\nfunction updateElementProperty(elementIndex, propertyId) {\n    if (!currentTemplate || !currentTemplate.elements || !currentTemplate.elements[elementIndex]) return;\n    \n    const element = currentTemplate.elements[elementIndex];\n    const input = document.getElementById(propertyId);\n    \n    if (!input) return;\n    \n    switch (propertyId) {\n        case 'elementX':\n            element.x = Math.max(0, parseInt(input.value) || 0);\n            break;\n        case 'elementY':\n            element.y = Math.max(0, parseInt(input.value) || 0);\n            break;\n        case 'elementWidth':\n            element.width = Math.max(1, parseInt(input.value) || 1);\n            break;\n        case 'elementHeight':\n            element.height = Math.max(1, parseInt(input.value) || 1);\n            break;\n        case 'elementFontSize':\n            element.fontSize = Math.max(4, Math.min(72, parseInt(input.value) || 12));\n            break;\n        case 'elementAlign':\n            element.align = input.value;\n            break;\n        case 'elementBold':\n            element.bold = input.checked;\n            break;\n        case 'elementItalic':\n            element.italic = input.checked;\n            break;\n    }\n    \n    // Re-render template\n    renderTemplate();\n    \n    // Show save button\n    document.getElementById('saveTemplateBtn').style.display = 'inline-flex';\n    \n    hasUnsavedChanges = true;\n    resetAutoSaveTimer();\n}\n\n// Add keyboard shortcuts\ndocument.addEventListener('keydown', function(e) {\n    // Ctrl+S to save\n    if (e.ctrlKey && e.key === 's') {\n        e.preventDefault();\n        if (currentTemplate) {\n            showSaveModal();\n        }\n    }\n    \n    // Delete key to delete selected element\n    if (e.key === 'Delete' && selectedElement) {\n        e.preventDefault();\n        deleteSelectedElement();\n    }\n    \n    // Escape to deselect\n    if (e.key === 'Escape') {\n        if (selectedElement) {\n            deselectElement();\n        }\n    }\n});\n\n// Deselect element\nfunction deselectElement() {\n    if (selectedElement) {\n        selectedElement.classList.remove('selected');\n        selectedElement.style.border = '1px dashed #ccc';\n        selectedElement.style.backgroundColor = 'rgba(37, 99, 235, 0.1)';\n        removeResizeHandles(selectedElement);\n        selectedElement = null;\n        \n        // Hide properties panel\n        const propertiesPanel = document.getElementById('elementProperties');\n        if (propertiesPanel) {\n            propertiesPanel.style.display = 'none';\n        }\n    }\n}\n\n// Click on canvas to deselect\ndocument.addEventListener('click', function(e) {\n    const canvas = document.getElementById('labelCanvas');\n    if (canvas && e.target === canvas) {\n        deselectElement();\n    }\n});\n\n// Add notification styles dynamically\nfunction addNotificationStyles() {\n    if (document.getElementById('notificationStyles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'notificationStyles';\n    style.textContent = `\n        .notification-container {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            z-index: 10000;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            max-width: 400px;\n        }\n        \n        .notification {\n            display: flex;\n            align-items: center;\n            gap: 12px;\n            padding: 12px 16px;\n            border-radius: 8px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n            animation: slideInRight 0.3s ease-out;\n            font-weight: 500;\n            min-width: 300px;\n        }\n        \n        .notification-success {\n            background: #10B981;\n            color: white;\n        }\n        \n        .notification-error {\n            background: #EF4444;\n            color: white;\n        }\n        \n        .notification-warning {\n            background: #F59E0B;\n            color: white;\n        }\n        \n        .notification-info {\n            background: #3B82F6;\n            color: white;\n        }\n        \n        .notification-close {\n            background: none;\n            border: none;\n            color: inherit;\n            cursor: pointer;\n            padding: 4px;\n            margin-left: auto;\n            opacity: 0.7;\n        }\n        \n        .notification-close:hover {\n            opacity: 1;\n        }\n        \n        @keyframes slideInRight {\n            from {\n                transform: translateX(100%);\n                opacity: 0;\n            }\n            to {\n                transform: translateX(0);\n                opacity: 1;\n            }\n        }\n        \n        @keyframes slideOutRight {\n            from {\n                transform: translateX(0);\n                opacity: 1;\n            }\n            to {\n                transform: translateX(100%);\n                opacity: 0;\n            }\n        }\n        \n        .loading {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 40px;\n            font-size: 16px;\n            color: #666;\n        }\n        \n        .error {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 40px;\n            font-size: 16px;\n            color: #dc2626;\n            background: #fef2f2;\n            border: 1px solid #fecaca;\n            border-radius: 8px;\n        }\n        \n        .preview-info {\n            margin-top: 20px;\n            padding: 16px;\n            background: #f8f9fa;\n            border-radius: 8px;\n        }\n        \n        .preview-info h4 {\n            margin: 0 0 12px 0;\n            color: #374151;\n        }\n        \n        .preview-info p {\n            margin: 4px 0;\n            font-size: 14px;\n            color: #6b7280;\n        }\n    `;\n    \n    document.head.appendChild(style);\n}\n\n// Initialize notification styles when DOM is loaded\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', addNotificationStyles);\n} else {\n    addNotificationStyles();\n}\n\n// Touch support variables\nlet touchStartData = null;\nlet isDraggingFromField = false;\n\n// Touch handlers for field items\nfunction handleFieldTouchStart(e) {\n    e.preventDefault();\n    \n    if (e.touches.length !== 1) return;\n    \n    const touch = e.touches[0];\n    const fieldType = e.currentTarget.dataset.field;\n    const elementType = e.currentTarget.dataset.type;\n    \n    touchStartData = {\n        field: fieldType,\n        type: elementType,\n        startX: touch.clientX,\n        startY: touch.clientY,\n        element: e.currentTarget\n    };\n    \n    isDraggingFromField = true;\n    e.currentTarget.style.opacity = '0.5';\n}\n\nfunction handleFieldTouchMove(e) {\n    if (!touchStartData || !isDraggingFromField) return;\n    e.preventDefault();\n    \n    const touch = e.touches[0];\n    const deltaX = Math.abs(touch.clientX - touchStartData.startX);\n    const deltaY = Math.abs(touch.clientY - touchStartData.startY);\n    \n    // Only start visual feedback if moved enough\n    if (deltaX > 5 || deltaY > 5) {\n        // Add visual feedback (could create a ghost element here)\n    }\n}\n\nfunction handleFieldTouchEnd(e) {\n    if (!touchStartData || !isDraggingFromField) return;\n    e.preventDefault();\n    \n    touchStartData.element.style.opacity = '1';\n    \n    if (e.changedTouches.length > 0) {\n        const touch = e.changedTouches[0];\n        const canvas = document.getElementById('labelCanvas');\n        const canvasRect = canvas.getBoundingClientRect();\n        \n        // Check if touch ended over canvas\n        if (touch.clientX >= canvasRect.left && touch.clientX <= canvasRect.right &&\n            touch.clientY >= canvasRect.top && touch.clientY <= canvasRect.bottom) {\n            \n            // Simulate drop on canvas\n            const dropEvent = {\n                preventDefault: () => {},\n                currentTarget: canvas,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                dataTransfer: {\n                    getData: () => JSON.stringify({\n                        field: touchStartData.field,\n                        type: touchStartData.type\n                    })\n                }\n            };\n            \n            handleDrop(dropEvent);\n        }\n    }\n    \n    touchStartData = null;\n    isDraggingFromField = false;\n}\n\n// Touch handlers for canvas\nfunction handleCanvasTouchMove(e) {\n    if (e.touches.length !== 1) return;\n    \n    const touch = e.touches[0];\n    const mouseEvent = {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n    };\n    \n    if (isDragging && selectedElement) {\n        e.preventDefault();\n        moveElement(mouseEvent);\n    } else if (isResizing && selectedElement) {\n        e.preventDefault();\n        resizeElement(mouseEvent);\n    }\n}\n\nfunction handleCanvasTouchEnd(e) {\n    if (isDragging) {\n        isDragging = false;\n        document.body.style.userSelect = 'auto';\n        if (selectedElement) {\n            selectedElement.style.zIndex = '10';\n        }\n        console.log('Stopped dragging element (touch)');\n    }\n    \n    if (isResizing) {\n        isResizing = false;\n        resizeHandle = null;\n        document.body.style.userSelect = 'auto';\n        console.log('Stopped resizing element (touch)');\n    }\n}\n\nconsole.log('Label Designer JS loaded with touch support');\n\n// ========== ENHANCED FUNCTIONALITY ==========\n\n// Notification system\nfunction showNotification(message, type = 'info', duration = 5000) {\n    const container = getOrCreateNotificationContainer();\n    \n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.innerHTML = `\n        <i class=\"fas ${getNotificationIcon(type)}\"></i>\n        <span>${escapeHtml(message)}</span>\n        <button class=\"notification-close\" onclick=\"closeNotification(this.parentElement)\">\n            <i class=\"fas fa-times\"></i>\n        </button>\n    `;\n    \n    container.appendChild(notification);\n    \n    // Auto-remove after duration\n    if (duration > 0) {\n        setTimeout(() => {\n            if (notification.parentElement) {\n                closeNotification(notification);\n            }\n        }, duration);\n    }\n    \n    return notification;\n}\n\nfunction getOrCreateNotificationContainer() {\n    let container = document.getElementById('notificationContainer');\n    if (!container) {\n        container = document.createElement('div');\n        container.id = 'notificationContainer';\n        container.className = 'notification-container';\n        document.body.appendChild(container);\n    }\n    return container;\n}\n\nfunction getNotificationIcon(type) {\n    const icons = {\n        success: 'fa-check-circle',\n        error: 'fa-exclamation-triangle',\n        warning: 'fa-exclamation-circle',\n        info: 'fa-info-circle'\n    };\n    return icons[type] || icons.info;\n}\n\nfunction closeNotification(notification) {\n    notification.style.animation = 'slideOutRight 0.3s ease-in-out';\n    setTimeout(() => {\n        if (notification.parentElement) {\n            notification.parentElement.removeChild(notification);\n        }\n    }, 300);\n}\n\n// Template validation\nfunction validateTemplate(template) {\n    const errors = [];\n    \n    if (!template.name || template.name.trim().length === 0) {\n        errors.push('Template name is required');\n    }\n    \n    if (template.name && template.name.length > 100) {\n        errors.push('Template name must be less than 100 characters');\n    }\n    \n    if (!template.width || template.width < 10 || template.width > 500) {\n        errors.push('Template width must be between 10mm and 500mm');\n    }\n    \n    if (!template.height || template.height < 10 || template.height > 500) {\n        errors.push('Template height must be between 10mm and 500mm');\n    }\n    \n    if (!template.elements || template.elements.length === 0) {\n        errors.push('Template must have at least one element');\n    }\n    \n    // Validate elements\n    if (template.elements) {\n        template.elements.forEach((element, index) => {\n            if (!element.type) {\n                errors.push(`Element ${index + 1}: Type is required`);\n            }\n            \n            if (!element.field) {\n                errors.push(`Element ${index + 1}: Field is required`);\n            }\n            \n            if (element.x < 0 || element.y < 0) {\n                errors.push(`Element ${index + 1}: Position cannot be negative`);\n            }\n            \n            if (element.width <= 0 || element.height <= 0) {\n                errors.push(`Element ${index + 1}: Size must be positive`);\n            }\n            \n            // Check if element is within template bounds\n            if (element.x + element.width > template.width) {\n                errors.push(`Element ${index + 1}: Extends beyond template width`);\n            }\n            \n            if (element.y + element.height > template.height) {\n                errors.push(`Element ${index + 1}: Extends beyond template height`);\n            }\n        });\n    }\n    \n    return {\n        isValid: errors.length === 0,\n        errors: errors\n    };\n}\n\n// Get sample product data for preview\nasync function getSampleProductData() {\n    try {\n        const response = await fetch('/api/products');\n        if (response.ok) {\n            const products = await response.json();\n            if (products.length > 0) {\n                // Use first active product or first product\n                const activeProduct = products.find(p => p.status === 'Aktif') || products[0];\n                return {\n                    productName: activeProduct.name,\n                    features: activeProduct.attributes?.map(attr => `${attr.name}: ${attr.value}`).join(', ') || 'Premium Quality',\n                    price: `${activeProduct.sellPrice} ${activeProduct.sellCurrency || window.i18nUnits?.currencyUSD || 'USD'}`,\n                    date: new Date().toLocaleDateString('tr-TR'),\n                    barcode: await generateSampleBarcode()\n                };\n            }\n        }\n    } catch (error) {\n        console.error('Error fetching sample product data:', error);\n    }\n    \n    // Fallback sample data\n    return {\n        productName: 'Sample Product',\n        features: 'High Quality, Durable',\n        price: `29.99 ${window.i18nUnits?.currencyUSD || 'USD'}`,\n        date: new Date().toLocaleDateString('tr-TR'),\n        barcode: await generateSampleBarcode()\n    };\n}\n\n// Generate sample barcode for preview\nasync function generateSampleBarcode() {\n    try {\n        const response = await fetch('/api/barcode/generate');\n        if (response.ok) {\n            const data = await response.json();\n            return data.code;\n        }\n    } catch (error) {\n        console.error('Error generating sample barcode:', error);\n    }\n    return '123456'; // Fallback\n}\n\n// Render label preview with actual data\nasync function renderLabelPreview(container, sampleData) {\n    if (!currentTemplate || !container) return;\n    \n    const scale = 2; // Preview scale factor\n    const pixelWidth = currentTemplate.width * 4 * scale;\n    const pixelHeight = currentTemplate.height * 4 * scale;\n    \n    container.innerHTML = `\n        <div class=\"preview-label\" style=\"\n            width: ${pixelWidth}px;\n            height: ${pixelHeight}px;\n            position: relative;\n            background: white;\n            border: 2px solid #ddd;\n            border-radius: 4px;\n            margin: 20px auto;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n        \">\n            <div class=\"preview-elements\"></div>\n        </div>\n        <div class=\"preview-info\">\n            <h4>Preview Data:</h4>\n            <p><strong>Product:</strong> ${escapeHtml(sampleData.productName)}</p>\n            <p><strong>Features:</strong> ${escapeHtml(sampleData.features)}</p>\n            <p><strong>Price:</strong> ${escapeHtml(sampleData.price)}</p>\n            <p><strong>Date:</strong> ${escapeHtml(sampleData.date)}</p>\n            <p><strong>Barcode:</strong> ${escapeHtml(sampleData.barcode)}</p>\n        </div>\n    `;\n    \n    const elementsContainer = container.querySelector('.preview-elements');\n    \n    // Render each element with actual data\n    for (const element of currentTemplate.elements) {\n        await renderPreviewElement(elementsContainer, element, sampleData, scale);\n    }\n}\n\n// Render individual preview element\nasync function renderPreviewElement(container, elementData, sampleData, scale) {\n    const elementDiv = document.createElement('div');\n    elementDiv.style.position = 'absolute';\n    elementDiv.style.left = (elementData.x * 4 * scale) + 'px';\n    elementDiv.style.top = (elementData.y * 4 * scale) + 'px';\n    elementDiv.style.width = (elementData.width * 4 * scale) + 'px';\n    elementDiv.style.height = (elementData.height * 4 * scale) + 'px';\n    \n    let content = '';\n    \n    switch (elementData.type) {\n        case 'text':\n            const textValue = sampleData[elementData.field] || elementData.field;\n            const fontSize = (elementData.fontSize || 12) * scale;\n            \n            elementDiv.style.fontSize = fontSize + 'px';\n            elementDiv.style.fontWeight = elementData.bold ? 'bold' : 'normal';\n            elementDiv.style.fontStyle = elementData.italic ? 'italic' : 'normal';\n            elementDiv.style.textAlign = elementData.align || 'left';\n            elementDiv.style.display = 'flex';\n            elementDiv.style.alignItems = 'center';\n            elementDiv.style.color = '#000';\n            elementDiv.style.lineHeight = '1.2';\n            elementDiv.style.overflow = 'hidden';\n            \n            content = escapeHtml(textValue);\n            break;\n            \n        case 'barcode':\n            try {\n                const barcodeResponse = await fetch(`/api/barcode/${sampleData.barcode}/image`);\n                if (barcodeResponse.ok) {\n                    const blob = await barcodeResponse.blob();\n                    const imageUrl = URL.createObjectURL(blob);\n                    \n                    elementDiv.style.backgroundImage = `url(${imageUrl})`;\n                    elementDiv.style.backgroundSize = 'contain';\n                    elementDiv.style.backgroundRepeat = 'no-repeat';\n                    elementDiv.style.backgroundPosition = 'center';\n                } else {\n                    content = `<div style=\"background: #f0f0f0; display: flex; align-items: center; justify-content: center; height: 100%; font-size: ${8 * scale}px;\">BARCODE</div>`;\n                }\n            } catch (error) {\n                console.error('Error loading barcode image:', error);\n                content = `<div style=\"background: #f0f0f0; display: flex; align-items: center; justify-content: center; height: 100%; font-size: ${8 * scale}px;\">BARCODE</div>`;\n            }\n            break;\n            \n        case 'image':\n            content = `<div style=\"background: #f8f9fa; display: flex; align-items: center; justify-content: center; height: 100%; font-size: ${8 * scale}px; border: 1px dashed #ccc;\"><i class=\"fas fa-image\"></i> LOGO</div>`;\n            break;\n            \n        default:\n            content = escapeHtml(elementData.field || 'Unknown');\n    }\n    \n    elementDiv.innerHTML = content;\n    container.appendChild(elementDiv);\n}","size_bytes":83631},"public/js/main.js":{"content":"// ERP Main JavaScript\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize mobile menu system first\n    initMobileMenu();\n    \n    // Initialize lazy loading animations\n    initLazyLoading();\n    \n    // Initialize image error handling\n    initImageFallbacks();\n    \n    // Initialize image modal functionality  \n    initImageModal();\n    \n    // Initialize product form features if we're on the product form page\n    if (document.getElementById('productForm')) {\n        initProductFormFeatures();\n    }\n});\n\n// Lazy Loading with Intersection Observer\nfunction initLazyLoading() {\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '100px 0px'\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('reveal');\n                observer.unobserve(entry.target);\n            }\n        });\n    }, observerOptions);\n\n    // Observe product cards for reveal animation\n    const productCards = document.querySelectorAll('.product-card');\n    productCards.forEach((card, index) => {\n        // Add staggered delay for animation\n        card.style.transitionDelay = `${index * 0.1}s`;\n        observer.observe(card);\n    });\n\n    // Enhanced image loading with smooth transitions\n    const productImages = document.querySelectorAll('.product-image');\n    productImages.forEach((img, index) => {\n        // Add smooth transition for all images\n        img.style.transition = 'opacity 0.3s ease, transform 0.3s ease';\n        \n        // If image is already loaded, ensure it's visible\n        if (img.complete && img.naturalHeight !== 0) {\n            img.style.opacity = '1';\n            img.style.transform = 'scale(1)';\n        } else {\n            // Set loading state\n            img.style.opacity = '0.7';\n            img.style.transform = 'scale(0.98)';\n            \n            // Handle load event\n            img.addEventListener('load', function() {\n                this.style.opacity = '1';\n                this.style.transform = 'scale(1)';\n                this.classList.add('loaded');\n            });\n            \n            // Handle error event\n            img.addEventListener('error', function() {\n                this.style.opacity = '1';\n                this.style.transform = 'scale(1)';\n            });\n        }\n    });\n}\n\n// Image fallback handling\nfunction initImageFallbacks() {\n    const productImages = document.querySelectorAll('.product-image');\n    \n    productImages.forEach(img => {\n        img.onerror = function() {\n            this.src = '/img/placeholder-product.svg';\n            this.onerror = null; // Prevent infinite loop\n            this.classList.add('placeholder');\n        };\n    });\n}\n\n// ===== MODERN MENU SYSTEM =====\n\n// Global menu state\nlet isMenuOpen = false;\n\n// Menu elements\nconst menuElements = {\n    sidebar: null,\n    overlay: null,\n    hamburger: null\n};\n\n// Initialize mobile menu system\nfunction initMobileMenu() {\n    // Get menu elements\n    menuElements.sidebar = document.querySelector('.sidebar');\n    menuElements.overlay = document.querySelector('.menu-overlay');\n    menuElements.hamburger = document.querySelector('.hamburger-menu');\n    \n    if (!menuElements.sidebar || !menuElements.overlay || !menuElements.hamburger) {\n        console.warn('Menu elements not found, skipping menu initialization');\n        return;\n    }\n    \n    // Hamburger button click handler\n    menuElements.hamburger.addEventListener('click', function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        toggleMenu();\n    });\n    \n    // Overlay click handler - close menu\n    menuElements.overlay.addEventListener('click', function(e) {\n        e.preventDefault();\n        closeMenu();\n    });\n    \n    // Escape key handler - close menu\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape' && isMenuOpen) {\n            closeMenu();\n        }\n    });\n    \n    // Navigation link click handler - auto close menu on mobile\n    if (menuElements.sidebar) {\n        menuElements.sidebar.addEventListener('click', function(e) {\n            const link = e.target.closest('a.nav-link, a.submenu-link, a[href]');\n            \n            // Only close for real navigation links, not buttons or non-links\n            if (link && link.href && !link.href.includes('#') && window.innerWidth <= 1024) {\n                // Small delay to ensure navigation starts before closing menu\n                setTimeout(() => {\n                    closeMenu();\n                }, 100);\n            }\n        });\n    }\n    \n    // Force menu closed on page load (prevent stale state)\n    closeMenu();\n    \n    console.log('ERP Menu System: Initialized successfully with touch gestures and accessibility features');\n}\n\n// Open menu function\nfunction openMenu() {\n    if (isMenuOpen) return;\n    \n    isMenuOpen = true;\n    \n    // Update all menu elements\n    if (menuElements.sidebar) {\n        menuElements.sidebar.classList.add('open');\n    }\n    \n    if (menuElements.overlay) {\n        menuElements.overlay.classList.add('show');\n    }\n    \n    if (menuElements.hamburger) {\n        menuElements.hamburger.classList.add('menu-open');\n    }\n    \n    // Prevent body scroll on mobile\n    if (window.innerWidth <= 1024) {\n        document.body.style.overflow = 'hidden';\n    }\n}\n\n// Close menu function\nfunction closeMenu() {\n    if (!isMenuOpen) return;\n    \n    isMenuOpen = false;\n    \n    // Update all menu elements\n    if (menuElements.sidebar) {\n        menuElements.sidebar.classList.remove('open');\n    }\n    \n    if (menuElements.overlay) {\n        menuElements.overlay.classList.remove('show');\n    }\n    \n    if (menuElements.hamburger) {\n        menuElements.hamburger.classList.remove('menu-open');\n    }\n    \n    // Restore body scroll\n    document.body.style.overflow = 'auto';\n}\n\n// Toggle menu function\nfunction toggleMenu() {\n    if (isMenuOpen) {\n        closeMenu();\n    } else {\n        openMenu();\n    }\n}\n\n// Legacy support - keeping for backward compatibility\nfunction toggleSidebar() {\n    toggleMenu();\n}\n\n// ===== IMAGE MODAL FUNCTIONALITY =====\n\nlet imageModal = null;\n\nfunction initImageModal() {\n    // Add single keyboard listener\n    document.addEventListener('keydown', function(e) {\n        if (!isImageModalOpen) return;\n        \n        switch(e.key) {\n            case 'Escape':\n                closeImageModal();\n                break;\n            case 'ArrowLeft':\n                previousImage();\n                break;\n            case 'ArrowRight':\n                nextImage();\n                break;\n        }\n    });\n\n    // Add single backdrop click listener to modal\n    const modal = document.getElementById('imageModal');\n    if (modal) {\n        modal.addEventListener('click', function(e) {\n            if (e.target === modal) {\n                closeImageModal();\n            }\n        });\n    }\n}\n\n// Global modal instance variable\nlet currentModalInstance = null;\nlet currentImages = [];\nlet currentImageIndex = 0;\nlet isImageModalOpen = false;\n\nfunction openImageModal(productId, productName) {\n    const modal = document.getElementById('imageModal');\n    const modalImage = document.getElementById('modalImage');\n    const prevBtn = document.getElementById('prevImageBtn');\n    const nextBtn = document.getElementById('nextImageBtn');\n    const imageCounter = document.getElementById('imageCounter');\n    const currentIndexSpan = document.getElementById('currentImageIndex');\n    const totalImagesSpan = document.getElementById('totalImages');\n    \n    if (!modal || !modalImage) {\n        console.error('Modal elements not found');\n        return;\n    }\n    \n    // Get images from data attribute\n    const imageContainer = document.querySelector(`[data-testid=\"button-image-${productId}\"]`);\n    let images = [];\n    \n    if (imageContainer && imageContainer.dataset.images) {\n        try {\n            images = JSON.parse(imageContainer.dataset.images);\n        } catch (e) {\n            console.error('Error parsing images:', e);\n            images = [];\n        }\n    }\n    \n    // Setup images array\n    currentImages = images || [];\n    currentImageIndex = 0;\n    \n    // Filter out null/undefined images\n    currentImages = currentImages.filter(img => img && img.trim());\n    \n    if (currentImages.length === 0) {\n        currentImages = ['/img/placeholder-product.svg'];\n    }\n    \n    // Set first image\n    updateModalImage();\n    \n    // Show/hide navigation buttons and counter based on image count\n    const hasMultipleImages = currentImages.length > 1;\n    \n    prevBtn.style.display = hasMultipleImages ? 'flex' : 'none';\n    nextBtn.style.display = hasMultipleImages ? 'flex' : 'none';\n    imageCounter.style.display = hasMultipleImages ? 'block' : 'none';\n    \n    if (hasMultipleImages) {\n        currentIndexSpan.textContent = currentImageIndex + 1;\n        totalImagesSpan.textContent = currentImages.length;\n    }\n    \n    // Set alt text\n    modalImage.alt = productName;\n    \n    // Show modal manually for better control\n    modal.style.display = 'flex';\n    modal.style.alignItems = 'center';\n    modal.style.justifyContent = 'center';\n    modal.style.position = 'fixed';\n    modal.style.top = '0';\n    modal.style.left = '0';\n    modal.style.width = '100%';\n    modal.style.height = '100%';\n    modal.style.backgroundColor = 'rgba(0,0,0,0.8)';\n    modal.style.zIndex = '9999';\n    \n    // Set modal open state\n    isImageModalOpen = true;\n    \n    // Prevent body scroll\n    document.body.style.overflow = 'hidden';\n}\n\nfunction updateModalImage() {\n    const modalImage = document.getElementById('modalImage');\n    const currentIndexSpan = document.getElementById('currentImageIndex');\n    \n    if (modalImage && currentImages.length > 0) {\n        const imageSrc = currentImages[currentImageIndex];\n        modalImage.src = imageSrc.startsWith('/') ? imageSrc : '/' + imageSrc;\n        \n        if (currentIndexSpan) {\n            currentIndexSpan.textContent = currentImageIndex + 1;\n        }\n    }\n}\n\nfunction previousImage() {\n    if (currentImages.length > 1) {\n        currentImageIndex = currentImageIndex === 0 ? currentImages.length - 1 : currentImageIndex - 1;\n        updateModalImage();\n    }\n}\n\nfunction nextImage() {\n    if (currentImages.length > 1) {\n        currentImageIndex = currentImageIndex === currentImages.length - 1 ? 0 : currentImageIndex + 1;\n        updateModalImage();\n    }\n}\n\nfunction closeImageModal() {\n    if (!isImageModalOpen) return;\n    \n    const modal = document.getElementById('imageModal');\n    \n    if (modal) {\n        // Hide modal\n        modal.style.display = 'none';\n        \n        // Set modal closed state\n        isImageModalOpen = false;\n        \n        // Restore body scroll\n        document.body.style.overflow = 'auto';\n        \n        // Clear image to save memory\n        const modalImage = document.getElementById('modalImage');\n        if (modalImage) {\n            modalImage.src = '';\n        }\n    }\n    \n    // Clean up instance\n    currentModalInstance = null;\n}\n\n// ===== PRODUCT DELETION =====\n\nasync function toggleProductStatus(productId, newStatus) {\n    try {\n        const response = await fetch(`/products/toggle/${productId}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n        \n        if (response.ok) {\n            // Reload the page to show updated status\n            window.location.reload();\n        } else {\n            throw new Error('Failed to toggle product status');\n        }\n    } catch (error) {\n        console.error('Error toggling product status:', error);\n        alert('√úr√ºn durumu deƒüi≈ütirilirken hata olu≈ütu. L√ºtfen tekrar deneyin.');\n    }\n}\n\n// Smooth scrolling for anchor links\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n    anchor.addEventListener('click', function (e) {\n        e.preventDefault();\n        const target = document.querySelector(this.getAttribute('href'));\n        if (target) {\n            target.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start'\n            });\n        }\n    });\n});\n\n// Enhanced form handling - handled by validation system\n\n// Product card interactions\ndocument.querySelectorAll('.product-card').forEach(card => {\n    // Add hover effects for better UX\n    card.addEventListener('mouseenter', function() {\n        this.style.transform = 'translateY(-4px)';\n    });\n    \n    card.addEventListener('mouseleave', function() {\n        this.style.transform = 'translateY(-2px)';\n    });\n});\n\n// Statistics cards animation on load\nfunction animateStats() {\n    const statCards = document.querySelectorAll('.stat-card');\n    statCards.forEach((card, index) => {\n        setTimeout(() => {\n            card.classList.add('fade-in-up');\n        }, index * 100);\n    });\n}\n\n// Initialize stats animation\nsetTimeout(animateStats, 500);\n\n// Global variables for charts and modal management\nlet dailySalesChart = null;\nlet monthlyMovementsChart = null;\nlet isModalOpen = false;\n\n// Statistics Modal Functions\nfunction openStatsModal(productId, productName, productStatus) {\n    if (isModalOpen) return; // Prevent multiple opens\n    \n    const modal = document.getElementById('statsModal');\n    const modalProductName = document.getElementById('modalProductName');\n    const modalProductId = document.getElementById('modalProductId');\n    const modalProductStatus = document.getElementById('modalProductStatus');\n    \n    // Destroy existing charts first to prevent memory leaks\n    destroyCharts();\n    \n    // Update modal header (safely escape content)\n    modalProductName.textContent = productName || 'Unknown Product';\n    modalProductId.textContent = `ID: ${productId || 'N/A'}`;\n    \n    // Update status badge\n    modalProductStatus.textContent = productStatus || 'Unknown';\n    modalProductStatus.className = `badge ${productStatus === 'Aktif' ? 'badge-success' : 'badge-muted'}`;\n    \n    // Show modal\n    modal.style.display = 'flex';\n    document.body.style.overflow = 'hidden';\n    isModalOpen = true;\n    \n    // Create charts after modal is visible\n    setTimeout(() => {\n        createStatsCharts();\n    }, 100);\n}\n\nfunction closeStatsModal() {\n    const modal = document.getElementById('statsModal');\n    if (!modal || !isModalOpen) return;\n    \n    modal.style.display = 'none';\n    document.body.style.overflow = 'auto';\n    isModalOpen = false;\n    \n    // Destroy existing charts\n    destroyCharts();\n}\n\n// Helper function to destroy charts safely\nfunction destroyCharts() {\n    if (dailySalesChart) {\n        dailySalesChart.destroy();\n        dailySalesChart = null;\n    }\n    if (monthlyMovementsChart) {\n        monthlyMovementsChart.destroy();\n        monthlyMovementsChart = null;\n    }\n}\n\n// Generate dummy data for daily sales (30 days)\nfunction generateDailySalesData() {\n    const labels = [];\n    const data = [];\n    const today = new Date();\n    \n    for (let i = 29; i >= 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        labels.push(date.toLocaleDateString('tr-TR', { day: '2-digit', month: '2-digit' }));\n        // Generate random sales data between 5-25\n        data.push(Math.floor(Math.random() * 20) + 5);\n    }\n    \n    return { labels, data };\n}\n\n// Generate dummy data for monthly movements (6 months)\nfunction generateMonthlyMovementsData() {\n    const labels = [];\n    const inData = [];\n    const outData = [];\n    const today = new Date();\n    \n    for (let i = 5; i >= 0; i--) {\n        const date = new Date(today);\n        date.setMonth(date.getMonth() - i);\n        labels.push(date.toLocaleDateString('tr-TR', { month: 'short', year: '2-digit' }));\n        // Generate random in/out data\n        inData.push(Math.floor(Math.random() * 100) + 50);\n        outData.push(Math.floor(Math.random() * 80) + 30);\n    }\n    \n    return { labels, inData, outData };\n}\n\n// Create Chart.js charts\nfunction createStatsCharts() {\n    const dailySalesCtx = document.getElementById('dailySalesChart');\n    const monthlyMovementsCtx = document.getElementById('monthlyMovementsChart');\n    \n    if (!dailySalesCtx || !monthlyMovementsCtx) return;\n    \n    // Daily Sales Line Chart\n    const dailySalesData = generateDailySalesData();\n    dailySalesChart = new Chart(dailySalesCtx, {\n        type: 'line',\n        data: {\n            labels: dailySalesData.labels,\n            datasets: [{\n                label: 'G√ºnl√ºk Satƒ±≈ü',\n                data: dailySalesData.data,\n                borderColor: '#2563EB',\n                backgroundColor: 'rgba(37, 99, 235, 0.1)',\n                borderWidth: 2,\n                fill: true,\n                tension: 0.4,\n                pointBackgroundColor: '#2563EB',\n                pointBorderColor: '#FFFFFF',\n                pointBorderWidth: 2,\n                pointRadius: 4,\n                pointHoverRadius: 6\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    display: false\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    grid: {\n                        color: '#E5E7EB'\n                    },\n                    ticks: {\n                        color: '#6B7280'\n                    }\n                },\n                x: {\n                    grid: {\n                        display: false\n                    },\n                    ticks: {\n                        color: '#6B7280'\n                    }\n                }\n            },\n            elements: {\n                point: {\n                    hoverBackgroundColor: '#2563EB'\n                }\n            }\n        }\n    });\n    \n    // Monthly Movements Bar Chart\n    const monthlyData = generateMonthlyMovementsData();\n    monthlyMovementsChart = new Chart(monthlyMovementsCtx, {\n        type: 'bar',\n        data: {\n            labels: monthlyData.labels,\n            datasets: [{\n                label: 'Giri≈ü',\n                data: monthlyData.inData,\n                backgroundColor: '#16A34A',\n                borderRadius: 4,\n                maxBarThickness: 40\n            }, {\n                label: '√áƒ±kƒ±≈ü',\n                data: monthlyData.outData,\n                backgroundColor: '#DC2626',\n                borderRadius: 4,\n                maxBarThickness: 40\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        boxWidth: 12,\n                        padding: 15,\n                        color: '#6B7280'\n                    }\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    grid: {\n                        color: '#E5E7EB'\n                    },\n                    ticks: {\n                        color: '#6B7280'\n                    }\n                },\n                x: {\n                    grid: {\n                        display: false\n                    },\n                    ticks: {\n                        color: '#6B7280'\n                    }\n                }\n            }\n        }\n    });\n}\n\n// Modal event listeners\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Delegated event listener for statistics buttons\n    document.addEventListener('click', function(e) {\n        if (e.target.closest('.stats-button')) {\n            const button = e.target.closest('.stats-button');\n            const productId = button.dataset.productId;\n            const productName = button.dataset.productName;\n            const productStatus = button.dataset.productStatus;\n            \n            openStatsModal(productId, productName, productStatus);\n        }\n    });\n    \n    // Modal close button\n    const closeButton = document.getElementById('modalCloseButton');\n    if (closeButton) {\n        closeButton.addEventListener('click', closeStatsModal);\n    }\n    \n    // Close modal on backdrop click\n    document.addEventListener('click', function(e) {\n        if (e.target.classList.contains('modal-backdrop') && isModalOpen) {\n            closeStatsModal();\n        }\n    });\n    \n    // Close modal on ESC key\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape' && isModalOpen) {\n            closeStatsModal();\n        }\n    });\n});\n\n// ===== PRODUCT FORM FEATURES =====\n\n// Global variables for product form functionality\nlet autocompleteDebounceTimer = null;\nlet isAutocompleteOpen = false;\nlet allProductNames = [];\nlet currentSelectedIndex = -1;\n\n// Initialize all product form features\nfunction initProductFormFeatures() {\n    console.log('Initializing product form features');\n    \n    // Initialize autocomplete functionality\n    initProductNameAutocomplete();\n    \n    // Initialize duplicate detection\n    initDuplicateDetection();\n    \n    // Initialize attribute validation\n    initAttributeValidation();\n    \n    // Initialize unit selection validation\n    initUnitValidation();\n    \n    // Initialize form validation\n    initFormValidation();\n}\n\n// ===== PRODUCT NAME AUTOCOMPLETE =====\n\nfunction initProductNameAutocomplete() {\n    const nameInput = document.getElementById('productName');\n    const dropdown = document.getElementById('nameAutocompleteDropdown');\n    \n    if (!nameInput || !dropdown) return;\n    \n    // Add event listeners\n    nameInput.addEventListener('input', handleAutocompleteInput);\n    nameInput.addEventListener('keydown', handleAutocompleteKeydown);\n    nameInput.addEventListener('focus', handleAutocompleteFocus);\n    nameInput.addEventListener('blur', handleAutocompleteBlur);\n    \n    // Click outside to close dropdown\n    document.addEventListener('click', function(e) {\n        if (!nameInput.contains(e.target) && !dropdown.contains(e.target)) {\n            closeAutocompleteDropdown();\n        }\n    });\n}\n\nfunction handleAutocompleteInput(e) {\n    const searchTerm = e.target.value.trim();\n    \n    // Clear previous debounce timer\n    if (autocompleteDebounceTimer) {\n        clearTimeout(autocompleteDebounceTimer);\n    }\n    \n    // Set new debounce timer (300ms)\n    autocompleteDebounceTimer = setTimeout(() => {\n        if (searchTerm.length >= 2) {\n            fetchAutocompleteSuggestions(searchTerm);\n        } else {\n            closeAutocompleteDropdown();\n        }\n    }, 300);\n}\n\nfunction handleAutocompleteKeydown(e) {\n    if (!isAutocompleteOpen) return;\n    \n    const dropdown = document.getElementById('nameAutocompleteDropdown');\n    const items = dropdown.querySelectorAll('.autocomplete-item');\n    \n    switch (e.key) {\n        case 'ArrowDown':\n            e.preventDefault();\n            currentSelectedIndex = Math.min(currentSelectedIndex + 1, items.length - 1);\n            updateAutocompleteSelection(items);\n            break;\n            \n        case 'ArrowUp':\n            e.preventDefault();\n            currentSelectedIndex = Math.max(currentSelectedIndex - 1, -1);\n            updateAutocompleteSelection(items);\n            break;\n            \n        case 'Enter':\n            e.preventDefault();\n            if (currentSelectedIndex >= 0 && items[currentSelectedIndex]) {\n                selectAutocompleteItem(items[currentSelectedIndex]);\n            }\n            break;\n            \n        case 'Escape':\n            e.preventDefault();\n            closeAutocompleteDropdown();\n            break;\n    }\n}\n\nfunction handleAutocompleteFocus(e) {\n    const searchTerm = e.target.value.trim();\n    if (searchTerm.length >= 2) {\n        fetchAutocompleteSuggestions(searchTerm);\n    } else if (searchTerm.length === 0) {\n        // Show popular products when focused with empty input\n        fetchPopularProducts();\n    }\n}\n\nfunction handleAutocompleteBlur(e) {\n    // Delay blur to allow click events on dropdown items\n    setTimeout(() => {\n        closeAutocompleteDropdown();\n    }, 150);\n}\n\nasync function fetchAutocompleteSuggestions(searchTerm) {\n    try {\n        showAutocompleteLoading();\n        \n        const response = await fetch(`/api/products/names?q=${encodeURIComponent(searchTerm)}`);\n        if (!response.ok) {\n            throw new Error('Failed to fetch suggestions');\n        }\n        \n        const suggestions = await response.json();\n        displayAutocompleteSuggestions(suggestions);\n        \n    } catch (error) {\n        console.error('Error fetching autocomplete suggestions:', error);\n        showAutocompleteError();\n    }\n}\n\nasync function fetchPopularProducts() {\n    try {\n        showAutocompleteLoading();\n        \n        const response = await fetch('/api/products/popular');\n        if (!response.ok) {\n            throw new Error('Failed to fetch popular products');\n        }\n        \n        const popularProducts = await response.json();\n        displayAutocompleteSuggestions(popularProducts, true); // Add flag for popular products\n        \n    } catch (error) {\n        console.error('Error fetching popular products:', error);\n        showAutocompleteError();\n    }\n}\n\nfunction showAutocompleteLoading() {\n    const dropdown = document.getElementById('nameAutocompleteDropdown');\n    dropdown.innerHTML = '<div class=\"autocomplete-loading\"><i class=\"fas fa-spinner fa-spin\"></i> Y√ºkleniyor...</div>';\n    dropdown.style.display = 'block';\n    isAutocompleteOpen = true;\n}\n\nfunction showAutocompleteError() {\n    const dropdown = document.getElementById('nameAutocompleteDropdown');\n    dropdown.innerHTML = '<div class=\"autocomplete-error\"><i class=\"fas fa-exclamation-triangle\"></i> √ñneriler y√ºklenemedi</div>';\n    dropdown.style.display = 'block';\n    isAutocompleteOpen = true;\n}\n\nfunction displayAutocompleteSuggestions(suggestions, isPopular = false) {\n    const dropdown = document.getElementById('nameAutocompleteDropdown');\n    \n    if (!suggestions || suggestions.length === 0) {\n        const message = isPopular ? 'Pop√ºler √ºr√ºn bulunamadƒ±' : 'E≈üle≈üen √ºr√ºn bulunamadƒ±';\n        dropdown.innerHTML = `<div class=\"autocomplete-empty\">${message}</div>`;\n        dropdown.style.display = 'block';\n        isAutocompleteOpen = true;\n        return;\n    }\n    \n    // Add header for popular products\n    const headerHtml = isPopular ? \n        '<div class=\"autocomplete-header\"><i class=\"fas fa-star\"></i> Pop√ºler √úr√ºnler</div>' : '';\n    \n    const html = suggestions.map((productGroup) => {\n        const mainItem = `\n            <div class=\"autocomplete-item main-item\" data-product-id=\"${productGroup.firstId}\" data-product-name=\"${productGroup.name}\">\n                <div class=\"item-content\">\n                    <div class=\"item-header\">\n                        <i class=\"fas fa-box\"></i>\n                        <span class=\"product-name\">${productGroup.name}</span>\n                        <span class=\"variant-count\">(${productGroup.variants.length} varyant)</span>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        const variants = productGroup.variants.map((variant) => {\n            const attributesText = variant.attributes && variant.attributes.length > 0 \n                ? variant.attributes.map(attr => `${attr.name}: ${attr.value}`).join(', ')\n                : '√ñzellik yok';\n            \n            const statusClass = variant.status === 'Aktif' ? 'status-active' : 'status-inactive';\n            \n            return `\n                <div class=\"autocomplete-item variant-item\" data-product-id=\"${variant.id}\" data-product-name=\"${productGroup.name}\">\n                    <div class=\"item-content\">\n                        <div class=\"variant-info\">\n                            <i class=\"fas fa-tag\"></i>\n                            <span class=\"attributes\">${attributesText}</span>\n                            <span class=\"price\">${variant.sellPrice} ${variant.sellCurrency}</span>\n                            <span class=\"status ${statusClass}\">${variant.status}</span>\n                        </div>\n                        <div class=\"variant-actions\">\n                            <button class=\"variant-action-btn edit-btn\" onclick=\"window.location.href='/products/${variant.id}/edit'\" title=\"D√ºzenle\">\n                                <i class=\"fas fa-edit\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }).join('');\n        \n        return mainItem + variants;\n    }).join('');\n    \n    dropdown.innerHTML = headerHtml + html;\n    dropdown.style.display = 'block';\n    isAutocompleteOpen = true;\n    currentSelectedIndex = -1;\n    \n    // Add click listeners to main items (not variants)\n    dropdown.querySelectorAll('.autocomplete-item.main-item').forEach(item => {\n        item.addEventListener('click', () => selectAutocompleteItem(item));\n    });\n    \n    // Prevent click propagation on edit buttons\n    dropdown.querySelectorAll('.variant-action-btn').forEach(btn => {\n        btn.addEventListener('click', (e) => {\n            e.stopPropagation();\n        });\n    });\n}\n\nfunction updateAutocompleteSelection(items) {\n    items.forEach((item, index) => {\n        if (index === currentSelectedIndex) {\n            item.classList.add('selected');\n        } else {\n            item.classList.remove('selected');\n        }\n    });\n}\n\nfunction selectAutocompleteItem(item) {\n    const productName = item.dataset.productName;\n    const nameInput = document.getElementById('productName');\n    \n    nameInput.value = productName;\n    closeAutocompleteDropdown();\n    \n    // Trigger duplicate detection\n    checkForDuplicateProduct(productName);\n}\n\nfunction closeAutocompleteDropdown() {\n    const dropdown = document.getElementById('nameAutocompleteDropdown');\n    dropdown.style.display = 'none';\n    isAutocompleteOpen = false;\n    currentSelectedIndex = -1;\n}\n\n// ===== DUPLICATE DETECTION =====\n\nfunction initDuplicateDetection() {\n    const nameInput = document.getElementById('productName');\n    if (!nameInput) return;\n    \n    // Check for duplicates on blur (with delay for autocomplete)\n    nameInput.addEventListener('blur', function(e) {\n        setTimeout(() => {\n            const productName = e.target.value.trim();\n            if (productName) {\n                checkForDuplicateProduct(productName);\n            }\n        }, 200);\n    });\n}\n\nasync function checkForDuplicateProduct(productName) {\n    const warning = document.getElementById('duplicateWarning');\n    const currentProduct = getCurrentProductBeingEdited(); // Get current product ID if editing\n    \n    try {\n        const response = await fetch(`/api/products/names?q=${encodeURIComponent(productName)}`);\n        if (!response.ok) return;\n        \n        const products = await response.json();\n        \n        // Find exact match (case-insensitive)\n        const exactMatch = products.find(product => \n            product.name.toLowerCase() === productName.toLowerCase() &&\n            product.id !== currentProduct?.id // Exclude current product when editing\n        );\n        \n        if (exactMatch) {\n            showDuplicateWarning(exactMatch);\n        } else {\n            hideDuplicateWarning();\n        }\n        \n    } catch (error) {\n        console.error('Error checking for duplicate product:', error);\n        hideDuplicateWarning();\n    }\n}\n\nfunction getCurrentProductBeingEdited() {\n    // Check if we're editing (form action contains /update)\n    const form = document.getElementById('productForm');\n    if (form && form.action.includes('/update')) {\n        const matches = form.action.match(/\\/products\\/([^\\/]+)\\/update/);\n        return matches ? { id: matches[1] } : null;\n    }\n    return null;\n}\n\nfunction showDuplicateWarning(product) {\n    const warning = document.getElementById('duplicateWarning');\n    const message = document.getElementById('duplicateMessage');\n    const editLink = document.getElementById('duplicateEditLink');\n    \n    if (warning && message && editLink) {\n        message.textContent = 'Bu adla bir √ºr√ºn zaten var.';\n        editLink.href = `/products/${product.id}/edit`;\n        warning.style.display = 'flex';\n    }\n}\n\nfunction hideDuplicateWarning() {\n    const warning = document.getElementById('duplicateWarning');\n    if (warning) {\n        warning.style.display = 'none';\n    }\n}\n\n// ===== ATTRIBUTE VALIDATION =====\n\nfunction initAttributeValidation() {\n    const attributeInputs = document.querySelectorAll('[id^=\"attribute_\"]');\n    const saveButton = document.querySelector('button[type=\"submit\"][form=\"productForm\"]');\n    \n    if (attributeInputs.length === 0) return; // No attributes to validate\n    \n    // Add event listeners to all attribute inputs\n    attributeInputs.forEach(input => {\n        input.addEventListener('input', validateAttributes);\n        input.addEventListener('change', validateAttributes);\n    });\n    \n    // Initial validation\n    validateAttributes();\n}\n\nfunction validateAttributes() {\n    const attributeInputs = document.querySelectorAll('[id^=\"attribute_\"]');\n    let filledAttributes = 0;\n    \n    attributeInputs.forEach(input => {\n        const value = input.value.trim();\n        if (value) {\n            filledAttributes++;\n        }\n    });\n    \n    const hasValidAttributes = filledAttributes >= 1;\n    updateAttributeValidationUI(hasValidAttributes, filledAttributes, attributeInputs.length);\n    \n    return hasValidAttributes;\n}\n\nfunction updateAttributeValidationUI(isValid, filledCount, totalCount) {\n    const saveButton = document.querySelector('button[type=\"submit\"][form=\"productForm\"]');\n    let validationMessage = document.getElementById('attributeValidationMessage');\n    \n    // Create validation message element if it doesn't exist\n    if (!validationMessage) {\n        validationMessage = document.createElement('div');\n        validationMessage.id = 'attributeValidationMessage';\n        validationMessage.className = 'validation-message';\n        \n        // Insert after the attributes section\n        const attributesSection = document.querySelector('.form-section:has([id^=\"attribute_\"])');\n        if (attributesSection) {\n            attributesSection.appendChild(validationMessage);\n        }\n    }\n    \n    if (!isValid && totalCount > 0) {\n        validationMessage.innerHTML = `\n            <i class=\"fas fa-exclamation-triangle\"></i>\n            En az 1 √ºr√ºn √∂zelliƒüi doldurulmalƒ±dƒ±r (${filledCount}/${totalCount} dolu)\n        `;\n        validationMessage.style.display = 'flex';\n        validationMessage.className = 'validation-message validation-error';\n    } else if (isValid && totalCount > 0) {\n        validationMessage.innerHTML = `\n            <i class=\"fas fa-check-circle\"></i>\n            √úr√ºn √∂zellikleri ge√ßerli (${filledCount}/${totalCount} dolu)\n        `;\n        validationMessage.style.display = 'flex';\n        validationMessage.className = 'validation-message validation-success';\n        \n        // Hide success message after 3 seconds\n        setTimeout(() => {\n            validationMessage.style.display = 'none';\n        }, 3000);\n    } else {\n        validationMessage.style.display = 'none';\n    }\n}\n\n// ===== UNIT SELECTION VALIDATION =====\n\nfunction initUnitValidation() {\n    const unitSelect = document.getElementById('productUnit');\n    if (!unitSelect) return;\n    \n    unitSelect.addEventListener('change', validateUnit);\n    validateUnit(); // Initial validation\n}\n\nfunction validateUnit() {\n    const unitSelect = document.getElementById('productUnit');\n    const unitValue = unitSelect?.value;\n    \n    const isValid = unitValue && unitValue.trim() !== '';\n    updateUnitValidationUI(isValid);\n    \n    return isValid;\n}\n\nfunction updateUnitValidationUI(isValid) {\n    const unitSelect = document.getElementById('productUnit');\n    if (!unitSelect) return;\n    \n    if (isValid) {\n        unitSelect.classList.remove('error');\n    } else {\n        unitSelect.classList.add('error');\n    }\n}\n\n// ===== FORM VALIDATION =====\n\nfunction initFormValidation() {\n    const form = document.getElementById('productForm');\n    if (!form) return;\n    \n    form.addEventListener('submit', handleFormSubmit);\n}\n\nfunction handleFormSubmit(e) {\n    e.preventDefault();\n    \n    const isValid = validateEntireForm();\n    \n    if (isValid) {\n        // Allow form to submit normally\n        e.target.submit();\n    } else {\n        // Focus on first invalid field\n        focusFirstInvalidField();\n    }\n}\n\nfunction validateEntireForm() {\n    let isValid = true;\n    const validationErrors = [];\n    \n    // Validate product name (required)\n    const nameInput = document.getElementById('productName');\n    if (!nameInput?.value.trim()) {\n        validationErrors.push('√úr√ºn adƒ± gereklidir');\n        nameInput?.classList.add('error');\n        isValid = false;\n    } else {\n        nameInput?.classList.remove('error');\n    }\n    \n    // Validate sell price (required)\n    const sellPriceInput = document.querySelector('[name=\"sellPrice\"]');\n    const sellPrice = parseFloat(sellPriceInput?.value || '0');\n    if (!sellPrice || sellPrice <= 0) {\n        validationErrors.push('Satƒ±≈ü fiyatƒ± gereklidir ve 0\\'dan b√ºy√ºk olmalƒ±dƒ±r');\n        sellPriceInput?.classList.add('error');\n        isValid = false;\n    } else {\n        sellPriceInput?.classList.remove('error');\n    }\n    \n    // Validate unit selection\n    if (!validateUnit()) {\n        validationErrors.push('Birim se√ßimi gereklidir');\n        isValid = false;\n    }\n    \n    // Validate attributes (if any exist)\n    const attributeInputs = document.querySelectorAll('[id^=\"attribute_\"]');\n    if (attributeInputs.length > 0 && !validateAttributes()) {\n        validationErrors.push('En az 1 √ºr√ºn √∂zelliƒüi doldurulmalƒ±dƒ±r');\n        isValid = false;\n    }\n    \n    // Display validation summary\n    displayValidationSummary(validationErrors);\n    \n    return isValid;\n}\n\nfunction displayValidationSummary(errors) {\n    let summaryElement = document.getElementById('validationSummary');\n    \n    if (errors.length === 0) {\n        // Remove validation summary if no errors\n        if (summaryElement) {\n            summaryElement.remove();\n        }\n        return;\n    }\n    \n    // Create validation summary if it doesn't exist\n    if (!summaryElement) {\n        summaryElement = document.createElement('div');\n        summaryElement.id = 'validationSummary';\n        summaryElement.className = 'validation-summary validation-error';\n        \n        // Insert at the top of the form\n        const form = document.getElementById('productForm');\n        form.insertBefore(summaryElement, form.firstChild);\n    }\n    \n    const errorList = errors.map(error => `<li>${error}</li>`).join('');\n    summaryElement.innerHTML = `\n        <div class=\"validation-header\">\n            <i class=\"fas fa-exclamation-triangle\"></i>\n            <strong>Form doƒürulama hatalarƒ±:</strong>\n        </div>\n        <ul class=\"validation-errors\">${errorList}</ul>\n    `;\n    \n    // Scroll to validation summary\n    summaryElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n}\n\nfunction focusFirstInvalidField() {\n    const invalidFields = [\n        document.getElementById('productName'),\n        document.querySelector('[name=\"sellPrice\"]'),\n        document.getElementById('productUnit'),\n        ...document.querySelectorAll('[id^=\"attribute_\"]')\n    ].filter(field => field && field.classList.contains('error'));\n    \n    if (invalidFields.length > 0) {\n        invalidFields[0].focus();\n    }\n}\n\n// ===== FILTERING SYSTEM =====\n\n// Global filter state (only for non-products pages)\nif (typeof window.filterState === 'undefined') {\n    window.filterState = {\n        searchTerm: '',\n        status: 'all',\n        buyMinPrice: '',\n        buyMaxPrice: '',\n        sellMinPrice: '',\n        sellMaxPrice: '',\n        buyCurrency: 'all',\n        sellCurrency: 'all',\n        selectedAttributes: new Map()\n    };\n}\n\n// Ensure selectedAttributes is always a Map\nif (!window.filterState.selectedAttributes || !(window.filterState.selectedAttributes instanceof Map)) {\n    window.filterState.selectedAttributes = new Map();\n}\n\n// ===== URL PARAMETER PERSISTENCE =====\n\n// Read filter state from URL query parameters\nfunction readFiltersFromURL() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const newFilterState = {\n        searchTerm: urlParams.get('search') || '',\n        status: urlParams.get('status') || 'all',\n        buyMinPrice: urlParams.get('buyMin') || '',\n        buyMaxPrice: urlParams.get('buyMax') || '',\n        sellMinPrice: urlParams.get('sellMin') || '',\n        sellMaxPrice: urlParams.get('sellMax') || '',\n        buyCurrency: urlParams.get('buyCurrency') || 'all',\n        sellCurrency: urlParams.get('sellCurrency') || 'all',\n        selectedAttributes: new Map()\n    };\n    \n    // Handle attributes from URL\n    urlParams.forEach((value, key) => {\n        if (key.startsWith('attr_')) {\n            const attributeId = key.substring(5); // Remove 'attr_' prefix\n            const values = value.split(',').filter(v => v.trim() !== '');\n            if (values.length > 0) {\n                newFilterState.selectedAttributes.set(attributeId, values);\n            }\n        }\n    });\n    \n    return newFilterState;\n}\n\n// Write current filter state to URL query parameters\nfunction writeFiltersToURL() {\n    const urlParams = new URLSearchParams();\n    \n    // Add basic filters\n    if (window.filterState.searchTerm) {\n        urlParams.set('search', window.filterState.searchTerm);\n    }\n    if (window.filterState.status !== 'all') {\n        urlParams.set('status', window.filterState.status);\n    }\n    if (window.filterState.buyMinPrice) {\n        urlParams.set('buyMin', window.filterState.buyMinPrice);\n    }\n    if (window.filterState.buyMaxPrice) {\n        urlParams.set('buyMax', window.filterState.buyMaxPrice);\n    }\n    if (window.filterState.sellMinPrice) {\n        urlParams.set('sellMin', window.filterState.sellMinPrice);\n    }\n    if (window.filterState.sellMaxPrice) {\n        urlParams.set('sellMax', window.filterState.sellMaxPrice);\n    }\n    if (window.filterState.buyCurrency !== 'all') {\n        urlParams.set('buyCurrency', window.filterState.buyCurrency);\n    }\n    if (window.filterState.sellCurrency !== 'all') {\n        urlParams.set('sellCurrency', window.filterState.sellCurrency);\n    }\n    \n    // Add attribute filters\n    if (window.filterState.selectedAttributes) {\n        window.filterState.selectedAttributes.forEach((values, attributeId) => {\n            if (values.length > 0) {\n                urlParams.set(`attr_${attributeId}`, values.join(','));\n            }\n        });\n    }\n    \n    // Update URL without page refresh\n    const newURL = urlParams.toString() ? \n        `${window.location.pathname}?${urlParams.toString()}` : \n        window.location.pathname;\n    \n    window.history.replaceState({}, '', newURL);\n}\n\n// Clear all URL parameters\nfunction clearURLParameters() {\n    window.history.replaceState({}, '', window.location.pathname);\n}\n\n// Restore UI state from current filter state\nfunction restoreUIFromFilterState() {\n    // Search input\n    const searchInput = document.getElementById('searchInput');\n    if (searchInput) {\n        searchInput.value = window.filterState.searchTerm;\n    }\n    \n    // Status radio buttons\n    const statusRadios = document.querySelectorAll('input[name=\"status\"]');\n    statusRadios.forEach(radio => {\n        radio.checked = radio.value === window.filterState.status;\n    });\n    \n    // Price inputs\n    const priceInputs = {\n        'buyMinPrice': window.filterState.buyMinPrice,\n        'buyMaxPrice': window.filterState.buyMaxPrice,\n        'sellMinPrice': window.filterState.sellMinPrice,\n        'sellMaxPrice': window.filterState.sellMaxPrice\n    };\n    \n    Object.entries(priceInputs).forEach(([id, value]) => {\n        const input = document.getElementById(id);\n        if (input) {\n            input.value = value;\n        }\n    });\n    \n    // Currency selectors\n    const buyCurrencySelect = document.getElementById('buyCurrencySelect');\n    const sellCurrencySelect = document.getElementById('sellCurrencySelect');\n    if (buyCurrencySelect) {\n        buyCurrencySelect.value = window.filterState.buyCurrency || 'all';\n    }\n    if (sellCurrencySelect) {\n        sellCurrencySelect.value = window.filterState.sellCurrency || 'all';\n    }\n    \n    // Attribute checkboxes\n    const attributeCheckboxes = document.querySelectorAll('input[name^=\"attr_\"]');\n    attributeCheckboxes.forEach(checkbox => {\n        checkbox.checked = false; // Reset first\n        \n        const attributeId = checkbox.name.replace('attr_', '');\n        const selectedValues = window.filterState.selectedAttributes.get(attributeId);\n        \n        if (selectedValues && selectedValues.includes(checkbox.value)) {\n            checkbox.checked = true;\n            \n            // Expand the accordion if any attribute is selected\n            const accordionButton = checkbox.closest('.accordion-item')?.querySelector('.accordion-toggle');\n            if (accordionButton && !accordionButton.classList.contains('active')) {\n                toggleAccordion(accordionButton);\n            }\n        }\n    });\n}\n\n// Debounce helper function\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Toggle filter panel - Centered Modal\nfunction toggleFilterPanel() {\n    const panel = document.getElementById('filterPanel');\n    const overlay = document.getElementById('filterOverlay');\n    \n    if (!panel || !overlay) return;\n    \n    const isOpen = panel.classList.contains('open');\n    \n    if (isOpen) {\n        // Close modal with fade and scale out\n        panel.classList.remove('open');\n        panel.style.opacity = '0';\n        panel.style.transform = 'translate(-50%, -50%) scale(0.9)';\n        panel.style.visibility = 'hidden';\n        overlay.classList.remove('show');\n        overlay.style.display = 'none';\n        document.body.style.overflow = '';\n    } else {\n        // Open modal with fade and scale in\n        panel.classList.add('open');\n        panel.style.opacity = '1';\n        panel.style.transform = 'translate(-50%, -50%) scale(1)';\n        panel.style.visibility = 'visible';\n        overlay.classList.add('show');\n        overlay.style.display = 'block';\n        document.body.style.overflow = 'hidden';\n    }\n}\n\n// Apply filters to products\nfunction applyFilters() {\n    console.log('Applying filters with state:', window.filterState);\n    \n    const productCards = document.querySelectorAll('.product-card');\n    let visibleCount = 0;\n    \n    productCards.forEach(card => {\n        const isVisible = shouldShowProduct(card);\n        \n        if (isVisible) {\n            card.style.display = 'block';\n            visibleCount++;\n        } else {\n            card.style.display = 'none';\n        }\n    });\n    \n    // Update active filters count\n    updateActiveFiltersCount();\n    \n    // Update stats or show no results message\n    console.log(`Filtered results: ${visibleCount} products visible`);\n    \n    // Show/hide empty state\n    toggleEmptyState(visibleCount === 0);\n    \n    // Update URL with current filter state\n    writeFiltersToURL();\n}\n\n// Determine if a product should be shown based on current filters\nfunction shouldShowProduct(card) {\n    const productData = {\n        name: card.dataset.name?.toLowerCase() || '',\n        description: card.dataset.description?.toLowerCase() || '',\n        status: card.dataset.status || '',\n        buyPrice: parseFloat(card.dataset.buyPrice) || 0,\n        sellPrice: parseFloat(card.dataset.sellPrice) || 0,\n        buyCurrency: card.dataset.buyCurrency || 'USD',\n        sellCurrency: card.dataset.sellCurrency || 'USD',\n        stock: parseInt(card.dataset.stock) || 0,\n        attributes: card.dataset.attributes ? JSON.parse(card.dataset.attributes) : []\n    };\n    \n    // Search filter\n    if (window.filterState.searchTerm && \n        !productData.name.includes(window.filterState.searchTerm.toLowerCase()) &&\n        !productData.description.includes(window.filterState.searchTerm.toLowerCase())) {\n        return false;\n    }\n    \n    // Status filter\n    if (window.filterState.status !== 'all' && productData.status !== window.filterState.status) {\n        return false;\n    }\n    \n    // Buy price filter (only apply if currency matches or no currency filter)\n    if ((window.filterState.buyMinPrice !== '' || window.filterState.buyMaxPrice !== '') &&\n        (window.filterState.buyCurrency === 'all' || window.filterState.buyCurrency === productData.buyCurrency)) {\n        \n        if (window.filterState.buyMinPrice !== '' && productData.buyPrice < parseFloat(window.filterState.buyMinPrice)) {\n            return false;\n        }\n        if (window.filterState.buyMaxPrice !== '' && productData.buyPrice > parseFloat(window.filterState.buyMaxPrice)) {\n            return false;\n        }\n    }\n    \n    // Sell price filter (only apply if currency matches or no currency filter)\n    if ((window.filterState.sellMinPrice !== '' || window.filterState.sellMaxPrice !== '') &&\n        (window.filterState.sellCurrency === 'all' || window.filterState.sellCurrency === productData.sellCurrency)) {\n        \n        if (window.filterState.sellMinPrice !== '' && productData.sellPrice < parseFloat(window.filterState.sellMinPrice)) {\n            return false;\n        }\n        if (window.filterState.sellMaxPrice !== '' && productData.sellPrice > parseFloat(window.filterState.sellMaxPrice)) {\n            return false;\n        }\n    }\n    \n    // Attribute filters\n    if (window.filterState.selectedAttributes && window.filterState.selectedAttributes.size > 0) {\n        for (let [attributeId, selectedValues] of window.filterState.selectedAttributes) {\n            if (selectedValues.length === 0) continue;\n            \n            const productAttribute = productData.attributes.find(attr => attr.attributeId === attributeId);\n            if (!productAttribute || !selectedValues.includes(productAttribute.value)) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\n// Update active filters count badge and chips\nfunction updateActiveFiltersCount() {\n    const badge = document.getElementById('activeFiltersCount');\n    if (!badge) return;\n    \n    let count = 0;\n    \n    if (window.filterState.searchTerm) count++;\n    if (window.filterState.status !== 'all') count++;\n    if (window.filterState.buyMinPrice || window.filterState.buyMaxPrice) count++;\n    if (window.filterState.sellMinPrice || window.filterState.sellMaxPrice) count++;\n    if (window.filterState.buyCurrency !== 'all' || window.filterState.sellCurrency !== 'all') count++;\n    count += (window.filterState.selectedAttributes ? window.filterState.selectedAttributes.size : 0);\n    \n    if (count > 0) {\n        badge.textContent = count;\n        badge.style.display = 'inline-block';\n    } else {\n        badge.style.display = 'none';\n    }\n    \n    // Update active filter chips\n    renderActiveFilterChips();\n}\n\n// Render active filter chips\nfunction renderActiveFilterChips() {\n    const activeFiltersSection = document.getElementById('activeFiltersSection');\n    const activeFiltersContainer = document.getElementById('activeFiltersContainer');\n    \n    if (!activeFiltersSection || !activeFiltersContainer) return;\n    \n    // Clear existing chips\n    activeFiltersContainer.innerHTML = '';\n    \n    const chips = [];\n    \n    // Search term chip\n    if (window.filterState.searchTerm) {\n        chips.push({\n            type: 'search',\n            label: `Arama: \"${window.filterState.searchTerm}\"`,\n            onRemove: () => {\n                document.getElementById('searchInput').value = '';\n                window.filterState.searchTerm = '';\n                applyFilters();\n            }\n        });\n    }\n    \n    // Status chip\n    if (window.filterState.status !== 'all') {\n        const statusLabels = {\n            'Aktif': 'Aktif',\n            'Pasif': 'Pasif'\n        };\n        chips.push({\n            type: 'status',\n            label: `Durum: ${statusLabels[window.filterState.status] || window.filterState.status}`,\n            onRemove: () => {\n                const allRadio = document.querySelector('input[name=\"status\"][value=\"all\"]');\n                if (allRadio) allRadio.checked = true;\n                window.filterState.status = 'all';\n                applyFilters();\n            }\n        });\n    }\n    \n    // Buy price range chip\n    if (window.filterState.buyMinPrice || window.filterState.buyMaxPrice) {\n        const min = window.filterState.buyMinPrice || '0';\n        const max = window.filterState.buyMaxPrice || '‚àû';\n        const currency = window.filterState.buyCurrency || 'USD';\n        chips.push({\n            type: 'buy-price',\n            label: `Alƒ±≈ü: ${min} - ${max} ${currency}`,\n            onRemove: () => {\n                const buyMinInput = document.getElementById('buyMinPrice');\n                const buyMaxInput = document.getElementById('buyMaxPrice');\n                const buyCurrencySelect = document.getElementById('buyCurrencySelect');\n                if (buyMinInput) buyMinInput.value = '';\n                if (buyMaxInput) buyMaxInput.value = '';\n                if (buyCurrencySelect) buyCurrencySelect.value = 'all';\n                window.filterState.buyMinPrice = '';\n                window.filterState.buyMaxPrice = '';\n                window.filterState.buyCurrency = 'all';\n                applyFilters();\n            }\n        });\n    }\n    \n    // Sell price range chip\n    if (window.filterState.sellMinPrice || window.filterState.sellMaxPrice) {\n        const min = window.filterState.sellMinPrice || '0';\n        const max = window.filterState.sellMaxPrice || '‚àû';\n        const currency = window.filterState.sellCurrency || 'USD';\n        chips.push({\n            type: 'sell-price',\n            label: `Satƒ±≈ü: ${min} - ${max} ${currency}`,\n            onRemove: () => {\n                const sellMinInput = document.getElementById('sellMinPrice');\n                const sellMaxInput = document.getElementById('sellMaxPrice');\n                const sellCurrencySelect = document.getElementById('sellCurrencySelect');\n                if (sellMinInput) sellMinInput.value = '';\n                if (sellMaxInput) sellMaxInput.value = '';\n                if (sellCurrencySelect) sellCurrencySelect.value = 'all';\n                window.filterState.sellMinPrice = '';\n                window.filterState.sellMaxPrice = '';\n                window.filterState.sellCurrency = 'all';\n                applyFilters();\n            }\n        });\n    }\n    \n    // Attribute chips\n    if (window.filterState.selectedAttributes) {\n        window.filterState.selectedAttributes.forEach((values, attributeId) => {\n            if (values.length > 0) {\n                // Get attribute name from DOM\n                const attributeContainer = document.querySelector(`[data-testid=\"button-accordion-${attributeId}\"]`);\n                const attributeName = attributeContainer ? attributeContainer.querySelector('span').textContent : `Attribute ${attributeId}`;\n                \n                chips.push({\n                    type: 'attribute',\n                    label: `${attributeName}: ${values.join(', ')}`,\n                    onRemove: () => {\n                        // Uncheck all related checkboxes\n                        const checkboxes = document.querySelectorAll(`input[name=\"attr_${attributeId}\"]`);\n                        checkboxes.forEach(cb => cb.checked = false);\n                        window.filterState.selectedAttributes.delete(attributeId);\n                        applyFilters();\n                    }\n                });\n            }\n        });\n    }\n    \n    // Show/hide the active filters section\n    if (chips.length > 0) {\n        activeFiltersSection.style.display = 'block';\n        \n        // Render chips\n        chips.forEach(chip => {\n            const chipElement = document.createElement('div');\n            chipElement.className = 'filter-chip';\n            chipElement.dataset.testid = `chip-${chip.type}`;\n            chipElement.innerHTML = `\n                <span class=\"filter-chip-label\"></span>\n                <button class=\"filter-chip-remove\" onclick=\"event.stopPropagation();\" data-testid=\"button-remove-${chip.type}\">\n                    <i class=\"fas fa-times\"></i>\n                </button>\n            `;\n            \n            // Safely set the label text to prevent XSS\n            const labelSpan = chipElement.querySelector('.filter-chip-label');\n            labelSpan.textContent = chip.label;\n            \n            // Add click handler to remove button\n            const removeBtn = chipElement.querySelector('.filter-chip-remove');\n            removeBtn.addEventListener('click', chip.onRemove);\n            \n            activeFiltersContainer.appendChild(chipElement);\n        });\n    } else {\n        activeFiltersSection.style.display = 'none';\n    }\n}\n\n// Toggle empty state visibility\nfunction toggleEmptyState(show) {\n    const contentBody = document.getElementById('contentBody');\n    if (!contentBody) return;\n    \n    const productsGrid = contentBody.querySelector('.products-grid');\n    let emptyState = contentBody.querySelector('.filter-empty-state');\n    \n    if (show && !emptyState) {\n        emptyState = document.createElement('div');\n        emptyState.className = 'filter-empty-state text-center';\n        emptyState.style.cssText = 'padding: 60px 20px;';\n        emptyState.innerHTML = `\n            <div class=\"card\" style=\"max-width: 400px; margin: 0 auto; padding: 40px;\">\n                <i class=\"fas fa-search\" style=\"font-size: 3rem; color: var(--muted); margin-bottom: 20px;\"></i>\n                <h3 style=\"color: var(--muted); margin-bottom: 12px;\">Filtre sonucu bulunamadƒ±</h3>\n                <p class=\"text-muted mb-lg\">Arama kriterlerinizi deƒüi≈ütirip tekrar deneyin.</p>\n                <button onclick=\"clearAllFilters()\" class=\"btn btn-primary\">\n                    <i class=\"fas fa-times\"></i>\n                    Filtreleri Temizle\n                </button>\n            </div>\n        `;\n        contentBody.appendChild(emptyState);\n    } else if (!show && emptyState) {\n        emptyState.remove();\n    }\n    \n    if (productsGrid) {\n        productsGrid.style.display = show ? 'none' : 'grid';\n    }\n}\n\n// Clear all filters\nfunction clearAllFilters() {\n    console.log('Clearing all filters');\n    \n    // Reset filter state\n    window.filterState = {\n        searchTerm: '',\n        status: 'all',\n        buyMinPrice: '',\n        buyMaxPrice: '',\n        sellMinPrice: '',\n        sellMaxPrice: '',\n        buyCurrency: 'all',\n        sellCurrency: 'all',\n        selectedAttributes: new Map()\n    };\n    \n    // Reset form controls\n    const searchInput = document.getElementById('searchInput');\n    if (searchInput) searchInput.value = '';\n    \n    // Reset status radio buttons\n    const statusRadios = document.querySelectorAll('input[name=\"status\"]');\n    statusRadios.forEach(radio => {\n        radio.checked = radio.value === 'all';\n    });\n    \n    // Reset price inputs\n    ['buyMinPrice', 'buyMaxPrice', 'sellMinPrice', 'sellMaxPrice'].forEach(id => {\n        const input = document.getElementById(id);\n        if (input) input.value = '';\n    });\n    \n    // Reset currency selectors\n    const buyCurrencySelect = document.getElementById('buyCurrencySelect');\n    const sellCurrencySelect = document.getElementById('sellCurrencySelect');\n    if (buyCurrencySelect) buyCurrencySelect.value = 'all';\n    if (sellCurrencySelect) sellCurrencySelect.value = 'all';\n    \n    // Reset attribute checkboxes\n    const attributeCheckboxes = document.querySelectorAll('input[name^=\"attr_\"]');\n    attributeCheckboxes.forEach(checkbox => {\n        checkbox.checked = false;\n    });\n    \n    // Close accordions\n    const accordionToggles = document.querySelectorAll('.accordion-toggle');\n    accordionToggles.forEach(toggle => {\n        toggle.classList.remove('active');\n        const content = toggle.nextElementSibling;\n        if (content) content.style.maxHeight = '0px';\n    });\n    \n    // Clear URL parameters\n    clearURLParameters();\n    \n    // Apply cleared filters\n    applyFilters();\n}\n\n// Initialize filter system\nfunction initFilterSystem() {\n    console.log('Initializing filter system');\n    \n    // FORCE filter panel to be closed by default\n    const panel = document.getElementById('filterPanel');\n    const overlay = document.getElementById('filterOverlay');\n    if (panel) {\n        panel.classList.remove('open');\n        panel.style.transform = 'translateX(-100%)';\n        panel.style.visibility = 'hidden';\n    }\n    if (overlay) {\n        overlay.classList.remove('show');\n        overlay.style.display = 'none';\n    }\n    // Reset body overflow\n    document.body.style.overflow = '';\n    \n    // Initialize from URL parameters first\n    const urlFilterState = readFiltersFromURL();\n    if (urlFilterState) {\n        window.filterState = urlFilterState;\n        restoreUIFromFilterState();\n    }\n    \n    // Search input with debounce\n    const searchInput = document.getElementById('searchInput');\n    if (searchInput) {\n        const debouncedSearch = debounce((value) => {\n            window.filterState.searchTerm = value.trim();\n            applyFilters();\n        }, 300);\n        \n        searchInput.addEventListener('input', (e) => {\n            debouncedSearch(e.target.value);\n        });\n    }\n    \n    // Status radio buttons\n    const statusRadios = document.querySelectorAll('input[name=\"status\"]');\n    statusRadios.forEach(radio => {\n        radio.addEventListener('change', (e) => {\n            if (e.target.checked) {\n                window.filterState.status = e.target.value;\n                applyFilters();\n            }\n        });\n    });\n    \n    // Price inputs\n    ['buyMinPrice', 'buyMaxPrice', 'sellMinPrice', 'sellMaxPrice'].forEach(id => {\n        const input = document.getElementById(id);\n        if (input) {\n            const debouncedPriceFilter = debounce(() => {\n                window.filterState[id] = input.value;\n                applyFilters();\n            }, 500);\n            \n            input.addEventListener('input', debouncedPriceFilter);\n        }\n    });\n    \n    // Currency selectors\n    const buyCurrencySelect = document.getElementById('buyCurrencySelect');\n    const sellCurrencySelect = document.getElementById('sellCurrencySelect');\n    \n    if (buyCurrencySelect) {\n        buyCurrencySelect.addEventListener('change', (e) => {\n            window.filterState.buyCurrency = e.target.value;\n            applyFilters();\n        });\n    }\n    \n    if (sellCurrencySelect) {\n        sellCurrencySelect.addEventListener('change', (e) => {\n            window.filterState.sellCurrency = e.target.value;\n            applyFilters();\n        });\n    }\n    \n    // Attribute checkboxes\n    const attributeCheckboxes = document.querySelectorAll('input[name^=\"attr_\"]');\n    attributeCheckboxes.forEach(checkbox => {\n        checkbox.addEventListener('change', (e) => {\n            const attributeId = e.target.name.replace('attr_', '');\n            const value = e.target.value;\n            \n            if (!window.filterState.selectedAttributes.has(attributeId)) {\n                window.filterState.selectedAttributes.set(attributeId, []);\n            }\n            \n            const selectedValues = window.filterState.selectedAttributes.get(attributeId);\n            \n            if (e.target.checked) {\n                if (!selectedValues.includes(value)) {\n                    selectedValues.push(value);\n                }\n            } else {\n                const index = selectedValues.indexOf(value);\n                if (index > -1) {\n                    selectedValues.splice(index, 1);\n                }\n                \n                if (selectedValues.length === 0) {\n                    window.filterState.selectedAttributes.delete(attributeId);\n                }\n            }\n            \n            applyFilters();\n        });\n    });\n    \n    // Initialize accordion functionality\n    initAccordions();\n    \n    // Apply initial filters if any were loaded from URL\n    if (urlFilterState && Object.values(urlFilterState).some(val => \n        val !== '' && val !== 'all' && !(val instanceof Map && val.size === 0))) {\n        applyFilters();\n    }\n}\n\n// Accordion functionality\nfunction toggleAccordion(button) {\n    const isActive = button.classList.contains('active');\n    const content = button.nextElementSibling;\n    \n    if (isActive) {\n        button.classList.remove('active');\n        content.style.maxHeight = '0px';\n    } else {\n        button.classList.add('active');\n        content.style.maxHeight = content.scrollHeight + 'px';\n    }\n}\n\nfunction initAccordions() {\n    const accordionButtons = document.querySelectorAll('.accordion-toggle');\n    accordionButtons.forEach(button => {\n        button.addEventListener('click', () => toggleAccordion(button));\n    });\n}\n\n// ===== INITIALIZE FILTER SYSTEM =====\n\nfunction initFilterSystem() {\n    console.log('Initializing filter system');\n    \n    // Read filter state from URL parameters\n    const urlFilterState = readFiltersFromURL();\n    if (urlFilterState) {\n        window.filterState = urlFilterState;\n        restoreUIFromFilterState();\n    }\n    \n    // Search input with debounce\n    const searchInput = document.getElementById('searchInput');\n    if (searchInput) {\n        const debouncedSearch = debounce((value) => {\n            window.filterState.searchTerm = value.trim();\n            applyFilters();\n        }, 300);\n        \n        searchInput.addEventListener('input', (e) => {\n            debouncedSearch(e.target.value);\n        });\n    }\n    \n    // Status radio buttons\n    const statusRadios = document.querySelectorAll('input[name=\"status\"]');\n    statusRadios.forEach(radio => {\n        radio.addEventListener('change', (e) => {\n            if (e.target.checked) {\n                window.filterState.status = e.target.value;\n                applyFilters();\n            }\n        });\n    });\n    \n    // Price inputs\n    ['buyMinPrice', 'buyMaxPrice', 'sellMinPrice', 'sellMaxPrice'].forEach(id => {\n        const input = document.getElementById(id);\n        if (input) {\n            const debouncedPriceFilter = debounce(() => {\n                window.filterState[id] = input.value;\n                applyFilters();\n            }, 500);\n            \n            input.addEventListener('input', debouncedPriceFilter);\n        }\n    });\n    \n    // Currency selectors\n    const buyCurrencySelect = document.getElementById('buyCurrencySelect');\n    const sellCurrencySelect = document.getElementById('sellCurrencySelect');\n    \n    if (buyCurrencySelect) {\n        buyCurrencySelect.addEventListener('change', (e) => {\n            window.filterState.buyCurrency = e.target.value;\n            applyFilters();\n        });\n    }\n    \n    if (sellCurrencySelect) {\n        sellCurrencySelect.addEventListener('change', (e) => {\n            window.filterState.sellCurrency = e.target.value;\n            applyFilters();\n        });\n    }\n    \n    // Attribute checkboxes\n    const attributeCheckboxes = document.querySelectorAll('input[name^=\"attr_\"]');\n    attributeCheckboxes.forEach(checkbox => {\n        checkbox.addEventListener('change', (e) => {\n            const attributeId = e.target.name.replace('attr_', '');\n            const value = e.target.value;\n            \n            if (!window.filterState.selectedAttributes.has(attributeId)) {\n                window.filterState.selectedAttributes.set(attributeId, []);\n            }\n            \n            const selectedValues = window.filterState.selectedAttributes.get(attributeId);\n            \n            if (e.target.checked) {\n                if (!selectedValues.includes(value)) {\n                    selectedValues.push(value);\n                }\n            } else {\n                const index = selectedValues.indexOf(value);\n                if (index > -1) {\n                    selectedValues.splice(index, 1);\n                }\n                \n                if (selectedValues.length === 0) {\n                    window.filterState.selectedAttributes.delete(attributeId);\n                }\n            }\n            \n            applyFilters();\n        });\n    });\n    \n    // Initialize accordion functionality\n    initAccordions();\n    \n    // Apply initial filters if any were loaded from URL\n    if (urlFilterState && Object.values(urlFilterState).some(val => \n        val !== '' && val !== 'all' && !(val instanceof Map && val.size === 0))) {\n        applyFilters();\n    }\n}\n\n// Clear all filters function\nfunction clearAllFilters() {\n    // Reset filter state\n    window.filterState = {\n        searchTerm: '',\n        status: 'all',\n        buyMinPrice: '',\n        buyMaxPrice: '',\n        sellMinPrice: '',\n        sellMaxPrice: '',\n        buyCurrency: 'all',\n        sellCurrency: 'all',\n        selectedAttributes: new Map()\n    };\n    \n    // Reset UI elements\n    const searchInput = document.getElementById('searchInput');\n    if (searchInput) searchInput.value = '';\n    \n    const statusRadios = document.querySelectorAll('input[name=\"status\"]');\n    statusRadios.forEach(radio => {\n        radio.checked = radio.value === 'all';\n    });\n    \n    ['buyMinPrice', 'buyMaxPrice', 'sellMinPrice', 'sellMaxPrice'].forEach(id => {\n        const input = document.getElementById(id);\n        if (input) input.value = '';\n    });\n    \n    const buyCurrencySelect = document.getElementById('buyCurrencySelect');\n    const sellCurrencySelect = document.getElementById('sellCurrencySelect');\n    if (buyCurrencySelect) buyCurrencySelect.value = 'all';\n    if (sellCurrencySelect) sellCurrencySelect.value = 'all';\n    \n    const attributeCheckboxes = document.querySelectorAll('input[name^=\"attr_\"]');\n    attributeCheckboxes.forEach(checkbox => {\n        checkbox.checked = false;\n    });\n    \n    // Close all accordions\n    const accordionButtons = document.querySelectorAll('.accordion-toggle.active');\n    accordionButtons.forEach(button => {\n        toggleAccordion(button);\n    });\n    \n    // Clear URL parameters\n    clearURLParameters();\n    \n    // Apply filters to show all products\n    applyFilters();\n    \n    // Close filter panel\n    toggleFilterPanel();\n}\n\n// Initialize filter system when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    initFilterSystem();\n});","size_bytes":71235},"public/js/stockByWarehouse.js":{"content":"/**\n * Enhanced Stock by Warehouse JavaScript\n * Professional ERP-level functionality with real-time filtering, export, and analytics\n */\n\n// Safe helper function for adding event listeners\nconst safeAddEventListener = (selector, eventType, handler) => {\n    const element = typeof selector === 'string' ? document.querySelector(selector) : selector;\n    if (element) {\n        element.addEventListener(eventType, handler);\n        return true;\n    }\n    return false;\n};\n\nclass StockWarehouseManager {\n    constructor() {\n        this.allBarcodes = [];\n        this.filteredBarcodes = [];\n        this.warehouses = [];\n        this.stockStats = {};\n        this.currentFilters = {\n            warehouseId: '',\n            shelfIds: [], // Changed to array for multiple shelf selection\n            productName: ''\n        };\n        \n        // Pagination properties\n        this.currentPage = 1;\n        this.itemsPerPage = 30;\n        this.currentView = 'table'; // 'table' or 'list'\n        \n        // Shelf dropdown state\n        this.shelfDropdownOpen = false;\n        this.selectedShelves = new Set();\n        \n        this.init();\n    }\n\n    async init() {\n        console.log('Initializing Enhanced Stock Warehouse Manager');\n        \n        // Extract data from the page\n        this.extractPageData();\n        \n        // Initialize event listeners\n        this.initEventListeners();\n        \n        // Initialize real-time filtering\n        this.initRealTimeFiltering();\n        \n        // Set initial filtered data\n        this.filteredBarcodes = [...this.allBarcodes];\n        this.updateStatistics();\n        this.initializePagination();\n        \n        console.log(`Loaded ${this.allBarcodes.length} barcodes`);\n    }\n\n    extractPageData() {\n        // Extract barcodes from table rows\n        this.allBarcodes = Array.from(document.querySelectorAll('#barcode-table-body tr.table-row')).map(row => {\n            return {\n                code: row.dataset.barcode,\n                productId: row.dataset.productId,\n                warehouseId: row.dataset.warehouseId,\n                shelfId: row.dataset.shelfId || null,\n                productName: row.dataset.productName,\n                quantity: parseFloat(row.querySelector('.quantity-badge').textContent.match(/[\\d.]+/)[0] || 0),\n                unit: row.querySelector('.quantity-badge').textContent.includes('m') ? 'metre' : 'adet',\n                attributes: this.extractAttributesFromRow(row),\n                element: row\n            };\n        });\n\n        // Extract warehouses from select options\n        this.warehouses = Array.from(document.querySelectorAll('#warehouse-filter option')).filter(option => option.value !== '').map(option => {\n            let shelves = [];\n            if (option.dataset.shelves) {\n                try {\n                    // Decode HTML entities before parsing JSON\n                    const decodedShelves = option.dataset.shelves\n                        .replace(/&quot;/g, '\"')\n                        .replace(/&amp;/g, '&')\n                        .replace(/&lt;/g, '<')\n                        .replace(/&gt;/g, '>');\n                    shelves = JSON.parse(decodedShelves);\n                } catch (e) {\n                    console.warn('Failed to parse shelves data:', e);\n                    shelves = [];\n                }\n            }\n            return {\n                id: option.value,\n                name: option.textContent.trim(),\n                hasShelfSystem: option.dataset.hasShelf === 'true',\n                shelves: shelves\n            };\n        });\n\n        // Extract stock stats from page\n        this.stockStats = this.extractStockStats();\n    }\n\n    extractAttributesFromRow(row) {\n        const attributesCell = row.querySelector('.features-cell');\n        if (!attributesCell) return [];\n        \n        return Array.from(attributesCell.querySelectorAll('.feature-tag')).map(tag => {\n            const text = tag.textContent.trim();\n            const [name, value] = text.split(': ');\n            return { name: name || '', value: value || '' };\n        });\n    }\n\n    extractStockStats() {\n        return {\n            totalBarcodes: parseInt(document.getElementById('filtered-total-barcodes')?.textContent || '0'),\n            totalPieces: parseInt(document.getElementById('filtered-total-pieces')?.textContent || '0'),\n            totalMeters: parseFloat(document.getElementById('filtered-total-meters')?.textContent || '0'),\n            uniqueProducts: parseInt(document.getElementById('filtered-unique-products')?.textContent || '0')\n        };\n    }\n\n    initEventListeners() {\n        // Warehouse filter change\n        safeAddEventListener('#warehouse-filter', 'change', (e) => {\n            this.handleWarehouseChange(e.target.value);\n        });\n\n        // Multi-shelf selector click outside to close\n        document.addEventListener('click', (e) => {\n            const shelfContainer = document.querySelector('.multi-shelf-container');\n            if (shelfContainer && !shelfContainer.contains(e.target)) {\n                this.closeShelfDropdown();\n            }\n        });\n\n        // Product search (main filter)\n        safeAddEventListener('#product-search', 'input', (e) => {\n            this.currentFilters.productName = e.target.value.toLowerCase();\n            this.applyFilters();\n        });\n\n        // Quick product search (real-time)\n        safeAddEventListener('#quick-product-search', 'input', (e) => {\n            this.handleQuickProductSearch(e.target.value);\n        });\n\n        // Reset filters\n        safeAddEventListener('#reset-filters', 'click', () => {\n            this.clearAllFilters();\n        });\n\n        // Form submit (prevent default)\n        safeAddEventListener('#filter-form', 'submit', (e) => {\n            e.preventDefault();\n            this.applyFilters();\n        });\n\n        // Pagination controls (safe)\n        safeAddEventListener('#prev-page', 'click', () => {\n            this.changePage(-1);\n        });\n\n        safeAddEventListener('#next-page', 'click', () => {\n            this.changePage(1);\n        });\n\n        safeAddEventListener('#first-page', 'click', () => {\n            this.goToPage(1);\n        });\n\n        safeAddEventListener('#last-page', 'click', () => {\n            const totalPages = Math.ceil(this.filteredBarcodes.length / this.itemsPerPage);\n            this.goToPage(totalPages);\n        });\n\n        // Items per page selector (safe)\n        safeAddEventListener('#items-per-page', 'change', (e) => {\n            this.changeItemsPerPage(parseInt(e.target.value));\n        });\n\n        // View toggle buttons (safe)\n        document.querySelectorAll('.view-btn').forEach(btn => {\n            if (btn) {\n                btn.addEventListener('click', (e) => {\n                    const view = e.target.dataset.view || e.target.closest('.view-btn')?.dataset?.view;\n                    if (view) {\n                        this.switchView(view);\n                    }\n                });\n            }\n        });\n\n        // Export buttons (safe)\n        safeAddEventListener('#export-excel', 'click', () => {\n            this.exportToExcel();\n        });\n\n        safeAddEventListener('#export-csv', 'click', () => {\n            this.exportToCSV();\n        });\n    }\n\n    initRealTimeFiltering() {\n        // Debounced search function\n        const productSearch = document.getElementById('product-search');\n        if (productSearch) {\n            let debounceTimer;\n            productSearch.addEventListener('input', (e) => {\n                clearTimeout(debounceTimer);\n                debounceTimer = setTimeout(() => {\n                    this.currentFilters.productName = e.target.value.toLowerCase();\n                    this.applyFilters();\n                }, 300);\n            });\n        }\n    }\n\n    handleWarehouseChange(warehouseId) {\n        this.currentFilters.warehouseId = warehouseId;\n        \n        // Update shelf options\n        this.updateShelfOptions(warehouseId);\n        \n        // Reset shelf selection\n        this.currentFilters.shelfIds = [];\n        this.selectedShelves.clear();\n        this.updateShelfDisplay();\n        \n        // Apply filters\n        this.applyFilters();\n    }\n\n    updateShelfOptions(warehouseId) {\n        const shelfOptionsContainer = document.getElementById('shelf-options-container');\n        if (!shelfOptionsContainer) return;\n\n        // Clear existing options\n        shelfOptionsContainer.innerHTML = '';\n        \n        if (!warehouseId) {\n            shelfOptionsContainer.innerHTML = '<div class=\"no-shelves-message\">Depo se√ßiniz</div>';\n            return;\n        }\n\n        const warehouse = this.warehouses.find(w => w.id === warehouseId);\n        if (warehouse && warehouse.hasShelfSystem && warehouse.shelves.length > 0) {\n            warehouse.shelves.forEach(shelf => {\n                const option = document.createElement('div');\n                option.className = 'shelf-option';\n                option.innerHTML = `\n                    <label class=\"shelf-checkbox-label\">\n                        <input type=\"checkbox\" value=\"${shelf}\" onchange=\"handleShelfCheckboxChange('${shelf}', this.checked)\">\n                        <span class=\"shelf-name\">${shelf}</span>\n                    </label>\n                `;\n                shelfOptionsContainer.appendChild(option);\n            });\n        } else {\n            shelfOptionsContainer.innerHTML = '<div class=\"no-shelves-message\">Bu depoda raf sistemi yok</div>';\n        }\n    }\n\n    // Multi-Shelf Selection Methods\n    toggleShelfDropdown() {\n        const dropdown = document.getElementById('shelf-dropdown');\n        const arrow = document.querySelector('.dropdown-arrow');\n        \n        if (!dropdown) return;\n        \n        this.shelfDropdownOpen = !this.shelfDropdownOpen;\n        \n        if (this.shelfDropdownOpen) {\n            dropdown.style.display = 'block';\n            if (arrow) arrow.classList.add('rotated');\n        } else {\n            dropdown.style.display = 'none';\n            if (arrow) arrow.classList.remove('rotated');\n        }\n    }\n\n    closeShelfDropdown() {\n        const dropdown = document.getElementById('shelf-dropdown');\n        const arrow = document.querySelector('.dropdown-arrow');\n        \n        if (dropdown && this.shelfDropdownOpen) {\n            dropdown.style.display = 'none';\n            if (arrow) arrow.classList.remove('rotated');\n            this.shelfDropdownOpen = false;\n        }\n    }\n\n    handleShelfSelection(shelfId, isSelected) {\n        if (isSelected) {\n            this.selectedShelves.add(shelfId);\n        } else {\n            this.selectedShelves.delete(shelfId);\n        }\n        \n        this.currentFilters.shelfIds = Array.from(this.selectedShelves);\n        this.updateShelfDisplay();\n        this.applyFilters();\n    }\n\n    // New method to handle checkbox changes from the template\n    handleShelfCheckboxChange(shelfId, isChecked) {\n        this.handleShelfSelection(shelfId, isChecked);\n    }\n\n    updateShelfDisplay() {\n        const display = document.getElementById('selected-shelves-display');\n        if (!display) return;\n        \n        const placeholder = display.querySelector('.placeholder-text');\n        const tagsContainer = display.querySelector('.selected-shelves-tags');\n        \n        // Remove existing tags container\n        if (tagsContainer) {\n            tagsContainer.remove();\n        }\n        \n        if (this.selectedShelves.size === 0) {\n            if (placeholder) {\n                placeholder.style.display = 'block';\n                placeholder.textContent = this.currentFilters.warehouseId ? \n                    'Raf se√ßiniz' : 'Raf se√ßmek i√ßin depo se√ßiniz';\n            }\n        } else {\n            if (placeholder) {\n                placeholder.style.display = 'none';\n            }\n            \n            const newTagsContainer = document.createElement('div');\n            newTagsContainer.className = 'selected-shelves-tags';\n            \n            Array.from(this.selectedShelves).forEach(shelf => {\n                const tag = document.createElement('span');\n                tag.className = 'shelf-tag';\n                tag.innerHTML = `\n                    ${shelf}\n                    <i class=\"fas fa-times remove\" onclick=\"stockManager.removeShelfSelection('${shelf}')\"></i>\n                `;\n                newTagsContainer.appendChild(tag);\n            });\n            \n            display.insertBefore(newTagsContainer, display.querySelector('.dropdown-arrow'));\n        }\n    }\n\n    removeShelfSelection(shelfId) {\n        this.selectedShelves.delete(shelfId);\n        this.currentFilters.shelfIds = Array.from(this.selectedShelves);\n        \n        // Update checkbox state\n        const checkbox = document.querySelector(`input[value=\"${shelfId}\"]`);\n        if (checkbox) {\n            checkbox.checked = false;\n        }\n        \n        this.updateShelfDisplay();\n        this.applyFilters();\n    }\n\n    clearSelectedShelves() {\n        this.selectedShelves.clear();\n        this.currentFilters.shelfIds = [];\n        \n        // Update all checkboxes\n        document.querySelectorAll('.shelf-option input[type=\"checkbox\"]').forEach(checkbox => {\n            checkbox.checked = false;\n        });\n        \n        this.updateShelfDisplay();\n        this.applyFilters();\n    }\n\n    selectAllShelves() {\n        const warehouse = this.warehouses.find(w => w.id === this.currentFilters.warehouseId);\n        if (!warehouse || !warehouse.shelves) return;\n        \n        warehouse.shelves.forEach(shelf => {\n            this.selectedShelves.add(shelf);\n        });\n        \n        this.currentFilters.shelfIds = Array.from(this.selectedShelves);\n        \n        // Update all checkboxes\n        document.querySelectorAll('.shelf-option input[type=\"checkbox\"]').forEach(checkbox => {\n            checkbox.checked = true;\n        });\n        \n        this.updateShelfDisplay();\n        this.applyFilters();\n    }\n\n    // Quick Shelf Selection Methods (for quick filters section - Button-based)\n    toggleQuickShelfSelection(shelfId) {\n        const button = document.querySelector(`[data-shelf-id=\"${shelfId}\"]`);\n        if (!button) return;\n        \n        const isSelected = this.selectedShelves.has(shelfId);\n        \n        if (isSelected) {\n            this.selectedShelves.delete(shelfId);\n            button.classList.remove('selected');\n        } else {\n            this.selectedShelves.add(shelfId);\n            button.classList.add('selected');\n        }\n        \n        this.currentFilters.shelfIds = Array.from(this.selectedShelves);\n        \n        // Sync with main shelf dropdown if open\n        this.syncShelfSelections();\n        this.updateShelfDisplay();\n        this.applyFilters();\n    }\n\n    // Legacy method for backwards compatibility - now redirects to button method\n    handleQuickShelfSelection(shelfId, isSelected) {\n        // For any remaining checkbox functionality\n        if (isSelected) {\n            this.selectedShelves.add(shelfId);\n        } else {\n            this.selectedShelves.delete(shelfId);\n        }\n        \n        this.currentFilters.shelfIds = Array.from(this.selectedShelves);\n        this.syncShelfSelections();\n        this.updateShelfDisplay();\n        this.applyFilters();\n    }\n\n    selectAllQuickShelves() {\n        // Get all available shelves from quick filters (buttons)\n        const quickShelfButtons = document.querySelectorAll('.quick-shelf-btn');\n        \n        quickShelfButtons.forEach(button => {\n            const shelfId = button.dataset.shelfId;\n            if (shelfId) {\n                this.selectedShelves.add(shelfId);\n                button.classList.add('selected');\n            }\n        });\n        \n        // Also handle any remaining checkboxes for backwards compatibility\n        const quickShelfCheckboxes = document.querySelectorAll('.shelf-checkbox');\n        quickShelfCheckboxes.forEach(checkbox => {\n            const shelfId = checkbox.dataset.shelfId;\n            if (shelfId) {\n                this.selectedShelves.add(shelfId);\n                checkbox.checked = true;\n            }\n        });\n        \n        this.currentFilters.shelfIds = Array.from(this.selectedShelves);\n        this.syncShelfSelections();\n        this.updateShelfDisplay();\n        this.applyFilters();\n    }\n\n    clearAllQuickShelves() {\n        // Clear all quick shelf selections (buttons)\n        const quickShelfButtons = document.querySelectorAll('.quick-shelf-btn');\n        \n        quickShelfButtons.forEach(button => {\n            const shelfId = button.dataset.shelfId;\n            if (shelfId) {\n                this.selectedShelves.delete(shelfId);\n                button.classList.remove('selected');\n            }\n        });\n        \n        // Also handle any remaining checkboxes for backwards compatibility\n        const quickShelfCheckboxes = document.querySelectorAll('.shelf-checkbox');\n        quickShelfCheckboxes.forEach(checkbox => {\n            checkbox.checked = false;\n            const shelfId = checkbox.dataset.shelfId;\n            if (shelfId) {\n                this.selectedShelves.delete(shelfId);\n            }\n        });\n        \n        this.currentFilters.shelfIds = [];\n        this.syncShelfSelections();\n        this.updateShelfDisplay();\n        this.applyFilters();\n    }\n\n    // Quick Product Search Methods\n    handleQuickProductSearch(searchValue) {\n        const trimmedValue = searchValue.trim();\n        this.currentFilters.productName = trimmedValue.toLowerCase();\n        \n        // Show/hide clear button\n        const clearButton = document.getElementById('quick-search-clear');\n        if (clearButton) {\n            clearButton.style.display = trimmedValue ? 'block' : 'none';\n        }\n        \n        // Also sync with main product search if it exists\n        const mainProductSearch = document.getElementById('product-search');\n        if (mainProductSearch && mainProductSearch.value !== searchValue) {\n            mainProductSearch.value = searchValue;\n        }\n        \n        // Apply filters with debouncing\n        if (this.quickSearchTimeout) {\n            clearTimeout(this.quickSearchTimeout);\n        }\n        \n        this.quickSearchTimeout = setTimeout(() => {\n            this.applyFilters();\n        }, 300); // 300ms debounce\n    }\n\n    clearQuickSearch() {\n        const quickSearchInput = document.getElementById('quick-product-search');\n        const mainProductSearch = document.getElementById('product-search');\n        const clearButton = document.getElementById('quick-search-clear');\n        \n        if (quickSearchInput) {\n            quickSearchInput.value = '';\n        }\n        \n        if (mainProductSearch) {\n            mainProductSearch.value = '';\n        }\n        \n        if (clearButton) {\n            clearButton.style.display = 'none';\n        }\n        \n        this.currentFilters.productName = '';\n        this.applyFilters();\n    }\n\n    syncShelfSelections() {\n        // Sync selection state between quick filters and main dropdown\n        document.querySelectorAll('.shelf-option input[type=\"checkbox\"]').forEach(checkbox => {\n            const shelfId = checkbox.value;\n            checkbox.checked = this.selectedShelves.has(shelfId);\n        });\n    }\n\n    // Pagination Methods\n    initializePagination() {\n        this.updatePagination();\n    }\n\n    updatePagination() {\n        const totalItems = this.filteredBarcodes.length;\n        const totalPages = Math.ceil(totalItems / this.itemsPerPage);\n        \n        // Update pagination info\n        const paginationInfo = document.getElementById('pagination-info');\n        if (paginationInfo) {\n            const startItem = (this.currentPage - 1) * this.itemsPerPage + 1;\n            const endItem = Math.min(this.currentPage * this.itemsPerPage, totalItems);\n            paginationInfo.textContent = `${startItem}-${endItem} / ${totalItems} kayƒ±t`;\n        }\n        \n        // Update pagination buttons\n        const prevBtn = document.getElementById('prev-page');\n        const nextBtn = document.getElementById('next-page');\n        \n        if (prevBtn) {\n            prevBtn.disabled = this.currentPage <= 1;\n        }\n        \n        if (nextBtn) {\n            nextBtn.disabled = this.currentPage >= totalPages;\n        }\n        \n        // Update page numbers\n        this.renderPageNumbers(totalPages);\n        \n        // Hide pagination if not needed\n        const paginationContainer = document.getElementById('pagination-container');\n        if (paginationContainer) {\n            paginationContainer.style.display = totalPages > 1 ? 'flex' : 'none';\n        }\n    }\n\n    renderPageNumbers(totalPages) {\n        const numbersContainer = document.getElementById('pagination-numbers');\n        if (!numbersContainer) return;\n        \n        numbersContainer.innerHTML = '';\n        \n        // Show max 5 page numbers around current page\n        let startPage = Math.max(1, this.currentPage - 2);\n        let endPage = Math.min(totalPages, startPage + 4);\n        \n        if (endPage - startPage < 4) {\n            startPage = Math.max(1, endPage - 4);\n        }\n        \n        for (let i = startPage; i <= endPage; i++) {\n            const pageBtn = document.createElement('button');\n            pageBtn.className = `page-number ${i === this.currentPage ? 'active' : ''}`;\n            pageBtn.textContent = i;\n            pageBtn.onclick = () => this.goToPage(i);\n            numbersContainer.appendChild(pageBtn);\n        }\n    }\n\n    goToPage(page) {\n        const totalPages = Math.ceil(this.filteredBarcodes.length / this.itemsPerPage);\n        if (page < 1 || page > totalPages) return;\n        \n        this.currentPage = page;\n        this.updateTable();\n        this.updatePagination();\n    }\n\n    changePage(direction) {\n        const newPage = this.currentPage + direction;\n        this.goToPage(newPage);\n    }\n\n    changeItemsPerPage(itemsPerPage) {\n        this.itemsPerPage = parseInt(itemsPerPage);\n        this.currentPage = 1; // Reset to first page\n        this.updateTable();\n        this.updatePagination();\n    }\n\n    // View Toggle Methods\n    switchView(view) {\n        this.currentView = view;\n        \n        // Update button states\n        document.querySelectorAll('.view-btn').forEach(btn => {\n            btn.classList.remove('active');\n            if (btn.dataset.view === view) {\n                btn.classList.add('active');\n            }\n        });\n        \n        // Switch between table and list view\n        const tableWrapper = document.querySelector('.table-wrapper');\n        const listContainer = document.querySelector('.barcode-list');\n        \n        if (view === 'table') {\n            if (tableWrapper) tableWrapper.style.display = 'block';\n            if (listContainer) listContainer.style.display = 'none';\n        } else {\n            if (tableWrapper) tableWrapper.style.display = 'none';\n            if (listContainer) listContainer.style.display = 'block';\n            this.renderListView();\n        }\n    }\n\n    renderListView() {\n        let listContainer = document.querySelector('.barcode-list');\n        \n        if (!listContainer) {\n            listContainer = document.createElement('div');\n            listContainer.className = 'barcode-list';\n            document.querySelector('.results-container').appendChild(listContainer);\n        }\n        \n        listContainer.innerHTML = '';\n        \n        const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n        const endIndex = startIndex + this.itemsPerPage;\n        const pageItems = this.filteredBarcodes.slice(startIndex, endIndex);\n        \n        pageItems.forEach(barcode => {\n            const warehouse = this.warehouses.find(w => w.id === barcode.warehouseId);\n            const item = document.createElement('div');\n            item.className = 'barcode-item';\n            item.onclick = () => openBarcodeModal(barcode.code);\n            \n            item.innerHTML = `\n                <div class=\"barcode-item-header\">\n                    <div class=\"barcode-item-title\">${barcode.productName}</div>\n                    <div class=\"barcode-item-code\">${barcode.code}</div>\n                </div>\n                <div class=\"barcode-item-details\">\n                    <div><strong>${window.i18nUnits?.quantity || 'Miktar'}:</strong> ${barcode.quantity} ${barcode.unit === 'metre' ? window.i18nUnits?.meters || 'm' : window.i18nUnits?.pieces || 'adet'}</div>\n                    <div><strong>Depo:</strong> ${warehouse ? warehouse.name : 'N/A'}</div>\n                    <div><strong>Raf:</strong> ${barcode.shelfId || '-'}</div>\n                </div>\n            `;\n            \n            listContainer.appendChild(item);\n        });\n    }\n\n    applyFilters() {\n        this.filteredBarcodes = this.allBarcodes.filter(barcode => {\n            // Warehouse filter\n            if (this.currentFilters.warehouseId && barcode.warehouseId !== this.currentFilters.warehouseId) {\n                return false;\n            }\n            \n            // Shelf filter (multiple shelves)\n            if (this.currentFilters.shelfIds.length > 0 && \n                !this.currentFilters.shelfIds.includes(barcode.shelfId)) {\n                return false;\n            }\n            \n            // Product name search\n            if (this.currentFilters.productName && \n                !barcode.productName.toLowerCase().includes(this.currentFilters.productName)) {\n                return false;\n            }\n            \n            return true;\n        });\n\n        this.currentPage = 1; // Reset to first page when filtering\n        this.updateTable();\n        this.updateStatistics();\n        this.updateActiveFilters();\n        this.updateQuickFilterStates();\n        this.updatePagination();\n    }\n\n    updateTable() {\n        const tableBody = document.getElementById('barcode-table-body');\n        const noResults = document.getElementById('no-results');\n        \n        if (!tableBody) return;\n\n        // Hide all rows first\n        this.allBarcodes.forEach(barcode => {\n            if (barcode.element) {\n                barcode.element.style.display = 'none';\n            }\n        });\n\n        // Show filtered rows with pagination\n        if (this.filteredBarcodes.length > 0) {\n            const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n            const endIndex = startIndex + this.itemsPerPage;\n            const pageItems = this.filteredBarcodes.slice(startIndex, endIndex);\n            \n            pageItems.forEach(barcode => {\n                if (barcode.element) {\n                    barcode.element.style.display = '';\n                }\n            });\n            \n            if (noResults) noResults.style.display = 'none';\n            \n            // Update list view if active\n            if (this.currentView === 'list') {\n                this.renderListView();\n            }\n        } else {\n            if (noResults) noResults.style.display = 'block';\n        }\n    }\n\n    updateStatistics() {\n        const totalBarcodes = this.filteredBarcodes.length;\n        const totalPieces = this.filteredBarcodes\n            .filter(b => b.unit === 'adet')\n            .reduce((sum, b) => sum + b.quantity, 0);\n        const totalMeters = this.filteredBarcodes\n            .filter(b => b.unit === 'metre')\n            .reduce((sum, b) => sum + b.quantity, 0);\n        const uniqueProducts = new Set(this.filteredBarcodes.map(b => b.productId)).size;\n\n        // Update stat cards\n        const elements = {\n            'filtered-total-barcodes': totalBarcodes,\n            'filtered-total-pieces': totalPieces,\n            'filtered-total-meters': totalMeters.toFixed(2),\n            'filtered-unique-products': uniqueProducts\n        };\n\n        Object.entries(elements).forEach(([id, value]) => {\n            const element = document.getElementById(id);\n            if (element) {\n                element.textContent = value;\n                this.animateNumberChange(element);\n            }\n        });\n\n        // Update header stats\n        const totalRecords = document.getElementById('total-records');\n        if (totalRecords) {\n            totalRecords.innerHTML = `<i class=\"fas fa-box\"></i> ${totalBarcodes} Kayƒ±t G√∂steriliyor`;\n        }\n    }\n\n    animateNumberChange(element) {\n        element.style.transform = 'scale(1.1)';\n        element.style.transition = 'transform 0.2s ease';\n        setTimeout(() => {\n            element.style.transform = 'scale(1)';\n        }, 200);\n    }\n\n    updateActiveFilters() {\n        const activeFiltersContainer = document.getElementById('active-filters');\n        const activeFiltersList = document.querySelector('.active-filters-list');\n        \n        if (!activeFiltersContainer || !activeFiltersList) return;\n\n        const activeFilters = [];\n        \n        if (this.currentFilters.warehouseId) {\n            const warehouse = this.warehouses.find(w => w.id === this.currentFilters.warehouseId);\n            if (warehouse) {\n                activeFilters.push({\n                    type: 'warehouse',\n                    label: `Depo: ${warehouse.name}`,\n                    value: this.currentFilters.warehouseId\n                });\n            }\n        }\n        \n        if (this.currentFilters.shelfIds.length > 0) {\n            activeFilters.push({\n                type: 'shelf',\n                label: `Raflar: ${this.currentFilters.shelfIds.join(', ')}`,\n                value: this.currentFilters.shelfIds.join(',')\n            });\n        }\n        \n        if (this.currentFilters.productName) {\n            activeFilters.push({\n                type: 'product',\n                label: `√úr√ºn: \"${this.currentFilters.productName}\"`,\n                value: this.currentFilters.productName\n            });\n        }\n\n        if (activeFilters.length > 0) {\n            activeFiltersList.innerHTML = activeFilters.map(filter => `\n                <div class=\"active-filter-tag\">\n                    <span>${filter.label}</span>\n                    <button type=\"button\" onclick=\"stockManager.removeFilter('${filter.type}')\">\n                        <i class=\"fas fa-times\"></i>\n                    </button>\n                </div>\n            `).join('');\n            activeFiltersContainer.style.display = 'block';\n        } else {\n            activeFiltersContainer.style.display = 'none';\n        }\n    }\n\n    updateQuickFilterStates() {\n        // Update quick filter button states\n        document.querySelectorAll('.quick-filter-btn').forEach(btn => {\n            btn.classList.remove('active');\n        });\n\n        if (this.currentFilters.warehouseId) {\n            const warehouseBtn = document.querySelector(`[data-warehouse-id=\"${this.currentFilters.warehouseId}\"]`);\n            if (warehouseBtn) warehouseBtn.classList.add('active');\n        }\n\n        if (this.currentFilters.shelfId) {\n            const shelfBtn = document.querySelector(`[data-shelf-id=\"${this.currentFilters.shelfId}\"]`);\n            if (shelfBtn) shelfBtn.classList.add('active');\n        }\n    }\n\n    removeFilter(type) {\n        switch (type) {\n            case 'warehouse':\n                this.currentFilters.warehouseId = '';\n                this.currentFilters.shelfIds = []; // Also clear shelves\n                const warehouseFilter = document.getElementById('warehouse-filter');\n                if (warehouseFilter) {\n                    warehouseFilter.value = '';\n                }\n                this.selectedShelves.clear();\n                this.updateShelfOptions('');\n                this.updateShelfDisplay();\n                break;\n            case 'shelf':\n                this.currentFilters.shelfIds = [];\n                this.selectedShelves.clear();\n                this.updateShelfDisplay();\n                // Uncheck all shelf checkboxes\n                document.querySelectorAll('.shelf-option input[type=\"checkbox\"]').forEach(checkbox => {\n                    checkbox.checked = false;\n                });\n                break;\n            case 'product':\n                this.currentFilters.productName = '';\n                const productSearch = document.getElementById('product-search');\n                if (productSearch) {\n                    productSearch.value = '';\n                }\n                break;\n        }\n        this.applyFilters();\n    }\n\n    // Quick filter functions\n    quickFilterWarehouse(warehouseId) {\n        const warehouseFilter = document.getElementById('warehouse-filter');\n        if (warehouseFilter) {\n            warehouseFilter.value = warehouseId;\n            this.handleWarehouseChange(warehouseId);\n        }\n    }\n\n    quickFilterShelf(shelfId) {\n        // Find warehouse for this shelf\n        const barcode = this.allBarcodes.find(b => b.shelfId === shelfId);\n        if (barcode) {\n            const warehouseFilter = document.getElementById('warehouse-filter');\n            if (warehouseFilter) {\n                warehouseFilter.value = barcode.warehouseId;\n                this.handleWarehouseChange(barcode.warehouseId);\n                setTimeout(() => {\n                    // Add shelf to selected shelves\n                    this.selectedShelves.add(shelfId);\n                    this.currentFilters.shelfIds = [shelfId];\n                    \n                    // Update checkbox if it exists\n                    const checkbox = document.querySelector(`input[value=\"${shelfId}\"]`);\n                    if (checkbox) {\n                        checkbox.checked = true;\n                    }\n                    \n                    this.updateShelfDisplay();\n                    this.applyFilters();\n                }, 100);\n            }\n        }\n    }\n\n    clearAllFilters() {\n        this.currentFilters = {\n            warehouseId: '',\n            shelfIds: [],\n            productName: ''\n        };\n        \n        const warehouseFilter = document.getElementById('warehouse-filter');\n        if (warehouseFilter) {\n            warehouseFilter.value = '';\n        }\n        \n        const productSearch = document.getElementById('product-search');\n        if (productSearch) {\n            productSearch.value = '';\n        }\n        \n        this.selectedShelves.clear();\n        this.updateShelfOptions('');\n        this.updateShelfDisplay();\n        this.applyFilters();\n    }\n\n    // Export functionality\n    exportToExcel() {\n        const data = this.prepareExportData();\n        const ws = XLSX.utils.json_to_sheet(data);\n        const wb = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(wb, ws, \"Stock by Warehouse\");\n        \n        const fileName = `stock_by_warehouse_${new Date().toISOString().split('T')[0]}.xlsx`;\n        XLSX.writeFile(wb, fileName);\n    }\n\n    exportToCSV() {\n        const data = this.prepareExportData();\n        const csv = this.jsonToCSV(data);\n        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement('a');\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `stock_by_warehouse_${new Date().toISOString().split('T')[0]}.csv`);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    prepareExportData() {\n        return this.filteredBarcodes.map(barcode => {\n            const warehouse = this.warehouses.find(w => w.id === barcode.warehouseId);\n            const attributes = barcode.attributes.map(attr => `${attr.name}: ${attr.value}`).join(', ');\n            \n            return {\n                'Barkod': barcode.code,\n                '√úr√ºn Adƒ±': barcode.productName,\n                '√ñzellikler': attributes || '-',\n                'Miktar': `${barcode.quantity} ${barcode.unit === 'metre' ? window.i18nUnits?.meters || 'm' : window.i18nUnits?.pieces || 'adet'}`,\n                'Depo': warehouse ? warehouse.name : 'N/A',\n                'Raf': barcode.shelfId || '-',\n                'Birim': barcode.unit === 'metre' ? window.i18nUnits?.unitMetre || 'Metre' : window.i18nUnits?.unitAdet || 'Adet',\n                'Miktar (Sayƒ±)': barcode.quantity\n            };\n        });\n    }\n\n    jsonToCSV(jsonData) {\n        if (!jsonData.length) return '';\n        \n        const headers = Object.keys(jsonData[0]);\n        const csvContent = [\n            headers.join(','),\n            ...jsonData.map(row => \n                headers.map(header => \n                    `\"${String(row[header]).replace(/\"/g, '\"\"')}\"`\n                ).join(',')\n            )\n        ].join('\\n');\n        \n        return csvContent;\n    }\n\n}\n\n// Global functions for onclick handlers\nfunction quickFilterWarehouse(warehouseId) {\n    if (window.stockManager) {\n        window.stockManager.quickFilterWarehouse(warehouseId);\n    }\n}\n\nfunction quickFilterShelf(shelfId) {\n    if (window.stockManager) {\n        window.stockManager.quickFilterShelf(shelfId);\n    }\n}\n\nfunction clearAllFilters() {\n    if (window.stockManager) {\n        window.stockManager.clearAllFilters();\n    }\n}\n\nfunction exportToExcel() {\n    if (window.stockManager) {\n        window.stockManager.exportToExcel();\n    }\n}\n\nfunction exportToCSV() {\n    if (window.stockManager) {\n        window.stockManager.exportToCSV();\n    }\n}\n\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('Initializing Enhanced Stock Warehouse System');\n    window.stockManager = new StockWarehouseManager();\n});\n\n// Global functions for HTML onclick handlers\nfunction toggleShelfDropdown() {\n    if (window.stockManager) {\n        window.stockManager.toggleShelfDropdown();\n    }\n}\n\nfunction clearSelectedShelves() {\n    if (window.stockManager) {\n        window.stockManager.clearSelectedShelves();\n    }\n}\n\nfunction selectAllShelves() {\n    if (window.stockManager) {\n        window.stockManager.selectAllShelves();\n    }\n}\n\nfunction changePage(direction) {\n    if (window.stockManager) {\n        window.stockManager.changePage(direction);\n    }\n}\n\nfunction changeItemsPerPage(itemsPerPage) {\n    if (window.stockManager) {\n        window.stockManager.changeItemsPerPage(itemsPerPage);\n    }\n}\n\nfunction switchView(view) {\n    if (window.stockManager) {\n        window.stockManager.switchView(view);\n    }\n}\n\n// Make sure stockManager is available globally for onclick handlers\nfunction handleShelfCheckboxChange(shelfId, isChecked) {\n    if (window.stockManager) {\n        window.stockManager.handleShelfCheckboxChange(shelfId, isChecked);\n    }\n}\n\n// Add XLSX library check\nif (typeof XLSX === 'undefined') {\n    console.warn('XLSX library not loaded. Excel export will not work.');\n    // Load XLSX library dynamically\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js';\n    document.head.appendChild(script);\n}","size_bytes":39122},"client/src/components/GridEditor.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trash2 } from \"lucide-react\";\n\n// Generic row interface - any row data must extend this\nexport interface GridRow {\n  id: string;\n  isNew: boolean;\n  isEditing: boolean;\n  [key: string]: any;\n}\n\n// Column definition interface\nexport interface GridColumn {\n  key: string;\n  label: string;\n  width?: string;\n  type?: \"text\" | \"number\" | \"select\";\n  options?: string[];\n  required?: boolean;\n}\n\n// Attribute interface for dynamic columns\nexport interface GridAttribute {\n  id: string;\n  name: string;\n  type: string;\n  options: string[];\n}\n\n// GridEditor props interface\nexport interface GridEditorProps<T extends GridRow> {\n  rows: T[];\n  columns: GridColumn[];\n  attributes?: GridAttribute[];\n  onRowsChange: (rows: T[]) => void;\n  onSave?: (row: T) => Promise<void>;\n  onDelete?: (rowId: string, rowIndex: number) => Promise<void>;\n  onValidate?: (row: T) => { [key: string]: string } | null;\n  isLoading?: boolean;\n  createEmptyRow: () => T;\n  className?: string;\n  showRowNumbers?: boolean;\n  showDeleteButton?: boolean;\n}\n\n// Cell editing state interface\ninterface EditingCell {\n  rowIndex: number;\n  field: string;\n}\n\nexport function GridEditor<T extends GridRow>({\n  rows,\n  columns,\n  attributes = [],\n  onRowsChange,\n  onSave,\n  onDelete,\n  onValidate,\n  isLoading = false,\n  createEmptyRow,\n  className = \"\",\n  showRowNumbers = true,\n  showDeleteButton = true,\n}: GridEditorProps<T>) {\n  const [editingCell, setEditingCell] = useState<EditingCell | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleCellClick = (rowIndex: number, field: string) => {\n    setEditingCell({ rowIndex, field });\n  };\n\n  const handleCellBlur = useCallback(async (rowIndex: number, field: string, value: any) => {\n    setEditingCell(null);\n    \n    const updatedRows = [...rows];\n    const row = updatedRows[rowIndex];\n    \n    // Update the field value\n    (row as any)[field] = value;\n    \n    // Validate if validator is provided\n    if (onValidate) {\n      const errors = onValidate(row);\n      if (errors && Object.keys(errors).length > 0) {\n        // Could show validation errors here\n        console.warn(\"Validation errors:\", errors);\n      }\n    }\n    \n    // If this was an empty row and user entered data, save it and add new empty row\n    if (row.isNew && hasData(row)) {\n      // Mark as ready to save\n      row.isEditing = true;\n      onRowsChange(updatedRows);\n      \n      // Save the row if save function is provided\n      if (onSave) {\n        try {\n          await onSave(row);\n          \n          // Add new empty row if this was the last row\n          if (rowIndex === rows.length - 1) {\n            updatedRows.push(createEmptyRow());\n            onRowsChange(updatedRows);\n          }\n        } catch (error) {\n          console.error(\"Save failed:\", error);\n        }\n      }\n    } else if (!row.isNew) {\n      // Update existing row\n      onRowsChange(updatedRows);\n      if (onSave) {\n        try {\n          await onSave(row);\n        } catch (error) {\n          console.error(\"Update failed:\", error);\n        }\n      }\n    } else {\n      // Just update state for new rows without significant data\n      onRowsChange(updatedRows);\n    }\n  }, [rows, onRowsChange, onSave, onValidate, createEmptyRow]);\n\n  const handleDeleteRow = async (rowId: string, rowIndex: number) => {\n    if (rows[rowIndex].isNew) {\n      // Just remove from local state\n      const updatedRows = rows.filter((_, index) => index !== rowIndex);\n      onRowsChange(updatedRows);\n    } else if (onDelete) {\n      // Delete from server\n      try {\n        await onDelete(rowId, rowIndex);\n      } catch (error) {\n        console.error(\"Delete failed:\", error);\n      }\n    }\n  };\n\n  const hasData = (row: T): boolean => {\n    // Check if row has meaningful data (customize this logic based on your needs)\n    return columns.some(col => {\n      const value = (row as any)[col.key];\n      return value && value.toString().trim() !== \"\" && value !== 0;\n    });\n  };\n\n  const getRowAttribute = (row: T, attributeName: string): string => {\n    const rowAttributes = (row as any).attributes;\n    if (!rowAttributes || !Array.isArray(rowAttributes)) return \"\";\n    // Handle both string array and object array formats\n    if (rowAttributes.length > 0 && typeof rowAttributes[0] === 'string') {\n      // Legacy string array format, return empty string for now\n      return \"\";\n    }\n    const attr = (rowAttributes as any[]).find((a: any) => a.name === attributeName);\n    return attr?.value || \"\";\n  };\n\n  const setRowAttribute = (row: T, attributeName: string, value: string) => {\n    if (!(row as any).attributes) (row as any).attributes = [];\n    \n    const rowAttributes = (row as any).attributes;\n    const existingAttrIndex = rowAttributes.findIndex((a: any) => a.name === attributeName);\n    const attribute = attributes.find(a => a.name === attributeName);\n    \n    if (existingAttrIndex >= 0) {\n      rowAttributes[existingAttrIndex].value = value;\n    } else if (attribute) {\n      rowAttributes.push({\n        attributeId: attribute.id,\n        name: attributeName,\n        value: value\n      });\n    }\n  };\n\n  const renderCell = (row: T, rowIndex: number, column: GridColumn, attributeName?: string) => {\n    const isEditing = editingCell?.rowIndex === rowIndex && editingCell?.field === column.key;\n    \n    if (attributeName) {\n      const value = getRowAttribute(row, attributeName);\n      const attribute = attributes.find(a => a.name === attributeName);\n      \n      if (isEditing && attribute?.options) {\n        return (\n          <Select\n            value={value}\n            onValueChange={(newValue: string) => {\n              setRowAttribute(row, attributeName, newValue);\n              handleCellBlur(rowIndex, column.key, row);\n            }}\n            data-testid={`select-${column.key}-${rowIndex}`}\n          >\n            <SelectTrigger className=\"h-8 border-0 focus:ring-1 focus:ring-primary\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {attribute.options.map((option) => (\n                <SelectItem key={option} value={option}>\n                  {option}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n      }\n      \n      return (\n        <div\n          className=\"h-8 px-2 py-1 cursor-pointer hover:bg-muted/50 rounded text-sm flex items-center\"\n          onClick={() => handleCellClick(rowIndex, column.key)}\n          data-testid={`cell-${column.key}-${rowIndex}`}\n        >\n          {value || (row.isNew ? \"\" : \"-\")}\n        </div>\n      );\n    }\n\n    const value = (row as any)[column.key] || \"\";\n\n    if (isEditing) {\n      // Handle different input types\n      if (column.type === \"select\" && column.options) {\n        return (\n          <Select\n            value={value}\n            onValueChange={(newValue: string) => handleCellBlur(rowIndex, column.key, newValue)}\n            data-testid={`select-${column.key}-${rowIndex}`}\n          >\n            <SelectTrigger className=\"h-8 border-0 focus:ring-1 focus:ring-primary\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {column.options.map((option) => (\n                <SelectItem key={option} value={option}>\n                  {option}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n      }\n\n      // Regular text/number input\n      return (\n        <Input\n          ref={inputRef}\n          type={column.type === \"number\" ? \"number\" : \"text\"}\n          value={value}\n          onChange={(e) => {\n            const updatedRows = [...rows];\n            (updatedRows[rowIndex] as any)[column.key] = e.target.value;\n            onRowsChange(updatedRows);\n          }}\n          onBlur={() => handleCellBlur(rowIndex, column.key, value)}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              handleCellBlur(rowIndex, column.key, value);\n            }\n          }}\n          className=\"h-8 border-0 focus:ring-1 focus:ring-primary\"\n          autoFocus\n          data-testid={`input-${column.key}-${rowIndex}`}\n        />\n      );\n    }\n\n    // Display mode\n    return (\n      <div\n        className=\"h-8 px-2 py-1 cursor-pointer hover:bg-muted/50 rounded text-sm flex items-center\"\n        onClick={() => handleCellClick(rowIndex, column.key)}\n        data-testid={`cell-${column.key}-${rowIndex}`}\n      >\n        {value || (row.isNew ? \"\" : \"-\")}\n      </div>\n    );\n  };\n\n  return (\n    <div className={`overflow-auto border rounded-lg bg-background ${className}`}>\n      <Table>\n        <TableHeader>\n          <TableRow className=\"bg-muted/50\">\n            {showRowNumbers && (\n              <TableHead className=\"w-12 text-center font-semibold\">#</TableHead>\n            )}\n            {columns.map((col) => (\n              <TableHead \n                key={col.key} \n                style={{ width: col.width }}\n                className=\"font-semibold text-foreground\"\n              >\n                {col.label}\n              </TableHead>\n            ))}\n            {attributes.map((attr) => (\n              <TableHead \n                key={attr.id} \n                className=\"font-semibold text-foreground w-32\"\n              >\n                {attr.name}\n              </TableHead>\n            ))}\n            {showDeleteButton && (\n              <TableHead className=\"w-12 text-center font-semibold\">ƒ∞≈ülem</TableHead>\n            )}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {rows.map((row, index) => (\n            <TableRow \n              key={row.id || `new-${index}`}\n              className={`\n                ${row.isNew ? 'bg-blue-50/50 dark:bg-blue-950/20' : 'hover:bg-muted/30'}\n                ${index % 2 === 0 ? 'bg-background' : 'bg-muted/20'}\n              `}\n            >\n              {/* Row number */}\n              {showRowNumbers && (\n                <TableCell className=\"text-center text-muted-foreground font-mono text-sm\">\n                  {row.isNew ? '‚Ä¢' : index + 1}\n                </TableCell>\n              )}\n              \n              {/* Base columns */}\n              {columns.map((col) => (\n                <TableCell key={col.key} className=\"p-1\">\n                  {renderCell(row, index, col)}\n                </TableCell>\n              ))}\n              \n              {/* Attribute columns */}\n              {attributes.map((attr) => (\n                <TableCell key={attr.id} className=\"p-1\">\n                  {renderCell(row, index, { key: `attr-${attr.name}`, label: attr.name }, attr.name)}\n                </TableCell>\n              ))}\n              \n              {/* Actions */}\n              {showDeleteButton && (\n                <TableCell className=\"text-center p-1\">\n                  {!row.isNew && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDeleteRow(row.id!, index)}\n                      className=\"h-8 w-8 p-0 text-destructive hover:text-destructive hover:bg-destructive/10\"\n                      data-testid={`button-delete-${index}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </TableCell>\n              )}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nexport default GridEditor;","size_bytes":11866},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const mainRef = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const main = mainRef.current;\n    if (!main) return;\n\n    // Initial state for fade-in animation\n    main.style.opacity = '0';\n    main.style.transform = 'translateY(20px)';\n    main.style.transition = 'opacity 0.6s ease-out, transform 0.6s ease-out';\n\n    // Trigger animation after a short delay\n    const timer = setTimeout(() => {\n      main.style.opacity = '1';\n      main.style.transform = 'translateY(0)';\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <main \n      ref={mainRef}\n      className=\"min-h-screen flex items-center justify-center p-4 bg-background text-foreground\"\n      data-testid=\"main-greeting-page\"\n    >\n      <div className=\"text-center space-y-6 max-w-2xl mx-auto\">\n        <Card className=\"bg-card border border-border rounded-lg p-12 shadow-sm hover:shadow-md transition-shadow duration-200\">\n          {/* Main greeting text */}\n          <h1 \n            className=\"text-6xl md:text-7xl lg:text-8xl font-light text-foreground tracking-tight leading-none\"\n            data-testid=\"text-greeting\"\n          >\n            merhaba\n          </h1>\n          \n          {/* Subtle decorative element */}\n          <div className=\"mt-8 flex justify-center\">\n            <div \n              className=\"w-16 h-0.5 bg-primary rounded-full\"\n              data-testid=\"decorative-line\"\n            ></div>\n          </div>\n          \n          {/* Additional context */}\n          <p \n            className=\"mt-6 text-muted-foreground text-lg font-light\"\n            data-testid=\"text-welcome\"\n          >\n            Ho≈ü geldiniz\n          </p>\n\n          {/* Navigation Links */}\n          <div className=\"mt-8 flex gap-4 justify-center\">\n            <Link \n              to=\"/products/grid\"\n              className=\"inline-flex items-center px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors\"\n              data-testid=\"link-products-grid\"\n            >\n              √úr√ºn Grid Edit√∂r√º\n            </Link>\n            <Link \n              to=\"/import-export\"\n              className=\"inline-flex items-center px-4 py-2 bg-secondary text-secondary-foreground rounded-md hover:bg-secondary/90 transition-colors\"\n              data-testid=\"link-import-export\"\n            >\n              Import/Export\n            </Link>\n          </div>\n        </Card>\n        \n        {/* Footer information */}\n        <footer className=\"text-center\">\n          <p \n            className=\"text-sm text-muted-foreground\"\n            data-testid=\"text-footer\"\n          >\n            Simple HTML sayfasƒ±\n          </p>\n        </footer>\n      </div>\n    </main>\n  );\n}\n","size_bytes":2878},"client/src/pages/import-export.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download, Upload, FileSpreadsheet, AlertCircle, CheckCircle2, Edit3, ArrowLeft } from \"lucide-react\";\n// import { GridEditor, type GridRow, type GridColumn } from \"@/components/GridEditor\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ninterface PreviewData {\n  totalRows: number;\n  validRows: number;\n  invalidRows: number;\n  preview: Array<{\n    row: any;\n    rowIndex: number;\n    isValid: boolean;\n    errors: string[];\n  }>;\n  errors: Array<{\n    rowNumber: number;\n    errors: string[];\n    data: any;\n  }>;\n}\n\ninterface ImportResult {\n  success: boolean;\n  totalProcessed: number;\n  successCount: number;\n  failedCount: number;\n  errors: Array<{\n    rowNumber: number;\n    errors: string[];\n    data: any;\n  }>;\n}\n\n// Grid row interface for import editing - TEMPORARILY DISABLED\n// interface ImportGridRow extends GridRow {\n//   name: string;\n//   buyPrice: string;\n//   sellPrice: string;\n//   currency: string;\n//   buyCurrency: string;\n//   sellCurrency: string;\n//   stock: string;\n//   unit: string;\n//   status: string;\n//   description: string;\n//   originalRowIndex?: number;\n//   validationErrors: string[];\n// }\n\n// Grid columns configuration - TEMPORARILY DISABLED\n// const IMPORT_GRID_COLUMNS: GridColumn[] = [\n//   { key: \"name\", label: \"√úr√ºn Adƒ±\", width: \"200px\", type: \"text\", required: true },\n//   { key: \"buyPrice\", label: \"Alƒ±≈ü Fiyatƒ±\", width: \"120px\", type: \"number\", required: true },\n//   { key: \"sellPrice\", label: \"Satƒ±≈ü Fiyatƒ±\", width: \"120px\", type: \"number\", required: true },\n//   { key: \"buyCurrency\", label: \"Alƒ±≈ü Para Birimi\", width: \"120px\", type: \"select\", options: [\"USD\", \"EUR\", \"TRY\"], required: true },\n//   { key: \"sellCurrency\", label: \"Satƒ±≈ü Para Birimi\", width: \"120px\", type: \"select\", options: [\"USD\", \"EUR\", \"TRY\"], required: true },\n//   { key: \"stock\", label: \"Stok\", width: \"80px\", type: \"number\", required: true },\n//   { key: \"unit\", label: \"Birim\", width: \"80px\", type: \"select\", options: [\"adet\", \"metre\"], required: true },\n//   { key: \"status\", label: \"Durum\", width: \"100px\", type: \"select\", options: [\"Aktif\", \"Pasif\"], required: true },\n//   { key: \"description\", label: \"A√ßƒ±klama\", width: \"200px\", type: \"text\" },\n// ];\n\nexport default function ImportExport() {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewData, setPreviewData] = useState<PreviewData | null>(null);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const [updateExisting, setUpdateExisting] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [exportFormat, setExportFormat] = useState<\"xlsx\" | \"csv\">(\"xlsx\");\n  \n  // Grid editing state - TEMPORARILY DISABLED\n  // const [isGridMode, setIsGridMode] = useState(false);\n  // const [gridRows, setGridRows] = useState<ImportGridRow[]>([]);\n  // const [isGridSaving, setIsGridSaving] = useState(false);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Helper functions for grid data transformation - TEMPORARILY DISABLED\n  // const transformPreviewToGrid = useCallback((preview: PreviewData): ImportGridRow[] => {\n  //   return preview.preview.filter(item => item.isValid).map((item, index) => {\n  //     const row = item.row;\n  //     return {\n  //       id: `import-${index}`,\n  //       isNew: false,\n  //       isEditing: false,\n  //       name: row['√úr√ºn Adƒ±'] || '',\n  //       buyPrice: String(row['Alƒ±≈ü Fiyatƒ±'] || '0'),\n  //       sellPrice: String(row['Satƒ±≈ü Fiyatƒ±'] || '0'),\n  //       currency: row['Para Birimi'] || 'USD',\n  //       buyCurrency: row['Alƒ±≈ü Para Birimi'] || 'USD',\n  //       sellCurrency: row['Satƒ±≈ü Para Birimi'] || 'USD',\n  //       stock: String(row['Stok'] || '0'),\n  //       unit: row['Birim'] || 'adet',\n  //       status: row['Durum'] || 'Aktif',\n  //       description: row['A√ßƒ±klama'] || '',\n  //       originalRowIndex: item.rowIndex,\n  //       validationErrors: item.errors || []\n  //     };\n  //   });\n  // }, []);\n\n  // const createEmptyGridRow = useCallback((): ImportGridRow => {\n  //   return {\n  //     id: `new-${Date.now()}`,\n  //     isNew: true,\n  //     isEditing: false,\n  //     name: '',\n  //     buyPrice: '0',\n  //     sellPrice: '0',\n  //     currency: 'USD',\n  //     buyCurrency: 'USD',\n  //     sellCurrency: 'USD',\n  //     stock: '0',\n  //     unit: 'adet',\n  //     status: 'Aktif',\n  //     description: '',\n  //     validationErrors: []\n  //   };\n  // }, []);\n\n  // const validateGridRow = useCallback((row: ImportGridRow): { [key: string]: string } | null => {\n  //   const errors: { [key: string]: string } = {};\n  //   \n  //   if (!row.name.trim()) {\n  //     errors.name = \"√úr√ºn adƒ± gerekli\";\n  //   }\n  //   \n  //   const buyPrice = parseFloat(row.buyPrice);\n  //   if (isNaN(buyPrice) || buyPrice < 0) {\n  //     errors.buyPrice = \"Ge√ßerli alƒ±≈ü fiyatƒ± giriniz\";\n  //   }\n  //   \n  //   const sellPrice = parseFloat(row.sellPrice);\n  //   if (isNaN(sellPrice) || sellPrice < 0) {\n  //     errors.sellPrice = \"Ge√ßerli satƒ±≈ü fiyatƒ± giriniz\";\n  //   }\n  //   \n  //   const stock = parseInt(row.stock);\n  //   if (isNaN(stock) || stock < 0) {\n  //     errors.stock = \"Ge√ßerli stok miktarƒ± giriniz\";\n  //   }\n  //   \n  //   return Object.keys(errors).length > 0 ? errors : null;\n  // }, []);\n\n  // Download template\n  const downloadTemplate = useCallback(async (format: \"xlsx\" | \"csv\") => {\n    try {\n      const response = await fetch(`/api/import-export/template?format=${format}`);\n      if (!response.ok) throw new Error(\"Template download failed\");\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `urun_sablonu_${new Date().toISOString().split('T')[0]}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Ba≈üarƒ±lƒ±\",\n        description: `${format.toUpperCase()} ≈üablonu indirildi`\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Hata\",\n        description: \"≈ûablon indirme hatasƒ±\"\n      });\n    }\n  }, [toast]);\n\n  // Export products\n  const exportProducts = useCallback(async () => {\n    try {\n      const response = await fetch('/api/import-export/export', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          format: exportFormat\n        })\n      });\n      \n      if (!response.ok) throw new Error(\"Export failed\");\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `urunler_${new Date().toISOString().split('T')[0]}.${exportFormat}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Ba≈üarƒ±lƒ±\",\n        description: `√úr√ºnler ${exportFormat.toUpperCase()} formatƒ±nda dƒ±≈üarƒ± aktarƒ±ldƒ±`\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Hata\",\n        description: \"Dƒ±≈üarƒ± aktarma hatasƒ±\"\n      });\n    }\n  }, [exportFormat, toast]);\n\n  // Preview file\n  const previewMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch('/api/import-export/preview', {\n        method: 'POST',\n        body: formData\n      });\n      \n      if (!response.ok) {\n        throw new Error('Preview failed');\n      }\n      \n      return response.json() as Promise<PreviewData>;\n    },\n    onSuccess: (data: PreviewData) => {\n      setPreviewData(data);\n      toast({\n        title: \"√ñnizleme Hazƒ±r\",\n        description: `${data.totalRows} satƒ±r i≈ülendi. ${data.validRows} ge√ßerli, ${data.invalidRows} hatalƒ± satƒ±r bulundu.`\n      });\n    },\n    onError: (error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Hata\",\n        description: \"Dosya √∂nizleme hatasƒ±\"\n      });\n    }\n  });\n\n  // Import confirmed data\n  const importMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedFile) throw new Error('No file selected');\n      \n      const formData = new FormData();\n      formData.append('file', selectedFile);\n      formData.append('updateExisting', updateExisting.toString());\n      \n      const response = await fetch('/api/import-export/import', {\n        method: 'POST',\n        body: formData\n      });\n      \n      if (!response.ok) {\n        throw new Error('Import failed');\n      }\n      \n      return response.json() as Promise<ImportResult>;\n    },\n    onSuccess: (data) => {\n      setImportResult(data);\n      setPreviewData(null);\n      setSelectedFile(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n      \n      // Refresh products\n      queryClient.invalidateQueries({ queryKey: ['products'] });\n      \n      toast({\n        title: \"ƒ∞√ßeri Aktarma Tamamlandƒ±\",\n        description: `${data.successCount} √ºr√ºn ba≈üarƒ±yla eklendi/g√ºncellendi`\n      });\n    },\n    onError: (error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Hata\",\n        description: \"ƒ∞√ßeri aktarma hatasƒ±\"\n      });\n    }\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      setPreviewData(null);\n      setImportResult(null);\n    }\n  };\n\n  const handlePreview = () => {\n    if (selectedFile) {\n      previewMutation.mutate(selectedFile);\n    }\n  };\n\n  const handleConfirmImport = () => {\n    importMutation.mutate();\n  };\n\n  // Grid editing handlers - TEMPORARILY DISABLED\n  // const handleEditInGrid = () => {\n  //   if (previewData) {\n  //     const gridData = transformPreviewToGrid(previewData);\n  //     setGridRows(gridData);\n  //     setIsGridMode(true);\n  //   }\n  // };\n\n  // const handleBackToPreview = () => {\n  //   setIsGridMode(false);\n  // };\n\n  // const handleGridRowsChange = (rows: ImportGridRow[]) => {\n  //   setGridRows(rows);\n  // };\n\n  // const handleGridSave = async (row: ImportGridRow) => {\n  //   // For now, just validate and update the row\n  //   const errors = validateGridRow(row);\n  //   if (errors) {\n  //     row.validationErrors = Object.values(errors);\n  //     toast({\n  //       variant: \"destructive\",\n  //       title: \"Doƒürulama Hatasƒ±\",\n  //       description: Object.values(errors).join(\", \")\n  //     });\n  //     throw new Error(\"Validation failed\");\n  //   } else {\n  //     row.validationErrors = [];\n  //   }\n  // };\n\n  // const handleGridDelete = async (rowId: string, rowIndex: number) => {\n  //   const updatedRows = gridRows.filter((_, index) => index !== rowIndex);\n  //   setGridRows(updatedRows);\n  // };\n\n  // Import from grid data - TEMPORARILY DISABLED\n  // const importFromGrid = useMutation({\n  //   mutationFn: async () => {\n  //     setIsGridSaving(true);\n  //     \n  //     // Validate all rows first\n  //     const validRows = gridRows.filter(row => !row.isNew);\n  //     const hasErrors = validRows.some(row => {\n  //       const errors = validateGridRow(row);\n  //       return errors && Object.keys(errors).length > 0;\n  //     });\n  //     \n  //     if (hasErrors) {\n  //       throw new Error('Some rows have validation errors');\n  //     }\n\n  //     // Transform grid data to API format\n  //     const products = validRows.map(row => ({\n  //       name: row.name,\n  //       buyPrice: row.buyPrice,\n  //       sellPrice: row.sellPrice,\n  //       currency: row.currency,\n  //       buyCurrency: row.buyCurrency,\n  //       sellCurrency: row.sellCurrency,\n  //       stock: parseInt(row.stock),\n  //       unit: row.unit,\n  //       status: row.status,\n  //       description: row.description,\n  //       images: [],\n  //       attributes: []\n  //     }));\n\n  //     const response = await fetch('/api/import-export/import-from-grid', {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //       },\n  //       body: JSON.stringify({\n  //         products,\n  //         updateExisting\n  //       })\n  //     });\n  //     \n  //     if (!response.ok) {\n  //       throw new Error('Grid import failed');\n  //     }\n  //     \n  //     return response.json() as Promise<ImportResult>;\n  //   },\n  //   onSuccess: (data) => {\n  //     setImportResult(data);\n  //     setIsGridMode(false);\n  //     setGridRows([]);\n  //     setPreviewData(null);\n  //     setSelectedFile(null);\n  //     setIsGridSaving(false);\n  //     if (fileInputRef.current) {\n  //       fileInputRef.current.value = '';\n  //     }\n  //     \n  //     // Refresh products\n  //     queryClient.invalidateQueries({ queryKey: ['products'] });\n  //     \n  //     toast({\n  //       title: \"Grid ƒ∞√ßeri Aktarma Tamamlandƒ±\",\n  //       description: `${data.successCount} √ºr√ºn ba≈üarƒ±yla eklendi/g√ºncellendi`\n  //     });\n  //   },\n  //   onError: (error) => {\n  //     setIsGridSaving(false);\n  //     toast({\n  //       variant: \"destructive\",\n  //       title: \"Hata\",\n  //       description: \"Grid i√ßeri aktarma hatasƒ±\"\n  //     });\n  //   }\n  // });\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground\">\n            √úr√ºn Import/Export\n          </h1>\n          <p className=\"text-muted-foreground\">\n            √úr√ºnlerinizi Excel/CSV formatƒ±nda i√ßeri/dƒ±≈üarƒ± aktarƒ±n\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"export\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"export\" className=\"flex items-center gap-2\">\n              <Download className=\"w-4 h-4\" />\n              Dƒ±≈üarƒ± Aktar\n            </TabsTrigger>\n            <TabsTrigger value=\"import\" className=\"flex items-center gap-2\">\n              <Upload className=\"w-4 h-4\" />\n              ƒ∞√ßeri Aktar\n            </TabsTrigger>\n          </TabsList>\n\n          {/* EXPORT TAB */}\n          <TabsContent value=\"export\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Download className=\"w-5 h-5\" />\n                  √úr√ºnleri Dƒ±≈üarƒ± Aktar\n                </CardTitle>\n                <CardDescription>\n                  Mevcut √ºr√ºnlerinizi Excel veya CSV formatƒ±nda indirin\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"export-format\">Format Se√ßimi</Label>\n                  <Select value={exportFormat} onValueChange={(value: \"xlsx\" | \"csv\") => setExportFormat(value)}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"xlsx\">Excel (.xlsx)</SelectItem>\n                      <SelectItem value=\"csv\">CSV (.csv)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button onClick={exportProducts} className=\"flex items-center gap-2\">\n                    <Download className=\"w-4 h-4\" />\n                    √úr√ºnleri ƒ∞ndir ({exportFormat.toUpperCase()})\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* IMPORT TAB */}\n          <TabsContent value=\"import\" className=\"space-y-4\">\n            {/* Step 1: Download Template */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileSpreadsheet className=\"w-5 h-5\" />\n                  Adƒ±m 1: ≈ûablon ƒ∞ndir\n                </CardTitle>\n                <CardDescription>\n                  √ñnce ≈üablon dosyasƒ±nƒ± indirin ve doldurun\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => downloadTemplate(\"xlsx\")}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <FileSpreadsheet className=\"w-4 h-4\" />\n                    Excel ≈ûablonu (.xlsx)\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => downloadTemplate(\"csv\")}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <FileSpreadsheet className=\"w-4 h-4\" />\n                    CSV ≈ûablonu (.csv)\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Step 2: Upload File */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Upload className=\"w-5 h-5\" />\n                  Adƒ±m 2: Doldurulmu≈ü Dosyayƒ± Y√ºkle\n                </CardTitle>\n                <CardDescription>\n                  Doldurduƒüunuz Excel veya CSV dosyasƒ±nƒ± se√ßin\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"import-file\">Dosya Se√ßimi</Label>\n                  <Input\n                    id=\"import-file\"\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".xlsx,.csv\"\n                    onChange={handleFileSelect}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {selectedFile && (\n                  <Alert>\n                    <CheckCircle2 className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Se√ßilen dosya: {selectedFile.name} ({(selectedFile.size / 1024).toFixed(1)} KB)\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"update-existing\"\n                    checked={updateExisting}\n                    onCheckedChange={(checked: boolean) => setUpdateExisting(checked)}\n                  />\n                  <Label htmlFor=\"update-existing\">\n                    Mevcut √ºr√ºnleri g√ºncelle (aynƒ± isimli √ºr√ºnler i√ßin)\n                  </Label>\n                </div>\n\n                <Button \n                  onClick={handlePreview} \n                  disabled={!selectedFile || previewMutation.isPending}\n                  className=\"flex items-center gap-2\"\n                >\n                  {previewMutation.isPending ? \"ƒ∞≈üleniyor...\" : \"√ñnizleme\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Step 3: Preview Results */}\n            {previewData && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CheckCircle2 className=\"w-5 h-5\" />\n                    Adƒ±m 3: √ñnizleme ve Onay\n                  </CardTitle>\n                  <CardDescription>\n                    ƒ∞≈ülenecek verileri kontrol edin ve onaylayƒ±n\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Summary */}\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{previewData.totalRows}</div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Satƒ±r</div>\n                    </div>\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">{previewData.validRows}</div>\n                      <div className=\"text-sm text-muted-foreground\">Ge√ßerli Satƒ±r</div>\n                    </div>\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"text-2xl font-bold text-red-600\">{previewData.invalidRows}</div>\n                      <div className=\"text-sm text-muted-foreground\">Hatalƒ± Satƒ±r</div>\n                    </div>\n                  </div>\n\n                  {/* Errors Table */}\n                  {previewData.errors.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <h3 className=\"font-semibold text-red-600 flex items-center gap-2\">\n                        <AlertCircle className=\"w-4 h-4\" />\n                        Hatalƒ± Satƒ±rlar\n                      </h3>\n                      <div className=\"max-h-60 overflow-auto border rounded-lg\">\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>Satƒ±r No</TableHead>\n                              <TableHead>Hatalar</TableHead>\n                              <TableHead>√úr√ºn Adƒ±</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {previewData.errors.slice(0, 10).map((error, index) => (\n                              <TableRow key={index}>\n                                <TableCell>{error.rowNumber}</TableCell>\n                                <TableCell>\n                                  <div className=\"space-y-1\">\n                                    {error.errors.map((err, errIndex) => (\n                                      <Badge key={errIndex} variant=\"destructive\" className=\"text-xs\">\n                                        {err}\n                                      </Badge>\n                                    ))}\n                                  </div>\n                                </TableCell>\n                                <TableCell>{error.data['√úr√ºn Adƒ±'] || '-'}</TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </div>\n                      {previewData.errors.length > 10 && (\n                        <p className=\"text-sm text-muted-foreground\">\n                          ...ve {previewData.errors.length - 10} hatalƒ± satƒ±r daha\n                        </p>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Confirmation */}\n                  <div className=\"space-y-4\">\n                    {previewData.validRows > 0 && (\n                      <Alert>\n                        <CheckCircle2 className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          {previewData.validRows} ge√ßerli satƒ±r i√ßeri aktarƒ±lmaya hazƒ±r.\n                          {updateExisting ? \" Mevcut √ºr√ºnler g√ºncellenecek.\" : \" Sadece yeni √ºr√ºnler eklenecek.\"}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <div className=\"flex gap-2\">\n                      {/* Grid editing button temporarily disabled */}\n                      {/* <Button \n                        onClick={handleEditInGrid}\n                        disabled={previewData.validRows === 0}\n                        variant=\"outline\"\n                        className=\"flex-1 flex items-center gap-2\"\n                        size=\"lg\"\n                        data-testid=\"button-edit-grid\"\n                      >\n                        <Edit3 className=\"w-4 h-4\" />\n                        Grid'de D√ºzenle\n                      </Button> */}\n                      \n                      <Button \n                        onClick={handleConfirmImport}\n                        disabled={previewData.validRows === 0 || importMutation.isPending}\n                        className=\"w-full\"\n                        size=\"lg\"\n                        data-testid=\"button-confirm-import\"\n                      >\n                        {importMutation.isPending ? \"ƒ∞√ßeri Aktarƒ±lƒ±yor...\" : `${previewData.validRows} √úr√ºn√º Onayla & Kaydet`}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Grid Editor Mode - TEMPORARILY DISABLED\n            {isGridMode && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Edit3 className=\"w-5 h-5\" />\n                    Adƒ±m 3b: Grid'de D√ºzenle\n                  </CardTitle>\n                  <CardDescription>\n                    √úr√ºn verilerini grid √ºzerinde d√ºzenleyin, doƒürulayƒ±n ve kaydedin\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"flex items-center gap-2\">\n                      <Button \n                        onClick={handleBackToPreview}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex items-center gap-2\"\n                        data-testid=\"button-back-preview\"\n                      >\n                        <ArrowLeft className=\"w-4 h-4\" />\n                        √ñnizlemeye D√∂n\n                      </Button>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"secondary\">\n                        {gridRows.filter(row => !row.isNew).length} √úr√ºn\n                      </Badge>\n                      <Badge variant={gridRows.some(row => row.validationErrors.length > 0) ? \"destructive\" : \"default\"}>\n                        {gridRows.filter(row => row.validationErrors.length === 0 && !row.isNew).length} Ge√ßerli\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"border rounded-lg\">\n                    <GridEditor<ImportGridRow>\n                      rows={gridRows}\n                      columns={IMPORT_GRID_COLUMNS}\n                      onRowsChange={handleGridRowsChange}\n                      onSave={handleGridSave}\n                      onDelete={handleGridDelete}\n                      onValidate={validateGridRow}\n                      isLoading={isGridSaving}\n                      createEmptyRow={createEmptyGridRow}\n                      className=\"min-h-[400px] max-h-[600px]\"\n                      showRowNumbers={true}\n                      showDeleteButton={true}\n                    />\n                  </div>\n\n                  {gridRows.some(row => row.validationErrors.length > 0) && (\n                    <Alert variant=\"destructive\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Bazƒ± satƒ±rlarda doƒürulama hatalarƒ± var. L√ºtfen t√ºm hatalarƒ± d√ºzeltin.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  <div className=\"space-y-4\">\n                    {gridRows.filter(row => !row.isNew).length > 0 && (\n                      <Alert>\n                        <CheckCircle2 className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          {gridRows.filter(row => !row.isNew && row.validationErrors.length === 0).length} ge√ßerli √ºr√ºn grid'den i√ßeri aktarƒ±lmaya hazƒ±r.\n                          {updateExisting ? \" Mevcut √ºr√ºnler g√ºncellenecek.\" : \" Sadece yeni √ºr√ºnler eklenecek.\"}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <Button \n                      onClick={() => importFromGrid.mutate()}\n                      disabled={\n                        gridRows.filter(row => !row.isNew && row.validationErrors.length === 0).length === 0 || \n                        importFromGrid.isPending ||\n                        isGridSaving\n                      }\n                      className=\"w-full\"\n                      size=\"lg\"\n                      data-testid=\"button-import-grid\"\n                    >\n                      {importFromGrid.isPending || isGridSaving \n                        ? \"Grid'den ƒ∞√ßeri Aktarƒ±lƒ±yor...\" \n                        : `${gridRows.filter(row => !row.isNew && row.validationErrors.length === 0).length} √úr√ºn√º Grid'den Kaydet`\n                      }\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n            */}\n\n            {/* Import Results */}\n            {importResult && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-green-600\">\n                    <CheckCircle2 className=\"w-5 h-5\" />\n                    ƒ∞√ßeri Aktarma Tamamlandƒ±\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{importResult.totalProcessed}</div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam ƒ∞≈ülenen</div>\n                    </div>\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">{importResult.successCount}</div>\n                      <div className=\"text-sm text-muted-foreground\">Ba≈üarƒ±lƒ±</div>\n                    </div>\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"text-2xl font-bold text-red-600\">{importResult.failedCount}</div>\n                      <div className=\"text-sm text-muted-foreground\">Ba≈üarƒ±sƒ±z</div>\n                    </div>\n                  </div>\n\n                  <Alert>\n                    <CheckCircle2 className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      {importResult.successCount} √ºr√ºn ba≈üarƒ±yla eklendi/g√ºncellendi. \n                      √úr√ºnler listesi otomatik olarak g√ºncellenmi≈ütir.\n                    </AlertDescription>\n                  </Alert>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":32227},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products-grid.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Search, Grid3X3, Upload } from \"lucide-react\";\nimport GridEditor, { type GridRow, type GridColumn, type GridAttribute } from \"@/components/GridEditor\";\nimport type { Product, InsertProduct } from \"@shared/schema\";\n\ninterface GridProduct extends GridRow {\n  name: string;\n  buyPrice: string;\n  sellPrice: string;\n  currency: string;\n  buyCurrency: string;\n  sellCurrency: string;\n  stock: number;\n  unit: string;\n  status: string;\n  description: string | null;\n  coverImage: string | null;\n  images: string[] | null;\n  attributes: string[] | null;\n}\n\nconst CURRENCY_OPTIONS = [\"USD\", \"PLN\", \"UAH\"];\nconst UNIT_OPTIONS = [\"adet\", \"metre\"];\nconst STATUS_OPTIONS = [\"Aktif\", \"Pasif\"];\n\n// Column definitions for the grid\nconst PRODUCT_COLUMNS: GridColumn[] = [\n  { key: \"name\", label: \"√úr√ºn Adƒ±\", width: \"200px\", type: \"text\", required: true },\n  { key: \"description\", label: \"A√ßƒ±klama\", width: \"180px\", type: \"text\" },\n  { key: \"unit\", label: \"Birim\", width: \"100px\", type: \"select\", options: UNIT_OPTIONS },\n  { key: \"buyPrice\", label: \"Alƒ±≈ü Fiyatƒ±\", width: \"120px\", type: \"number\" },\n  { key: \"sellPrice\", label: \"Satƒ±≈ü Fiyatƒ±\", width: \"120px\", type: \"number\" },\n  { key: \"buyCurrency\", label: \"Alƒ±≈ü Para Birimi\", width: \"140px\", type: \"select\", options: CURRENCY_OPTIONS },\n  { key: \"sellCurrency\", label: \"Satƒ±≈ü Para Birimi\", width: \"140px\", type: \"select\", options: CURRENCY_OPTIONS },\n  { key: \"status\", label: \"Durum\", width: \"100px\", type: \"select\", options: STATUS_OPTIONS },\n];\n\nexport default function ProductsGrid() {\n  const [products, setProducts] = useState<GridProduct[]>([]);\n  const [attributes, setAttributes] = useState<GridAttribute[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filteredProducts, setFilteredProducts] = useState<GridProduct[]>([]);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch products\n  const { data: productsData, isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  // Fetch attributes for dynamic columns\n  const { data: attributesData } = useQuery<GridAttribute[]>({\n    queryKey: [\"/data/attributes.json\"],\n    queryFn: async () => {\n      const response = await fetch('/data/attributes.json');\n      if (!response.ok) throw new Error('Failed to fetch attributes');\n      return response.json();\n    }\n  });\n\n  // Initialize data when fetched\n  useEffect(() => {\n    if (productsData) {\n      const gridProducts = productsData.map(p => ({ ...p, isNew: false, isEditing: false }));\n      // Always add one empty row at the end\n      gridProducts.push(createEmptyProduct());\n      setProducts(gridProducts);\n    }\n  }, [productsData]);\n\n  useEffect(() => {\n    if (attributesData) {\n      setAttributes(attributesData);\n    }\n  }, [attributesData]);\n\n  // Filter products based on search\n  useEffect(() => {\n    if (!searchQuery.trim()) {\n      setFilteredProducts(products);\n    } else {\n      const filtered = products.filter(product =>\n        product.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        product.description?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n      setFilteredProducts(filtered);\n    }\n  }, [products, searchQuery]);\n\n  const createEmptyProduct = (): GridProduct => ({\n    id: \"\",\n    name: \"\",\n    description: \"\",\n    buyPrice: \"0\",\n    sellPrice: \"0\",\n    currency: \"USD\",\n    buyCurrency: \"USD\",\n    sellCurrency: \"USD\",\n    stock: 0,\n    unit: \"adet\",\n    status: \"Aktif\",\n    coverImage: null,\n    images: [],\n    attributes: [],\n    isNew: true,\n    isEditing: false\n  });\n\n  // Save product handler\n  const handleSaveProduct = async (product: GridProduct): Promise<void> => {\n    try {\n      if (product.isNew) {\n        // Create new product\n        const { isNew, isEditing, ...productData } = product;\n        await apiRequest(\"POST\", \"/api/products\", productData);\n      } else {\n        // Update existing product\n        const { isNew, isEditing, ...productData } = product;\n        await apiRequest(\"PATCH\", `/api/products/${product.id}`, productData);\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Ba≈üarƒ±lƒ±\",\n        description: \"√úr√ºn kaydedildi\",\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Hata\",\n        description: \"√úr√ºn kaydedilemedi\",\n      });\n      throw error;\n    }\n  };\n\n  // Delete product handler\n  const handleDeleteProduct = async (productId: string, rowIndex: number): Promise<void> => {\n    try {\n      await apiRequest(\"DELETE\", `/api/products/${productId}`);\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Ba≈üarƒ±lƒ±\",\n        description: \"√úr√ºn silindi\",\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Hata\",\n        description: \"√úr√ºn silinemedi\",\n      });\n      throw error;\n    }\n  };\n\n  // Product validation handler\n  const handleValidateProduct = (product: GridProduct): { [key: string]: string } | null => {\n    const errors: { [key: string]: string } = {};\n    \n    if (!product.name || product.name.trim() === \"\") {\n      errors.name = \"√úr√ºn adƒ± gereklidir\";\n    }\n    \n    if (product.buyPrice && isNaN(Number(product.buyPrice))) {\n      errors.buyPrice = \"Ge√ßerli bir fiyat giriniz\";\n    }\n    \n    if (product.sellPrice && isNaN(Number(product.sellPrice))) {\n      errors.sellPrice = \"Ge√ßerli bir fiyat giriniz\";\n    }\n    \n    return Object.keys(errors).length > 0 ? errors : null;\n  };\n\n\n\n\n  if (productsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl font-bold text-foreground\">√úr√ºn Grid Edit√∂r√º</h1>\n            <p className=\"text-muted-foreground mt-2\">Veriler y√ºkleniyor...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground flex items-center justify-center gap-2\">\n            <Grid3X3 className=\"w-8 h-8\" />\n            √úr√ºn Grid Edit√∂r√º\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Excel benzeri tablo edit√∂r√º ile √ºr√ºnlerinizi y√∂netin\n          </p>\n        </div>\n\n        {/* Controls */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <Search className=\"w-5 h-5\" />\n              Arama ve Filtreler\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex gap-4 items-center\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"search\">√úr√ºn Ara</Label>\n                <Input\n                  id=\"search\"\n                  type=\"text\"\n                  placeholder=\"√úr√ºn adƒ± veya a√ßƒ±klama ile ara...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"mt-1\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => window.location.href = '/import-export'}\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-import-export\"\n                >\n                  <Upload className=\"w-4 h-4\" />\n                  Import/Export\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Grid */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>√úr√ºn Tablosu ({filteredProducts.length - 1} √ºr√ºn)</span>\n              <div className=\"text-sm text-muted-foreground\">\n                D√ºzenlemek i√ßin h√ºcreye √ßift tƒ±klayƒ±n\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <GridEditor<GridProduct>\n              rows={filteredProducts}\n              columns={PRODUCT_COLUMNS}\n              attributes={attributes}\n              onRowsChange={setProducts}\n              onSave={handleSaveProduct}\n              onDelete={handleDeleteProduct}\n              onValidate={handleValidateProduct}\n              isLoading={productsLoading}\n              createEmptyRow={createEmptyProduct}\n              showRowNumbers={true}\n              showDeleteButton={true}\n            />\n            \n            {/* Grid Info */}\n            <div className=\"mt-4 text-sm text-muted-foreground space-y-1\">\n              <p>‚Ä¢ Son satƒ±r her zaman yeni √ºr√ºn eklemek i√ßin bo≈ü bƒ±rakƒ±lƒ±r</p>\n              <p>‚Ä¢ Deƒüi≈üiklikler otomatik olarak kaydedilir</p>\n              <p>‚Ä¢ Dropdown alanlar i√ßin h√ºcreye tƒ±klayarak se√ßenekleri g√∂r√ºn</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9740},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}